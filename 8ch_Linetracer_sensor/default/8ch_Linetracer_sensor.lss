
8ch_Linetracer_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000059e  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800070  00800070  00000642  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000115  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046e  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d8  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000584  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a5  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a1  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  8a:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_read>:
////////////////
return 0;
}

void ADC_read(unsigned char sen)
{
  92:	e8 2f       	mov	r30, r24
  if(sen==0) {ADMUX=0x60;} else if(sen==1) {ADMUX=0x61;} else if(sen==2) {ADMUX=0x62;} else if(sen==3) {ADMUX=0x63;} else if(sen==4) {ADMUX=0x64;} else if(sen==5) {ADMUX=0x65;}else if(sen==6) {ADMUX=0x66;}else if(sen==7) {ADMUX=0x67;}
  94:	88 23       	and	r24, r24
  96:	11 f4       	brne	.+4      	; 0x9c <ADC_read+0xa>
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	1b c0       	rjmp	.+54     	; 0xd2 <ADC_read+0x40>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	11 f4       	brne	.+4      	; 0xa4 <ADC_read+0x12>
  a0:	81 e6       	ldi	r24, 0x61	; 97
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <ADC_read+0x40>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	11 f4       	brne	.+4      	; 0xac <ADC_read+0x1a>
  a8:	82 e6       	ldi	r24, 0x62	; 98
  aa:	13 c0       	rjmp	.+38     	; 0xd2 <ADC_read+0x40>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	11 f4       	brne	.+4      	; 0xb4 <ADC_read+0x22>
  b0:	83 e6       	ldi	r24, 0x63	; 99
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <ADC_read+0x40>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	11 f4       	brne	.+4      	; 0xbc <ADC_read+0x2a>
  b8:	84 e6       	ldi	r24, 0x64	; 100
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <ADC_read+0x40>
  bc:	85 30       	cpi	r24, 0x05	; 5
  be:	11 f4       	brne	.+4      	; 0xc4 <ADC_read+0x32>
  c0:	85 e6       	ldi	r24, 0x65	; 101
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <ADC_read+0x40>
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	11 f4       	brne	.+4      	; 0xcc <ADC_read+0x3a>
  c8:	86 e6       	ldi	r24, 0x66	; 102
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <ADC_read+0x40>
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	11 f4       	brne	.+4      	; 0xd4 <ADC_read+0x42>
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	87 b9       	out	0x07, r24	; 7

  ADCSRA |= (1 << ADEN);
  d4:	37 9a       	sbi	0x06, 7	; 6
  ADCSRA |= (1 << ADSC);
  d6:	36 9a       	sbi	0x06, 6	; 6
  while((ADCSRA&0x10)==0);
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <ADC_read+0x46>
  ADCSRA |=0x10;  
  dc:	34 9a       	sbi	0x06, 4	; 6
  trash = ADCL;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	80 93 b9 00 	sts	0x00B9, r24
  result[sen] = ADCH;
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	e0 58       	subi	r30, 0x80	; 128
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	80 83       	st	Z, r24
}
  ee:	08 95       	ret

000000f0 <ADC_solve>:
void ADC_solve()
{ unsigned char abc;
  f0:	1f 93       	push	r17
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  unsigned char k=0;
  unsigned char m=0;
  for(abc=0;abc<=7;abc++)
  {
  if(result[abc]>=((adc_min[abc]+adc_max[abc])/2)){sens_temp[abc]=0;}
  else {sens_temp[abc]=1;}
  f6:	11 e0       	ldi	r17, 0x01	; 1
  unsigned char l=0;
  unsigned char k=0;
  unsigned char m=0;
  for(abc=0;abc<=7;abc++)
  {
  if(result[abc]>=((adc_min[abc]+adc_max[abc])/2)){sens_temp[abc]=0;}
  f8:	fb 01       	movw	r30, r22
  fa:	e0 58       	subi	r30, 0x80	; 128
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	20 81       	ld	r18, Z
 100:	fb 01       	movw	r30, r22
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	df 01       	movw	r26, r30
 108:	a0 5a       	subi	r26, 0xA0	; 160
 10a:	bf 4f       	sbci	r27, 0xFF	; 255
 10c:	4d 91       	ld	r20, X+
 10e:	5c 91       	ld	r21, X
 110:	e8 56       	subi	r30, 0x68	; 104
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	84 0f       	add	r24, r20
 11c:	95 1f       	adc	r25, r21
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	fb 01       	movw	r30, r22
 124:	e0 57       	subi	r30, 0x70	; 112
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	10 f0       	brcs	.+4      	; 0x132 <ADC_solve+0x42>
 12e:	10 82       	st	Z, r1
 130:	01 c0       	rjmp	.+2      	; 0x134 <ADC_solve+0x44>
  else {sens_temp[abc]=1;}
 132:	10 83       	st	Z, r17
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
{ unsigned char abc;
  unsigned char j=0;
  unsigned char l=0;
  unsigned char k=0;
  unsigned char m=0;
  for(abc=0;abc<=7;abc++)
 138:	68 30       	cpi	r22, 0x08	; 8
 13a:	71 05       	cpc	r23, r1
 13c:	e9 f6       	brne	.-70     	; 0xf8 <ADC_solve+0x8>
  {
  if(result[abc]>=((adc_min[abc]+adc_max[abc])/2)){sens_temp[abc]=0;}
  else {sens_temp[abc]=1;}
  }
  if(sens_temp[0]==1){j+=64;k+=1;}
 13e:	80 91 90 00 	lds	r24, 0x0090
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <ADC_solve+0x5c>
 146:	90 e4       	ldi	r25, 0x40	; 64
 148:	31 e0       	ldi	r19, 0x01	; 1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <ADC_solve+0x60>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
  if(sens_temp[1]==1){j+=128;k+=128;}
 150:	80 91 91 00 	lds	r24, 0x0091
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	11 f4       	brne	.+4      	; 0x15c <ADC_solve+0x6c>
 158:	90 58       	subi	r25, 0x80	; 128
 15a:	30 58       	subi	r19, 0x80	; 128
  if(sens_temp[2]==1){j+=16;k+=64;}
 15c:	80 91 92 00 	lds	r24, 0x0092
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	11 f4       	brne	.+4      	; 0x168 <ADC_solve+0x78>
 164:	90 5f       	subi	r25, 0xF0	; 240
 166:	30 5c       	subi	r19, 0xC0	; 192
  if(sens_temp[3]==1){j+=32;l+=1;}
 168:	80 91 93 00 	lds	r24, 0x0093
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	11 f0       	breq	.+4      	; 0x174 <ADC_solve+0x84>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <ADC_solve+0x88>
 174:	90 5e       	subi	r25, 0xE0	; 224
 176:	21 e0       	ldi	r18, 0x01	; 1
  if(sens_temp[4]==1){j+=4;l+=2;}
 178:	80 91 94 00 	lds	r24, 0x0094
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	11 f4       	brne	.+4      	; 0x184 <ADC_solve+0x94>
 180:	9c 5f       	subi	r25, 0xFC	; 252
 182:	2e 5f       	subi	r18, 0xFE	; 254
  if(sens_temp[5]==1){j+=8;l+=4;}
 184:	80 91 95 00 	lds	r24, 0x0095
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	11 f4       	brne	.+4      	; 0x190 <ADC_solve+0xa0>
 18c:	98 5f       	subi	r25, 0xF8	; 248
 18e:	2c 5f       	subi	r18, 0xFC	; 252
  if(sens_temp[6]==1){j+=1;l+=16;}
 190:	80 91 96 00 	lds	r24, 0x0096
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	11 f4       	brne	.+4      	; 0x19c <ADC_solve+0xac>
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	20 5f       	subi	r18, 0xF0	; 240
  if(sens_temp[7]==1){j+=2;k+=2;}
 19c:	80 91 97 00 	lds	r24, 0x0097
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <ADC_solve+0xb8>
 1a4:	9e 5f       	subi	r25, 0xFE	; 254
 1a6:	3e 5f       	subi	r19, 0xFE	; 254

  adc_result=j;
 1a8:	90 93 a8 00 	sts	0x00A8, r25
  adc_result_1=k;
 1ac:	30 93 a9 00 	sts	0x00A9, r19
  adc_result_2=l;
 1b0:	20 93 aa 00 	sts	0x00AA, r18
}
 1b4:	1f 91       	pop	r17
 1b6:	08 95       	ret

000001b8 <ADC_sensing>:
void ADC_sensing(unsigned char sensor_num)
{
 1b8:	af 92       	push	r10
 1ba:	bf 92       	push	r11
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	e8 2e       	mov	r14, r24
  unsigned char num;
  PORTD=0x00;
 1ce:	12 ba       	out	0x12, r1	; 18
  PORTC=0x00;
 1d0:	15 ba       	out	0x15, r1	; 21
  if(sensor_num==0){PORTC=0x01;}
 1d2:	88 23       	and	r24, r24
 1d4:	11 f4       	brne	.+4      	; 0x1da <ADC_sensing+0x22>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <ADC_sensing+0x68>
  if(sensor_num==1){PORTC=0x80;}
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	e8 16       	cp	r14, r24
 1de:	11 f4       	brne	.+4      	; 0x1e4 <ADC_sensing+0x2c>
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	1e c0       	rjmp	.+60     	; 0x220 <ADC_sensing+0x68>
  if(sensor_num==2){PORTC=0x40;}
 1e4:	e2 e0       	ldi	r30, 0x02	; 2
 1e6:	ee 16       	cp	r14, r30
 1e8:	11 f4       	brne	.+4      	; 0x1ee <ADC_sensing+0x36>
 1ea:	80 e4       	ldi	r24, 0x40	; 64
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <ADC_sensing+0x68>
  if(sensor_num==3){PORTD=0x01;}
 1ee:	f3 e0       	ldi	r31, 0x03	; 3
 1f0:	ef 16       	cp	r14, r31
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <ADC_sensing+0x40>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e c0       	rjmp	.+28     	; 0x214 <ADC_sensing+0x5c>
  if(sensor_num==4){PORTD=0x02;}
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	e8 16       	cp	r14, r24
 1fc:	11 f4       	brne	.+4      	; 0x202 <ADC_sensing+0x4a>
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	09 c0       	rjmp	.+18     	; 0x214 <ADC_sensing+0x5c>
  if(sensor_num==5){PORTD=0x04;}
 202:	e5 e0       	ldi	r30, 0x05	; 5
 204:	ee 16       	cp	r14, r30
 206:	11 f4       	brne	.+4      	; 0x20c <ADC_sensing+0x54>
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	04 c0       	rjmp	.+8      	; 0x214 <ADC_sensing+0x5c>
  if(sensor_num==6){PORTD=0x10;}
 20c:	f6 e0       	ldi	r31, 0x06	; 6
 20e:	ef 16       	cp	r14, r31
 210:	19 f4       	brne	.+6      	; 0x218 <ADC_sensing+0x60>
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	82 bb       	out	0x12, r24	; 18
 216:	05 c0       	rjmp	.+10     	; 0x222 <ADC_sensing+0x6a>
  if(sensor_num==7){PORTC=0x02;}
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	e8 16       	cp	r14, r24
 21c:	11 f4       	brne	.+4      	; 0x222 <ADC_sensing+0x6a>
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	85 bb       	out	0x15, r24	; 21
 222:	ff 24       	eor	r15, r15
  
  for(num=0;num<=9;num++)
  {
    ADC_read(sensor_num);
	result_sum[sensor_num]+=result[sensor_num];
 224:	0e 2d       	mov	r16, r14
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	68 01       	movw	r12, r16
 22a:	cc 0c       	add	r12, r12
 22c:	dd 1c       	adc	r13, r13
 22e:	e6 01       	movw	r28, r12
 230:	c0 59       	subi	r28, 0x90	; 144
 232:	df 4f       	sbci	r29, 0xFF	; 255
 234:	70 e8       	ldi	r23, 0x80	; 128
 236:	a7 2e       	mov	r10, r23
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	b7 2e       	mov	r11, r23
 23c:	a0 0e       	add	r10, r16
 23e:	b1 1e       	adc	r11, r17
  if(sensor_num==6){PORTD=0x10;}
  if(sensor_num==7){PORTC=0x02;}
  
  for(num=0;num<=9;num++)
  {
    ADC_read(sensor_num);
 240:	8e 2d       	mov	r24, r14
 242:	0e 94 49 00 	call	0x92	; 0x92 <ADC_read>
	result_sum[sensor_num]+=result[sensor_num];
 246:	88 81       	ld	r24, Y
 248:	99 81       	ldd	r25, Y+1	; 0x01
 24a:	f5 01       	movw	r30, r10
 24c:	20 81       	ld	r18, Z
 24e:	82 0f       	add	r24, r18
 250:	91 1d       	adc	r25, r1
 252:	99 83       	std	Y+1, r25	; 0x01
 254:	88 83       	st	Y, r24
  if(sensor_num==4){PORTD=0x02;}
  if(sensor_num==5){PORTD=0x04;}
  if(sensor_num==6){PORTD=0x10;}
  if(sensor_num==7){PORTC=0x02;}
  
  for(num=0;num<=9;num++)
 256:	f3 94       	inc	r15
 258:	fa e0       	ldi	r31, 0x0A	; 10
 25a:	ff 16       	cp	r15, r31
 25c:	89 f7       	brne	.-30     	; 0x240 <ADC_sensing+0x88>
  {
    ADC_read(sensor_num);
	result_sum[sensor_num]+=result[sensor_num];
  }
  adc_ave[sensor_num] = result_sum[sensor_num] / 10;
 25e:	88 81       	ld	r24, Y
 260:	99 81       	ldd	r25, Y+1	; 0x01
 262:	6a e0       	ldi	r22, 0x0A	; 10
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 b9 02 	call	0x572	; 0x572 <__udivmodhi4>
 26a:	f8 01       	movw	r30, r16
 26c:	e8 57       	subi	r30, 0x78	; 120
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	60 83       	st	Z, r22
  if(adc_ave[sensor_num]<adc_min[sensor_num]){adc_min[sensor_num]=adc_ave[sensor_num];}
 272:	80 81       	ld	r24, Z
 274:	d6 01       	movw	r26, r12
 276:	a0 5a       	subi	r26, 0xA0	; 160
 278:	bf 4f       	sbci	r27, 0xFF	; 255
 27a:	2d 91       	ld	r18, X+
 27c:	3c 91       	ld	r19, X
 27e:	11 97       	sbiw	r26, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	82 17       	cp	r24, r18
 284:	93 07       	cpc	r25, r19
 286:	58 f0       	brcs	.+22     	; 0x29e <ADC_sensing+0xe6>
  else if(adc_ave[sensor_num]>adc_max[sensor_num]){adc_max[sensor_num]=adc_ave[sensor_num];}
 288:	80 81       	ld	r24, Z
 28a:	d6 01       	movw	r26, r12
 28c:	a8 56       	subi	r26, 0x68	; 104
 28e:	bf 4f       	sbci	r27, 0xFF	; 255
 290:	2d 91       	ld	r18, X+
 292:	3c 91       	ld	r19, X
 294:	11 97       	sbiw	r26, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	28 17       	cp	r18, r24
 29a:	39 07       	cpc	r19, r25
 29c:	28 f4       	brcc	.+10     	; 0x2a8 <ADC_sensing+0xf0>
 29e:	80 81       	ld	r24, Z
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	9c 93       	st	X, r25
 2a6:	8e 93       	st	-X, r24
  result_sum[sensor_num] = 0;
 2a8:	00 0f       	add	r16, r16
 2aa:	11 1f       	adc	r17, r17
 2ac:	00 59       	subi	r16, 0x90	; 144
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	f8 01       	movw	r30, r16
 2b2:	11 82       	std	Z+1, r1	; 0x01
 2b4:	10 82       	st	Z, r1

}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret

000002cc <EEPROM_write>:
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
  while(EECR & (1<<EEWE));
 2cc:	e1 99       	sbic	0x1c, 1	; 28
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <EEPROM_write>

  EEAR = uiAddress;
 2d0:	9f bb       	out	0x1f, r25	; 31
 2d2:	8e bb       	out	0x1e, r24	; 30
  EEDR = ucData;
 2d4:	6d bb       	out	0x1d, r22	; 29

  EECR |= (1<<EEMWE);
 2d6:	e2 9a       	sbi	0x1c, 2	; 28
  EECR |= (1<<EEWE);
 2d8:	e1 9a       	sbi	0x1c, 1	; 28
}
 2da:	08 95       	ret

000002dc <main>:
void ADC_solve();
void ADC_sensing(unsigned char sensor_num);
void EEPROM_write(unsigned int uiAddress, unsigned char ucData);
unsigned char EEPROM_read(unsigned int uiAddress);
int main()
{
 2dc:	9f 92       	push	r9
 2de:	af 92       	push	r10
 2e0:	bf 92       	push	r11
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
DDRB=0xFF;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	87 bb       	out	0x17, r24	; 23
DDRC=0xC3;
 2f6:	83 ec       	ldi	r24, 0xC3	; 195
 2f8:	84 bb       	out	0x14, r24	; 20
DDRD=0x17;
 2fa:	87 e1       	ldi	r24, 0x17	; 23
 2fc:	81 bb       	out	0x11, r24	; 17
DDRA=0x00;
 2fe:	1a ba       	out	0x1a, r1	; 26

ADMUX = (0<<REFS1) | (0<<REFS0) |(0<ADLAR);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	87 b9       	out	0x07, r24	; 7
ADMUX |= 0x00;
 304:	87 b1       	in	r24, 0x07	; 7
 306:	87 b9       	out	0x07, r24	; 7

ADCSRA = 0xA7;
 308:	87 ea       	ldi	r24, 0xA7	; 167
 30a:	86 b9       	out	0x06, r24	; 6
ADCSRA |=0x40;
 30c:	36 9a       	sbi	0x06, 6	; 6

sei();
 30e:	78 94       	sei
for(i=0;i<=7;i++)
 310:	10 92 ab 00 	sts	0x00AB, r1
{
adc_min[i]=EEPROM_read(i+1);
if(adc_min[i]>0xFF){adc_min[i]=220;}
 314:	2c ed       	ldi	r18, 0xDC	; 220
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	59 c0       	rjmp	.+178    	; 0x3cc <main+0xf0>
ADCSRA |=0x40;

sei();
for(i=0;i<=7;i++)
{
adc_min[i]=EEPROM_read(i+1);
 31a:	e0 91 ab 00 	lds	r30, 0x00AB
 31e:	80 91 ab 00 	lds	r24, 0x00AB
  EECR |= (1<<EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
  while(EECR & (1<<EEWE));
 322:	e1 99       	sbic	0x1c, 1	; 28
 324:	fe cf       	rjmp	.-4      	; 0x322 <main+0x46>
ADCSRA |=0x40;

sei();
for(i=0;i<=7;i++)
{
adc_min[i]=EEPROM_read(i+1);
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 96       	adiw	r24, 0x01	; 1

unsigned char EEPROM_read(unsigned int uiAddress)
{
  while(EECR & (1<<EEWE));

  EEAR = uiAddress;
 32a:	9f bb       	out	0x1f, r25	; 31
 32c:	8e bb       	out	0x1e, r24	; 30

  EECR |= (1<<EERE);
 32e:	e0 9a       	sbi	0x1c, 0	; 28
 
  return EEDR;
 330:	8d b3       	in	r24, 0x1d	; 29
ADCSRA |=0x40;

sei();
for(i=0;i<=7;i++)
{
adc_min[i]=EEPROM_read(i+1);
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	e0 5a       	subi	r30, 0xA0	; 160
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	80 83       	st	Z, r24
if(adc_min[i]>0xFF){adc_min[i]=220;}
 342:	e0 91 ab 00 	lds	r30, 0x00AB
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e0 5a       	subi	r30, 0xA0	; 160
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
 354:	8f 3f       	cpi	r24, 0xFF	; 255
 356:	91 05       	cpc	r25, r1
 358:	51 f0       	breq	.+20     	; 0x36e <main+0x92>
 35a:	48 f0       	brcs	.+18     	; 0x36e <main+0x92>
 35c:	e0 91 ab 00 	lds	r30, 0x00AB
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e0 5a       	subi	r30, 0xA0	; 160
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	31 83       	std	Z+1, r19	; 0x01
 36c:	20 83       	st	Z, r18
adc_max[i]=EEPROM_read(i+9);
 36e:	e0 91 ab 00 	lds	r30, 0x00AB
 372:	80 91 ab 00 	lds	r24, 0x00AB
  EECR |= (1<<EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
  while(EECR & (1<<EEWE));
 376:	e1 99       	sbic	0x1c, 1	; 28
 378:	fe cf       	rjmp	.-4      	; 0x376 <main+0x9a>
sei();
for(i=0;i<=7;i++)
{
adc_min[i]=EEPROM_read(i+1);
if(adc_min[i]>0xFF){adc_min[i]=220;}
adc_max[i]=EEPROM_read(i+9);
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	09 96       	adiw	r24, 0x09	; 9

unsigned char EEPROM_read(unsigned int uiAddress)
{
  while(EECR & (1<<EEWE));

  EEAR = uiAddress;
 37e:	9f bb       	out	0x1f, r25	; 31
 380:	8e bb       	out	0x1e, r24	; 30

  EECR |= (1<<EERE);
 382:	e0 9a       	sbi	0x1c, 0	; 28
 
  return EEDR;
 384:	8d b3       	in	r24, 0x1d	; 29
sei();
for(i=0;i<=7;i++)
{
adc_min[i]=EEPROM_read(i+1);
if(adc_min[i]>0xFF){adc_min[i]=220;}
adc_max[i]=EEPROM_read(i+9);
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	e8 56       	subi	r30, 0x68	; 104
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	91 83       	std	Z+1, r25	; 0x01
 394:	80 83       	st	Z, r24
if(adc_max[i]>0xFF){adc_max[i]=220;}
 396:	e0 91 ab 00 	lds	r30, 0x00AB
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	e8 56       	subi	r30, 0x68	; 104
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	80 81       	ld	r24, Z
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	8f 3f       	cpi	r24, 0xFF	; 255
 3aa:	91 05       	cpc	r25, r1
 3ac:	51 f0       	breq	.+20     	; 0x3c2 <main+0xe6>
 3ae:	48 f0       	brcs	.+18     	; 0x3c2 <main+0xe6>
 3b0:	e0 91 ab 00 	lds	r30, 0x00AB
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	e8 56       	subi	r30, 0x68	; 104
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	31 83       	std	Z+1, r19	; 0x01
 3c0:	20 83       	st	Z, r18

ADCSRA = 0xA7;
ADCSRA |=0x40;

sei();
for(i=0;i<=7;i++)
 3c2:	80 91 ab 00 	lds	r24, 0x00AB
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 ab 00 	sts	0x00AB, r24
 3cc:	80 91 ab 00 	lds	r24, 0x00AB
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <main+0xfa>
 3d4:	a2 cf       	rjmp	.-188    	; 0x31a <main+0x3e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3d6:	94 ec       	ldi	r25, 0xC4	; 196
 3d8:	c9 2e       	mov	r12, r25
 3da:	99 e0       	ldi	r25, 0x09	; 9
 3dc:	d9 2e       	mov	r13, r25
    ADC_solve();
    PORTB=adc_result;
    PORTC=adc_result_1;
    PORTD=adc_result_2;
    _delay_ms(10);
    if(!(PIND&0x08)) {PORTC=0xC3;PORTD=0x17;break;}
 3de:	83 ec       	ldi	r24, 0xC3	; 195
 3e0:	a8 2e       	mov	r10, r24
 3e2:	07 e1       	ldi	r16, 0x17	; 23
 3e4:	b0 2e       	mov	r11, r16
  }
  PORTC=0x00;
  PORTD=0x00;
 3e6:	18 ea       	ldi	r17, 0xA8	; 168
 3e8:	e1 2e       	mov	r14, r17
 3ea:	11 e6       	ldi	r17, 0x61	; 97
 3ec:	f1 2e       	mov	r15, r17
 3ee:	09 e1       	ldi	r16, 0x19	; 25
 3f0:	10 e0       	ldi	r17, 0x00	; 0
  _delay_ms(2500);
  adc_min[0]=250;
 3f2:	ca ef       	ldi	r28, 0xFA	; 250
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
    if(!(PIND&0x08)) {break;}
  }
  PORTC=0xC3;PORTD=0x17;
    PORTC=0x00;
  PORTD=0x00;
  for(i=1;i<=8;i++)
 3f6:	99 24       	eor	r9, r9
 3f8:	93 94       	inc	r9
}
while(1)
{
  while(1)
  {
    for(i=0;i<=7;i++)
 3fa:	10 92 ab 00 	sts	0x00AB, r1
 3fe:	09 c0       	rjmp	.+18     	; 0x412 <main+0x136>
    {
    ADC_read(i);
 400:	80 91 ab 00 	lds	r24, 0x00AB
 404:	0e 94 49 00 	call	0x92	; 0x92 <ADC_read>
}
while(1)
{
  while(1)
  {
    for(i=0;i<=7;i++)
 408:	80 91 ab 00 	lds	r24, 0x00AB
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	80 93 ab 00 	sts	0x00AB, r24
 412:	80 91 ab 00 	lds	r24, 0x00AB
 416:	88 30       	cpi	r24, 0x08	; 8
 418:	98 f3       	brcs	.-26     	; 0x400 <main+0x124>
    {
    ADC_read(i);
    }
    ADC_solve();
 41a:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_solve>
    PORTB=adc_result;
 41e:	80 91 a8 00 	lds	r24, 0x00A8
 422:	88 bb       	out	0x18, r24	; 24
    PORTC=adc_result_1;
 424:	80 91 a9 00 	lds	r24, 0x00A9
 428:	85 bb       	out	0x15, r24	; 21
    PORTD=adc_result_2;
 42a:	80 91 aa 00 	lds	r24, 0x00AA
 42e:	82 bb       	out	0x12, r24	; 18
 430:	c6 01       	movw	r24, r12
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <main+0x156>
    _delay_ms(10);
    if(!(PIND&0x08)) {PORTC=0xC3;PORTD=0x17;break;}
 436:	83 99       	sbic	0x10, 3	; 16
 438:	e0 cf       	rjmp	.-64     	; 0x3fa <main+0x11e>
 43a:	a5 ba       	out	0x15, r10	; 21
 43c:	b2 ba       	out	0x12, r11	; 18
  }
  PORTC=0x00;
 43e:	15 ba       	out	0x15, r1	; 21
  PORTD=0x00;
 440:	12 ba       	out	0x12, r1	; 18
 442:	88 ea       	ldi	r24, 0xA8	; 168
 444:	91 e6       	ldi	r25, 0x61	; 97
 446:	f8 01       	movw	r30, r16
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <main+0x16c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 44c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44e:	d9 f7       	brne	.-10     	; 0x446 <main+0x16a>
  _delay_ms(2500);
  adc_min[0]=250;
 450:	d0 93 61 00 	sts	0x0061, r29
 454:	c0 93 60 00 	sts	0x0060, r28
  adc_min[1]=250;
 458:	d0 93 63 00 	sts	0x0063, r29
 45c:	c0 93 62 00 	sts	0x0062, r28
  adc_min[2]=250;
 460:	d0 93 65 00 	sts	0x0065, r29
 464:	c0 93 64 00 	sts	0x0064, r28
  adc_min[3]=250;
 468:	d0 93 67 00 	sts	0x0067, r29
 46c:	c0 93 66 00 	sts	0x0066, r28
  adc_min[4]=250;
 470:	d0 93 69 00 	sts	0x0069, r29
 474:	c0 93 68 00 	sts	0x0068, r28
  adc_min[5]=250;
 478:	d0 93 6b 00 	sts	0x006B, r29
 47c:	c0 93 6a 00 	sts	0x006A, r28
  adc_min[6]=250;
 480:	d0 93 6d 00 	sts	0x006D, r29
 484:	c0 93 6c 00 	sts	0x006C, r28
  adc_min[7]=250;
 488:	d0 93 6f 00 	sts	0x006F, r29
 48c:	c0 93 6e 00 	sts	0x006E, r28
  adc_max[0]=0;
 490:	10 92 99 00 	sts	0x0099, r1
 494:	10 92 98 00 	sts	0x0098, r1
  adc_max[1]=0;
 498:	10 92 9b 00 	sts	0x009B, r1
 49c:	10 92 9a 00 	sts	0x009A, r1
  adc_max[2]=0;
 4a0:	10 92 9d 00 	sts	0x009D, r1
 4a4:	10 92 9c 00 	sts	0x009C, r1
  adc_max[3]=0;
 4a8:	10 92 9f 00 	sts	0x009F, r1
 4ac:	10 92 9e 00 	sts	0x009E, r1
  adc_max[4]=0;
 4b0:	10 92 a1 00 	sts	0x00A1, r1
 4b4:	10 92 a0 00 	sts	0x00A0, r1
  adc_max[5]=0;
 4b8:	10 92 a3 00 	sts	0x00A3, r1
 4bc:	10 92 a2 00 	sts	0x00A2, r1
  adc_max[6]=0;
 4c0:	10 92 a5 00 	sts	0x00A5, r1
 4c4:	10 92 a4 00 	sts	0x00A4, r1
  adc_max[7]=0;
 4c8:	10 92 a7 00 	sts	0x00A7, r1
 4cc:	10 92 a6 00 	sts	0x00A6, r1
  while(1)
  {
    for(i=0;i<=7;i++)
 4d0:	10 92 ab 00 	sts	0x00AB, r1
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <__stack+0x8f>
	{
      ADC_sensing(i);
 4d6:	80 91 ab 00 	lds	r24, 0x00AB
 4da:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ADC_sensing>
 4de:	c7 01       	movw	r24, r14
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__stack+0x81>
  adc_max[5]=0;
  adc_max[6]=0;
  adc_max[7]=0;
  while(1)
  {
    for(i=0;i<=7;i++)
 4e4:	80 91 ab 00 	lds	r24, 0x00AB
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 ab 00 	sts	0x00AB, r24
 4ee:	80 91 ab 00 	lds	r24, 0x00AB
 4f2:	88 30       	cpi	r24, 0x08	; 8
 4f4:	80 f3       	brcs	.-32     	; 0x4d6 <__stack+0x77>
	{
      ADC_sensing(i);
	  _delay_ms(100);
	}
    if(!(PIND&0x08)) {break;}
 4f6:	83 99       	sbic	0x10, 3	; 16
 4f8:	eb cf       	rjmp	.-42     	; 0x4d0 <__stack+0x71>
  }
  PORTC=0xC3;PORTD=0x17;
 4fa:	a5 ba       	out	0x15, r10	; 21
 4fc:	b2 ba       	out	0x12, r11	; 18
    PORTC=0x00;
 4fe:	15 ba       	out	0x15, r1	; 21
  PORTD=0x00;
 500:	12 ba       	out	0x12, r1	; 18
  for(i=1;i<=8;i++)
 502:	90 92 ab 00 	sts	0x00AB, r9
 506:	22 c0       	rjmp	.+68     	; 0x54c <__stack+0xed>
  {
    EEPROM_write(i,adc_min[i-1]);
 508:	80 91 ab 00 	lds	r24, 0x00AB
 50c:	e0 91 ab 00 	lds	r30, 0x00AB
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	e2 5a       	subi	r30, 0xA2	; 162
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	60 81       	ld	r22, Z
 51c:	71 81       	ldd	r23, Z+1	; 0x01
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 66 01 	call	0x2cc	; 0x2cc <EEPROM_write>
	EEPROM_write(i+8,adc_max[i-1]);
 524:	80 91 ab 00 	lds	r24, 0x00AB
 528:	e0 91 ab 00 	lds	r30, 0x00AB
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ea 56       	subi	r30, 0x6A	; 106
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	60 81       	ld	r22, Z
 538:	71 81       	ldd	r23, Z+1	; 0x01
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	08 96       	adiw	r24, 0x08	; 8
 53e:	0e 94 66 01 	call	0x2cc	; 0x2cc <EEPROM_write>
    if(!(PIND&0x08)) {break;}
  }
  PORTC=0xC3;PORTD=0x17;
    PORTC=0x00;
  PORTD=0x00;
  for(i=1;i<=8;i++)
 542:	80 91 ab 00 	lds	r24, 0x00AB
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 ab 00 	sts	0x00AB, r24
 54c:	80 91 ab 00 	lds	r24, 0x00AB
 550:	89 30       	cpi	r24, 0x09	; 9
 552:	d0 f2       	brcs	.-76     	; 0x508 <__stack+0xa9>
 554:	88 ea       	ldi	r24, 0xA8	; 168
 556:	91 e6       	ldi	r25, 0x61	; 97
 558:	f8 01       	movw	r30, r16
 55a:	31 97       	sbiw	r30, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <__stack+0xfb>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 55e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 560:	d9 f7       	brne	.-10     	; 0x558 <__stack+0xf9>
 562:	4b cf       	rjmp	.-362    	; 0x3fa <main+0x11e>

00000564 <EEPROM_read>:
  EECR |= (1<<EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
  while(EECR & (1<<EEWE));
 564:	e1 99       	sbic	0x1c, 1	; 28
 566:	fe cf       	rjmp	.-4      	; 0x564 <EEPROM_read>

  EEAR = uiAddress;
 568:	9f bb       	out	0x1f, r25	; 31
 56a:	8e bb       	out	0x1e, r24	; 30

  EECR |= (1<<EERE);
 56c:	e0 9a       	sbi	0x1c, 0	; 28
 
  return EEDR;
 56e:	8d b3       	in	r24, 0x1d	; 29
}
 570:	08 95       	ret

00000572 <__udivmodhi4>:
 572:	aa 1b       	sub	r26, r26
 574:	bb 1b       	sub	r27, r27
 576:	51 e1       	ldi	r21, 0x11	; 17
 578:	07 c0       	rjmp	.+14     	; 0x588 <__udivmodhi4_ep>

0000057a <__udivmodhi4_loop>:
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	a6 17       	cp	r26, r22
 580:	b7 07       	cpc	r27, r23
 582:	10 f0       	brcs	.+4      	; 0x588 <__udivmodhi4_ep>
 584:	a6 1b       	sub	r26, r22
 586:	b7 0b       	sbc	r27, r23

00000588 <__udivmodhi4_ep>:
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	5a 95       	dec	r21
 58e:	a9 f7       	brne	.-22     	; 0x57a <__udivmodhi4_loop>
 590:	80 95       	com	r24
 592:	90 95       	com	r25
 594:	bc 01       	movw	r22, r24
 596:	cd 01       	movw	r24, r26
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
