
8ch_LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000040e0  00004174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800208  00800208  0000427c  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000427c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005f7  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c2a  00000000  00000000  00004a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001461  00000000  00000000  0000963d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040ab  00000000  00000000  0000aa9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  0000eb4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000761  00000000  00000000  0000f01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ce8  00000000  00000000  0000f77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00011465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_10>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	f0 e4       	ldi	r31, 0x40	; 64
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 38       	cpi	r26, 0x8E	; 142
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 94 17 	call	0x2f28	; 0x2f28 <main>
      c6:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_10>:
volatile unsigned int sec = 0;
volatile unsigned int count = 0;
volatile unsigned int randombox = 0;

ISR(TIMER2_OVF_vect)//1ms//
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	11 24       	eor	r1, r1
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
TCNT2=0x05;
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	84 bd       	out	0x24, r24	; 36
sec++;
      e4:	80 91 16 02 	lds	r24, 0x0216
      e8:	90 91 17 02 	lds	r25, 0x0217
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	90 93 17 02 	sts	0x0217, r25
      f2:	80 93 16 02 	sts	0x0216, r24

if(buzz_time>0)
      f6:	80 91 14 02 	lds	r24, 0x0214
      fa:	90 91 15 02 	lds	r25, 0x0215
      fe:	89 2b       	or	r24, r25
     100:	e9 f1       	breq	.+122    	; 0x17c <__vector_10+0xae>
{
  if(buzzer_on_count<buzzer_on_time){PORTD|=(1<<PD0);buzzer_on_count++;}
     102:	20 91 0c 02 	lds	r18, 0x020C
     106:	30 91 0d 02 	lds	r19, 0x020D
     10a:	80 91 0a 02 	lds	r24, 0x020A
     10e:	90 91 0b 02 	lds	r25, 0x020B
     112:	28 17       	cp	r18, r24
     114:	39 07       	cpc	r19, r25
     116:	58 f4       	brcc	.+22     	; 0x12e <__vector_10+0x60>
     118:	90 9a       	sbi	0x12, 0	; 18
     11a:	80 91 0c 02 	lds	r24, 0x020C
     11e:	90 91 0d 02 	lds	r25, 0x020D
     122:	01 96       	adiw	r24, 0x01	; 1
     124:	90 93 0d 02 	sts	0x020D, r25
     128:	80 93 0c 02 	sts	0x020C, r24
     12c:	27 c0       	rjmp	.+78     	; 0x17c <__vector_10+0xae>
  else 
  {
    PORTD&=~(1<<PD0);
     12e:	90 98       	cbi	0x12, 0	; 18
	if(buzzer_off_count<buzzer_off_time){buzzer_off_count++;}
     130:	20 91 10 02 	lds	r18, 0x0210
     134:	30 91 11 02 	lds	r19, 0x0211
     138:	80 91 0e 02 	lds	r24, 0x020E
     13c:	90 91 0f 02 	lds	r25, 0x020F
     140:	28 17       	cp	r18, r24
     142:	39 07       	cpc	r19, r25
     144:	50 f4       	brcc	.+20     	; 0x15a <__vector_10+0x8c>
     146:	80 91 10 02 	lds	r24, 0x0210
     14a:	90 91 11 02 	lds	r25, 0x0211
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	90 93 11 02 	sts	0x0211, r25
     154:	80 93 10 02 	sts	0x0210, r24
     158:	11 c0       	rjmp	.+34     	; 0x17c <__vector_10+0xae>
	else{buzzer_on_count=0;buzzer_off_count=0;buzz_time--;}
     15a:	10 92 0d 02 	sts	0x020D, r1
     15e:	10 92 0c 02 	sts	0x020C, r1
     162:	10 92 11 02 	sts	0x0211, r1
     166:	10 92 10 02 	sts	0x0210, r1
     16a:	80 91 14 02 	lds	r24, 0x0214
     16e:	90 91 15 02 	lds	r25, 0x0215
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	90 93 15 02 	sts	0x0215, r25
     178:	80 93 14 02 	sts	0x0214, r24
  }
}

}
     17c:	9f 91       	pop	r25
     17e:	8f 91       	pop	r24
     180:	3f 91       	pop	r19
     182:	2f 91       	pop	r18
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <end>:
delay(80);
buzzer(40,40,1);
}
void end()
{
PORTA=0x00;
     18e:	1b ba       	out	0x1b, r1	; 27
PORTB=0x00;
     190:	18 ba       	out	0x18, r1	; 24
PORTC=0x00;
     192:	15 ba       	out	0x15, r1	; 21
PORTE=0x00;
     194:	13 b8       	out	0x03, r1	; 3
TCCR0=0x00;
     196:	13 be       	out	0x33, r1	; 51
TCCR1B=0x00;
     198:	1e bc       	out	0x2e, r1	; 46
TCCR2=0x00;
     19a:	15 bc       	out	0x25, r1	; 37
TIMSK = 0x00;
     19c:	17 be       	out	0x37, r1	; 55
cli();
     19e:	f8 94       	cli
}
     1a0:	08 95       	ret

000001a2 <delay>:
void delay(unsigned int sec_data)
{
     1a2:	9c 01       	movw	r18, r24
sec=0;
     1a4:	10 92 17 02 	sts	0x0217, r1
     1a8:	10 92 16 02 	sts	0x0216, r1
char while_end=0;
 while(1)
 {
  if(while_end==1) {break;}
  if(sec<sec_data) {while_end=0;}
     1ac:	80 91 16 02 	lds	r24, 0x0216
     1b0:	90 91 17 02 	lds	r25, 0x0217
     1b4:	82 17       	cp	r24, r18
     1b6:	93 07       	cpc	r25, r19
     1b8:	c8 f3       	brcs	.-14     	; 0x1ac <delay+0xa>
  else if(sec>sec_data){while_end=1;}
     1ba:	80 91 16 02 	lds	r24, 0x0216
     1be:	90 91 17 02 	lds	r25, 0x0217
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	90 f7       	brcc	.-28     	; 0x1ac <delay+0xa>
 }
}
     1c8:	08 95       	ret

000001ca <start>:
void led_on();
void led_off();
void led(unsigned int on_time, unsigned int off_time, unsigned char led_count);

void start()
{
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
DDRA=0xFF; //DC모터제어//
     1d2:	9f ef       	ldi	r25, 0xFF	; 255
     1d4:	9a bb       	out	0x1a, r25	; 26
DDRC=0xFF; //서보모터제어//
     1d6:	94 bb       	out	0x14, r25	; 20
DDRE=0xFF; //"I/O핀"제어//
     1d8:	92 b9       	out	0x02, r25	; 2
DDRF=0x00; //센서제어//
     1da:	10 92 61 00 	sts	0x0061, r1
DDRD=0x01; //기타잡것들//
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	81 bb       	out	0x11, r24	; 17
PORTA=0x00;
     1e2:	1b ba       	out	0x1b, r1	; 27
PORTD=0x00;
     1e4:	12 ba       	out	0x12, r1	; 18
PORTC=0x00;
     1e6:	15 ba       	out	0x15, r1	; 21
PORTE=0x00;
     1e8:	13 b8       	out	0x03, r1	; 3

TCCR0 = (1<<CS00);
     1ea:	83 bf       	out	0x33, r24	; 51
TCCR1B = (1<<CS11) | (1<<CS10);
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	8e bd       	out	0x2e, r24	; 46
TCCR2 = (1<<CS20) | (1<<CS21);
     1f0:	85 bd       	out	0x25, r24	; 37

TCNT0 = 0x5F;
     1f2:	8f e5       	ldi	r24, 0x5F	; 95
     1f4:	82 bf       	out	0x32, r24	; 50
TCNT1H = 0xFF;
     1f6:	9d bd       	out	0x2d, r25	; 45
TCNT1L = 0x05;
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8c bd       	out	0x2c, r24	; 44
TCNT2 = 0x05;
     1fc:	84 bd       	out	0x24, r24	; 36
TIMSK = (1<<TOIE2) | (1<<TOIE1) | (1<<TOIE0);
     1fe:	85 e4       	ldi	r24, 0x45	; 69
     200:	87 bf       	out	0x37, r24	; 55



sei();
     202:	78 94       	sei

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	e8 2e       	mov	r14, r24
     208:	f1 2c       	mov	r15, r1
     20a:	f0 92 15 02 	sts	0x0215, r15
     20e:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
     212:	08 e2       	ldi	r16, 0x28	; 40
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	10 93 0b 02 	sts	0x020B, r17
     21a:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
     21e:	80 91 10 02 	lds	r24, 0x0210
     222:	90 91 11 02 	lds	r25, 0x0211
     226:	90 93 0f 02 	sts	0x020F, r25
     22a:	80 93 0e 02 	sts	0x020E, r24



sei();
buzzer(40,40,1);
delay(80);
     22e:	80 e5       	ldi	r24, 0x50	; 80
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
     236:	f0 92 15 02 	sts	0x0215, r15
     23a:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
     23e:	10 93 0b 02 	sts	0x020B, r17
     242:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
     246:	80 91 10 02 	lds	r24, 0x0210
     24a:	90 91 11 02 	lds	r25, 0x0211
     24e:	90 93 0f 02 	sts	0x020F, r25
     252:	80 93 0e 02 	sts	0x020E, r24

sei();
buzzer(40,40,1);
delay(80);
buzzer(40,40,1);
}
     256:	1f 91       	pop	r17
     258:	0f 91       	pop	r16
     25a:	ff 90       	pop	r15
     25c:	ef 90       	pop	r14
     25e:	08 95       	ret

00000260 <IO_set>:
  else if(sec>sec_data){while_end=1;}
 }
}
void IO_set(unsigned int IO_data)
{
  switch (IO_data)
     260:	88 30       	cpi	r24, 0x08	; 8
     262:	91 05       	cpc	r25, r1
     264:	b9 f1       	breq	.+110    	; 0x2d4 <IO_set+0x74>
     266:	89 30       	cpi	r24, 0x09	; 9
     268:	91 05       	cpc	r25, r1
     26a:	a8 f4       	brcc	.+42     	; 0x296 <IO_set+0x36>
     26c:	84 30       	cpi	r24, 0x04	; 4
     26e:	91 05       	cpc	r25, r1
     270:	69 f1       	breq	.+90     	; 0x2cc <IO_set+0x6c>
     272:	85 30       	cpi	r24, 0x05	; 5
     274:	91 05       	cpc	r25, r1
     276:	48 f4       	brcc	.+18     	; 0x28a <IO_set+0x2a>
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	91 05       	cpc	r25, r1
     27c:	29 f1       	breq	.+74     	; 0x2c8 <IO_set+0x68>
     27e:	83 30       	cpi	r24, 0x03	; 3
     280:	91 05       	cpc	r25, r1
     282:	18 f5       	brcc	.+70     	; 0x2ca <IO_set+0x6a>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	79 f5       	brne	.+94     	; 0x2e6 <IO_set+0x86>
     288:	1e c0       	rjmp	.+60     	; 0x2c6 <IO_set+0x66>
     28a:	86 30       	cpi	r24, 0x06	; 6
     28c:	91 05       	cpc	r25, r1
     28e:	01 f1       	breq	.+64     	; 0x2d0 <IO_set+0x70>
     290:	07 97       	sbiw	r24, 0x07	; 7
     292:	f8 f4       	brcc	.+62     	; 0x2d2 <IO_set+0x72>
     294:	1c c0       	rjmp	.+56     	; 0x2ce <IO_set+0x6e>
     296:	8c 30       	cpi	r24, 0x0C	; 12
     298:	91 05       	cpc	r25, r1
     29a:	01 f1       	breq	.+64     	; 0x2dc <IO_set+0x7c>
     29c:	8d 30       	cpi	r24, 0x0D	; 13
     29e:	91 05       	cpc	r25, r1
     2a0:	30 f4       	brcc	.+12     	; 0x2ae <IO_set+0x4e>
     2a2:	8a 30       	cpi	r24, 0x0A	; 10
     2a4:	91 05       	cpc	r25, r1
     2a6:	c1 f0       	breq	.+48     	; 0x2d8 <IO_set+0x78>
     2a8:	0b 97       	sbiw	r24, 0x0b	; 11
     2aa:	b8 f4       	brcc	.+46     	; 0x2da <IO_set+0x7a>
     2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <IO_set+0x76>
     2ae:	8e 30       	cpi	r24, 0x0E	; 14
     2b0:	91 05       	cpc	r25, r1
     2b2:	b1 f0       	breq	.+44     	; 0x2e0 <IO_set+0x80>
     2b4:	8e 30       	cpi	r24, 0x0E	; 14
     2b6:	91 05       	cpc	r25, r1
     2b8:	90 f0       	brcs	.+36     	; 0x2de <IO_set+0x7e>
     2ba:	8f 30       	cpi	r24, 0x0F	; 15
     2bc:	91 05       	cpc	r25, r1
     2be:	89 f0       	breq	.+34     	; 0x2e2 <IO_set+0x82>
     2c0:	40 97       	sbiw	r24, 0x10	; 16
     2c2:	89 f4       	brne	.+34     	; 0x2e6 <IO_set+0x86>
     2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <IO_set+0x84>
  {
    case 1 : DDRE&=~0x01;
     2c6:	10 98       	cbi	0x02, 0	; 2
	case 2 : DDRE&=~0x02;
     2c8:	11 98       	cbi	0x02, 1	; 2
	case 3 : DDRE&=~0x04;
     2ca:	12 98       	cbi	0x02, 2	; 2
    case 4 : DDRE&=~0x08;
     2cc:	13 98       	cbi	0x02, 3	; 2
	case 5 : DDRE&=~0x10;
     2ce:	14 98       	cbi	0x02, 4	; 2
	case 6 : DDRE&=~0x20;
     2d0:	15 98       	cbi	0x02, 5	; 2
	case 7 : DDRE&=~0x40;
     2d2:	16 98       	cbi	0x02, 6	; 2
	case 8 : DDRE&=~0x80;
     2d4:	17 98       	cbi	0x02, 7	; 2
	case 9 : DDRE|=0x01;
     2d6:	10 9a       	sbi	0x02, 0	; 2
	case 10 : DDRE|=0x02;
     2d8:	11 9a       	sbi	0x02, 1	; 2
	case 11 : DDRE|=0x04;
     2da:	12 9a       	sbi	0x02, 2	; 2
    case 12 : DDRE|=0x08;
     2dc:	13 9a       	sbi	0x02, 3	; 2
	case 13 : DDRE|=0x10;
     2de:	14 9a       	sbi	0x02, 4	; 2
	case 14 : DDRE|=0x20;
     2e0:	15 9a       	sbi	0x02, 5	; 2
	case 15 : DDRE|=0x40;
     2e2:	16 9a       	sbi	0x02, 6	; 2
	case 16 : DDRE|=0x80;
     2e4:	17 9a       	sbi	0x02, 7	; 2
     2e6:	08 95       	ret

000002e8 <wait>:
  }
}

void wait()
{ 
  delay(10);
     2e8:	8a e0       	ldi	r24, 0x0A	; 10
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
  while(1)
  {
    if(!(PIND&0x02)){buzzer(50,1,1);break;}
     2f0:	81 99       	sbic	0x10, 1	; 16
     2f2:	15 c0       	rjmp	.+42     	; 0x31e <wait+0x36>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 15 02 	sts	0x0215, r25
     2fc:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
     300:	82 e3       	ldi	r24, 0x32	; 50
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 0b 02 	sts	0x020B, r25
     308:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
     30c:	80 91 10 02 	lds	r24, 0x0210
     310:	90 91 11 02 	lds	r25, 0x0211
     314:	90 93 0f 02 	sts	0x020F, r25
     318:	80 93 0e 02 	sts	0x020E, r24
     31c:	0c c0       	rjmp	.+24     	; 0x336 <wait+0x4e>
{ 
  delay(10);
  while(1)
  {
    if(!(PIND&0x02)){buzzer(50,1,1);break;}
	randombox++;
     31e:	80 91 1a 02 	lds	r24, 0x021A
     322:	90 91 1b 02 	lds	r25, 0x021B
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	90 93 1b 02 	sts	0x021B, r25
     32c:	80 93 1a 02 	sts	0x021A, r24
	delay(1);
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	db cf       	rjmp	.-74     	; 0x2ec <wait+0x4>
  }
  while(1)
  {
    if(PIND&0x02){break;}
     336:	81 9b       	sbis	0x10, 1	; 16
     338:	fe cf       	rjmp	.-4      	; 0x336 <wait+0x4e>
  }
  delay(50);
     33a:	82 e3       	ldi	r24, 0x32	; 50
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
}
     342:	08 95       	ret

00000344 <init_sensor>:

void init_sensor(unsigned char sens)
{
  if(sens==1){PORTD|=(1<<PD3);}
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	11 f4       	brne	.+4      	; 0x34c <init_sensor+0x8>
     348:	93 9a       	sbi	0x12, 3	; 18
     34a:	08 95       	ret
  else {PORTD&=~(1<<PD3);}
     34c:	93 98       	cbi	0x12, 3	; 18
     34e:	08 95       	ret

00000350 <buzzer_on>:
}

void buzzer_on(){PORTD|=(1<<PD0);}
     350:	90 9a       	sbi	0x12, 0	; 18
     352:	08 95       	ret

00000354 <buzzer_off>:

void buzzer_off(){PORTD&=~(1<<PD0);}
     354:	90 98       	cbi	0x12, 0	; 18
     356:	08 95       	ret

00000358 <buzzer>:

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	50 93 15 02 	sts	0x0215, r21
     35e:	40 93 14 02 	sts	0x0214, r20
buzzer_on_time=on_time;
     362:	90 93 0b 02 	sts	0x020B, r25
     366:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
     36a:	80 91 10 02 	lds	r24, 0x0210
     36e:	90 91 11 02 	lds	r25, 0x0211
     372:	90 93 0f 02 	sts	0x020F, r25
     376:	80 93 0e 02 	sts	0x020E, r24
}
     37a:	08 95       	ret

0000037c <init_buzzer>:

void init_buzzer(unsigned char buzz)
{
  init_buzzer_data=buzz;
     37c:	80 93 08 02 	sts	0x0208, r24
}
     380:	08 95       	ret

00000382 <led_on>:

void led_on(){PORTD|=(1<<PD2);}
     382:	92 9a       	sbi	0x12, 2	; 18
     384:	08 95       	ret

00000386 <led_off>:

void led_off(){PORTD&=~(1<<PD2);}
     386:	92 98       	cbi	0x12, 2	; 18
     388:	08 95       	ret

0000038a <led>:

void led(unsigned int on_time, unsigned int off_time, unsigned char led_count)
{
     38a:	2f 92       	push	r2
     38c:	3f 92       	push	r3
     38e:	4f 92       	push	r4
     390:	5f 92       	push	r5
     392:	6f 92       	push	r6
     394:	7f 92       	push	r7
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	28 97       	sbiw	r28, 0x08	; 8
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	8b 01       	movw	r16, r22
     3c0:	4a 83       	std	Y+2, r20	; 0x02
unsigned char led_current;
  for(led_current=0;led_current<=led_count;led_current++)
  {
	PORTD|=(1<<PD2);
	_delay_ms(on_time);
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__floatunsisf>
     3ce:	1b 01       	movw	r2, r22
     3d0:	2c 01       	movw	r4, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	4a e7       	ldi	r20, 0x7A	; 122
     3d8:	53 e4       	ldi	r21, 0x43	; 67
     3da:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__mulsf3>
     3de:	3b 01       	movw	r6, r22
     3e0:	4c 01       	movw	r8, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fixunssfsi>
     3e6:	6b 83       	std	Y+3, r22	; 0x03
     3e8:	7c 83       	std	Y+4, r23	; 0x04
     3ea:	19 82       	std	Y+1, r1	; 0x01
	PORTD&=~(1<<PD2);
	_delay_ms(off_time);
     3ec:	c8 01       	movw	r24, r16
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	8d 83       	std	Y+5, r24	; 0x05
     3f4:	9e 83       	std	Y+6, r25	; 0x06
     3f6:	af 83       	std	Y+7, r26	; 0x07
     3f8:	b8 87       	std	Y+8, r27	; 0x08
void led(unsigned int on_time, unsigned int off_time, unsigned char led_count)
{
unsigned char led_current;
  for(led_current=0;led_current<=led_count;led_current++)
  {
	PORTD|=(1<<PD2);
     3fa:	92 9a       	sbi	0x12, 2	; 18
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     3fc:	c4 01       	movw	r24, r8
     3fe:	b3 01       	movw	r22, r6
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e8       	ldi	r20, 0x80	; 128
     406:	5f e3       	ldi	r21, 0x3F	; 63
     408:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__ltsf2>
     40c:	87 fd       	sbrc	r24, 7
     40e:	23 c0       	rjmp	.+70     	; 0x456 <led+0xcc>
		__ticks = 1;
	else if (__tmp > 65535)
     410:	c4 01       	movw	r24, r8
     412:	b3 01       	movw	r22, r6
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	3f ef       	ldi	r19, 0xFF	; 255
     418:	4f e7       	ldi	r20, 0x7F	; 127
     41a:	57 e4       	ldi	r21, 0x47	; 71
     41c:	0e 94 be 1c 	call	0x397c	; 0x397c <__gtsf2>
     420:	18 16       	cp	r1, r24
     422:	24 f0       	brlt	.+8      	; 0x42c <led+0xa2>
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	9c 81       	ldd	r25, Y+4	; 0x04
     428:	9c 01       	movw	r18, r24
     42a:	17 c0       	rjmp	.+46     	; 0x45a <led+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42c:	c2 01       	movw	r24, r4
     42e:	b1 01       	movw	r22, r2
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e2       	ldi	r20, 0x20	; 32
     436:	51 e4       	ldi	r21, 0x41	; 65
     438:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__mulsf3>
     43c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fixunssfsi>
     440:	06 c0       	rjmp	.+12     	; 0x44e <led+0xc4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     442:	89 e1       	ldi	r24, 0x19	; 25
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <led+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44a:	61 50       	subi	r22, 0x01	; 1
     44c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     44e:	61 15       	cp	r22, r1
     450:	71 05       	cpc	r23, r1
     452:	b9 f7       	brne	.-18     	; 0x442 <led+0xb8>
     454:	05 c0       	rjmp	.+10     	; 0x460 <led+0xd6>
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	c9 01       	movw	r24, r18
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <led+0xd2>
	_delay_ms(on_time);
	PORTD&=~(1<<PD2);
     460:	92 98       	cbi	0x12, 2	; 18
	_delay_ms(off_time);
     462:	6d 81       	ldd	r22, Y+5	; 0x05
     464:	7e 81       	ldd	r23, Y+6	; 0x06
     466:	8f 81       	ldd	r24, Y+7	; 0x07
     468:	98 85       	ldd	r25, Y+8	; 0x08
     46a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__floatunsisf>
     46e:	5b 01       	movw	r10, r22
     470:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	4a e7       	ldi	r20, 0x7A	; 122
     478:	53 e4       	ldi	r21, 0x43	; 67
     47a:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__mulsf3>
     47e:	7b 01       	movw	r14, r22
     480:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 e8       	ldi	r20, 0x80	; 128
     488:	5f e3       	ldi	r21, 0x3F	; 63
     48a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <__ltsf2>
     48e:	88 23       	and	r24, r24
     490:	1c f4       	brge	.+6      	; 0x498 <led+0x10e>
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	23 c0       	rjmp	.+70     	; 0x4de <led+0x154>
		__ticks = 1;
	else if (__tmp > 65535)
     498:	c8 01       	movw	r24, r16
     49a:	b7 01       	movw	r22, r14
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	3f ef       	ldi	r19, 0xFF	; 255
     4a0:	4f e7       	ldi	r20, 0x7F	; 127
     4a2:	57 e4       	ldi	r21, 0x47	; 71
     4a4:	0e 94 be 1c 	call	0x397c	; 0x397c <__gtsf2>
     4a8:	18 16       	cp	r1, r24
     4aa:	ac f4       	brge	.+42     	; 0x4d6 <led+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ac:	c6 01       	movw	r24, r12
     4ae:	b5 01       	movw	r22, r10
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e2       	ldi	r20, 0x20	; 32
     4b6:	51 e4       	ldi	r21, 0x41	; 65
     4b8:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__mulsf3>
     4bc:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fixunssfsi>
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <led+0x144>
     4c2:	89 e1       	ldi	r24, 0x19	; 25
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <led+0x13c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ce:	61 15       	cp	r22, r1
     4d0:	71 05       	cpc	r23, r1
     4d2:	b9 f7       	brne	.-18     	; 0x4c2 <led+0x138>
     4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <led+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d6:	c8 01       	movw	r24, r16
     4d8:	b7 01       	movw	r22, r14
     4da:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__fixunssfsi>
     4de:	cb 01       	movw	r24, r22
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <led+0x156>
void led_off(){PORTD&=~(1<<PD2);}

void led(unsigned int on_time, unsigned int off_time, unsigned char led_count)
{
unsigned char led_current;
  for(led_current=0;led_current<=led_count;led_current++)
     4e4:	99 81       	ldd	r25, Y+1	; 0x01
     4e6:	9f 5f       	subi	r25, 0xFF	; 255
     4e8:	99 83       	std	Y+1, r25	; 0x01
     4ea:	aa 81       	ldd	r26, Y+2	; 0x02
     4ec:	a9 17       	cp	r26, r25
     4ee:	08 f0       	brcs	.+2      	; 0x4f2 <led+0x168>
     4f0:	84 cf       	rjmp	.-248    	; 0x3fa <led+0x70>
	PORTD|=(1<<PD2);
	_delay_ms(on_time);
	PORTD&=~(1<<PD2);
	_delay_ms(off_time);
  }
}
     4f2:	28 96       	adiw	r28, 0x08	; 8
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	7f 90       	pop	r7
     518:	6f 90       	pop	r6
     51a:	5f 90       	pop	r5
     51c:	4f 90       	pop	r4
     51e:	3f 90       	pop	r3
     520:	2f 90       	pop	r2
     522:	08 95       	ret

00000524 <__vector_16>:
volatile unsigned char svf_data[8];//목표서보값//
volatile unsigned char svo_data[8];//원래서보값//
volatile unsigned char svm_data[8];//변하는서보값//

ISR(TIMER0_OVF_vect)//0.01ms//
{
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25

TCNT0=0x5F;
     536:	8f e5       	ldi	r24, 0x5F	; 95
     538:	82 bf       	out	0x32, r24	; 50

count++;
     53a:	80 91 18 02 	lds	r24, 0x0218
     53e:	90 91 19 02 	lds	r25, 0x0219
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	90 93 19 02 	sts	0x0219, r25
     548:	80 93 18 02 	sts	0x0218, r24

  //서보1,2제어//
  if(count<=200) 
     54c:	80 91 18 02 	lds	r24, 0x0218
     550:	90 91 19 02 	lds	r25, 0x0219
     554:	89 3c       	cpi	r24, 0xC9	; 201
     556:	91 05       	cpc	r25, r1
     558:	68 f5       	brcc	.+90     	; 0x5b4 <__vector_16+0x90>
  {
    if(count<=80) {PORTC=0x03;}
     55a:	80 91 18 02 	lds	r24, 0x0218
     55e:	90 91 19 02 	lds	r25, 0x0219
     562:	81 35       	cpi	r24, 0x51	; 81
     564:	91 05       	cpc	r25, r1
     566:	10 f4       	brcc	.+4      	; 0x56c <__vector_16+0x48>
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	33 c0       	rjmp	.+102    	; 0x5d2 <__vector_16+0xae>
    else if(count>80) 
     56c:	80 91 18 02 	lds	r24, 0x0218
     570:	90 91 19 02 	lds	r25, 0x0219
     574:	81 35       	cpi	r24, 0x51	; 81
     576:	91 05       	cpc	r25, r1
     578:	08 f4       	brcc	.+2      	; 0x57c <__vector_16+0x58>
     57a:	b5 c0       	rjmp	.+362    	; 0x6e6 <__vector_16+0x1c2>
    {
	if(count>(angle_1+80)) {PORTC&=~0x01;}
     57c:	20 91 18 02 	lds	r18, 0x0218
     580:	30 91 19 02 	lds	r19, 0x0219
     584:	80 91 1c 02 	lds	r24, 0x021C
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	80 5b       	subi	r24, 0xB0	; 176
     58c:	9f 4f       	sbci	r25, 0xFF	; 255
     58e:	82 17       	cp	r24, r18
     590:	93 07       	cpc	r25, r19
     592:	08 f4       	brcc	.+2      	; 0x596 <__vector_16+0x72>
     594:	a8 98       	cbi	0x15, 0	; 21
	if(count>(angle_2+80)) {PORTC&=~0x02;}
     596:	20 91 18 02 	lds	r18, 0x0218
     59a:	30 91 19 02 	lds	r19, 0x0219
     59e:	80 91 1d 02 	lds	r24, 0x021D
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	80 5b       	subi	r24, 0xB0	; 176
     5a6:	9f 4f       	sbci	r25, 0xFF	; 255
     5a8:	82 17       	cp	r24, r18
     5aa:	93 07       	cpc	r25, r19
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <__vector_16+0x8c>
     5ae:	9b c0       	rjmp	.+310    	; 0x6e6 <__vector_16+0x1c2>
     5b0:	a9 98       	cbi	0x15, 1	; 21
     5b2:	99 c0       	rjmp	.+306    	; 0x6e6 <__vector_16+0x1c2>
	}
  }
  //서보3,4제어//
  else if(count<=400) 
     5b4:	80 91 18 02 	lds	r24, 0x0218
     5b8:	90 91 19 02 	lds	r25, 0x0219
     5bc:	81 59       	subi	r24, 0x91	; 145
     5be:	91 40       	sbci	r25, 0x01	; 1
     5c0:	70 f5       	brcc	.+92     	; 0x61e <__vector_16+0xfa>
  {
    if(count<=280) {PORTC=0x0C;}
     5c2:	80 91 18 02 	lds	r24, 0x0218
     5c6:	90 91 19 02 	lds	r25, 0x0219
     5ca:	89 51       	subi	r24, 0x19	; 25
     5cc:	91 40       	sbci	r25, 0x01	; 1
     5ce:	18 f4       	brcc	.+6      	; 0x5d6 <__vector_16+0xb2>
     5d0:	8c e0       	ldi	r24, 0x0C	; 12
     5d2:	85 bb       	out	0x15, r24	; 21
     5d4:	88 c0       	rjmp	.+272    	; 0x6e6 <__vector_16+0x1c2>
    else if(count>280) 
     5d6:	80 91 18 02 	lds	r24, 0x0218
     5da:	90 91 19 02 	lds	r25, 0x0219
     5de:	89 51       	subi	r24, 0x19	; 25
     5e0:	91 40       	sbci	r25, 0x01	; 1
     5e2:	08 f4       	brcc	.+2      	; 0x5e6 <__vector_16+0xc2>
     5e4:	80 c0       	rjmp	.+256    	; 0x6e6 <__vector_16+0x1c2>
    {
	if(count>(angle_3+280)) {PORTC&=~0x04;}
     5e6:	20 91 18 02 	lds	r18, 0x0218
     5ea:	30 91 19 02 	lds	r19, 0x0219
     5ee:	80 91 1e 02 	lds	r24, 0x021E
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	88 5e       	subi	r24, 0xE8	; 232
     5f6:	9e 4f       	sbci	r25, 0xFE	; 254
     5f8:	82 17       	cp	r24, r18
     5fa:	93 07       	cpc	r25, r19
     5fc:	08 f4       	brcc	.+2      	; 0x600 <__vector_16+0xdc>
     5fe:	aa 98       	cbi	0x15, 2	; 21
	if(count>(angle_4+280)) {PORTC&=~0x08;}
     600:	20 91 18 02 	lds	r18, 0x0218
     604:	30 91 19 02 	lds	r19, 0x0219
     608:	80 91 1f 02 	lds	r24, 0x021F
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	88 5e       	subi	r24, 0xE8	; 232
     610:	9e 4f       	sbci	r25, 0xFE	; 254
     612:	82 17       	cp	r24, r18
     614:	93 07       	cpc	r25, r19
     616:	08 f0       	brcs	.+2      	; 0x61a <__vector_16+0xf6>
     618:	66 c0       	rjmp	.+204    	; 0x6e6 <__vector_16+0x1c2>
     61a:	ab 98       	cbi	0x15, 3	; 21
     61c:	64 c0       	rjmp	.+200    	; 0x6e6 <__vector_16+0x1c2>
	}
  }
  //서보5,6제어//
  else if(count<=600) 
     61e:	80 91 18 02 	lds	r24, 0x0218
     622:	90 91 19 02 	lds	r25, 0x0219
     626:	89 55       	subi	r24, 0x59	; 89
     628:	92 40       	sbci	r25, 0x02	; 2
     62a:	60 f5       	brcc	.+88     	; 0x684 <__vector_16+0x160>
  {
    if(count<=480) {PORTC=0x30;}
     62c:	80 91 18 02 	lds	r24, 0x0218
     630:	90 91 19 02 	lds	r25, 0x0219
     634:	81 5e       	subi	r24, 0xE1	; 225
     636:	91 40       	sbci	r25, 0x01	; 1
     638:	10 f4       	brcc	.+4      	; 0x63e <__vector_16+0x11a>
     63a:	80 e3       	ldi	r24, 0x30	; 48
     63c:	ca cf       	rjmp	.-108    	; 0x5d2 <__vector_16+0xae>
    else if(count>480) 
     63e:	80 91 18 02 	lds	r24, 0x0218
     642:	90 91 19 02 	lds	r25, 0x0219
     646:	81 5e       	subi	r24, 0xE1	; 225
     648:	91 40       	sbci	r25, 0x01	; 1
     64a:	08 f4       	brcc	.+2      	; 0x64e <__vector_16+0x12a>
     64c:	4c c0       	rjmp	.+152    	; 0x6e6 <__vector_16+0x1c2>
    {
	if(count>(angle_5+480)) {PORTC&=~0x10;}
     64e:	20 91 18 02 	lds	r18, 0x0218
     652:	30 91 19 02 	lds	r19, 0x0219
     656:	80 91 20 02 	lds	r24, 0x0220
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	80 52       	subi	r24, 0x20	; 32
     65e:	9e 4f       	sbci	r25, 0xFE	; 254
     660:	82 17       	cp	r24, r18
     662:	93 07       	cpc	r25, r19
     664:	08 f4       	brcc	.+2      	; 0x668 <__vector_16+0x144>
     666:	ac 98       	cbi	0x15, 4	; 21
	if(count>(angle_6+480)) {PORTC&=~0x20;}
     668:	20 91 18 02 	lds	r18, 0x0218
     66c:	30 91 19 02 	lds	r19, 0x0219
     670:	80 91 21 02 	lds	r24, 0x0221
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	80 52       	subi	r24, 0x20	; 32
     678:	9e 4f       	sbci	r25, 0xFE	; 254
     67a:	82 17       	cp	r24, r18
     67c:	93 07       	cpc	r25, r19
     67e:	98 f5       	brcc	.+102    	; 0x6e6 <__vector_16+0x1c2>
     680:	ad 98       	cbi	0x15, 5	; 21
     682:	31 c0       	rjmp	.+98     	; 0x6e6 <__vector_16+0x1c2>
	}
  }
  //서보7,8제어//
  else if(count<=800) 
     684:	80 91 18 02 	lds	r24, 0x0218
     688:	90 91 19 02 	lds	r25, 0x0219
     68c:	81 52       	subi	r24, 0x21	; 33
     68e:	93 40       	sbci	r25, 0x03	; 3
     690:	50 f5       	brcc	.+84     	; 0x6e6 <__vector_16+0x1c2>
  {
    if(count<=680) {PORTC=0xC0;}
     692:	80 91 18 02 	lds	r24, 0x0218
     696:	90 91 19 02 	lds	r25, 0x0219
     69a:	89 5a       	subi	r24, 0xA9	; 169
     69c:	92 40       	sbci	r25, 0x02	; 2
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <__vector_16+0x180>
     6a0:	80 ec       	ldi	r24, 0xC0	; 192
     6a2:	97 cf       	rjmp	.-210    	; 0x5d2 <__vector_16+0xae>
    else if(count>680) 
     6a4:	80 91 18 02 	lds	r24, 0x0218
     6a8:	90 91 19 02 	lds	r25, 0x0219
     6ac:	89 5a       	subi	r24, 0xA9	; 169
     6ae:	92 40       	sbci	r25, 0x02	; 2
     6b0:	d0 f0       	brcs	.+52     	; 0x6e6 <__vector_16+0x1c2>
    {
	if(count>(angle_7+680)) {PORTC&=~0x40;}
     6b2:	20 91 18 02 	lds	r18, 0x0218
     6b6:	30 91 19 02 	lds	r19, 0x0219
     6ba:	80 91 22 02 	lds	r24, 0x0222
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	88 55       	subi	r24, 0x58	; 88
     6c2:	9d 4f       	sbci	r25, 0xFD	; 253
     6c4:	82 17       	cp	r24, r18
     6c6:	93 07       	cpc	r25, r19
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <__vector_16+0x1a8>
     6ca:	ae 98       	cbi	0x15, 6	; 21
	if(count>(angle_8+680)) {PORTC&=~0x80;}
     6cc:	20 91 18 02 	lds	r18, 0x0218
     6d0:	30 91 19 02 	lds	r19, 0x0219
     6d4:	80 91 23 02 	lds	r24, 0x0223
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	88 55       	subi	r24, 0x58	; 88
     6dc:	9d 4f       	sbci	r25, 0xFD	; 253
     6de:	82 17       	cp	r24, r18
     6e0:	93 07       	cpc	r25, r19
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <__vector_16+0x1c2>
     6e4:	af 98       	cbi	0x15, 7	; 21
	}
  }

  if(count>=2001) {count=0;}
     6e6:	80 91 18 02 	lds	r24, 0x0218
     6ea:	90 91 19 02 	lds	r25, 0x0219
     6ee:	81 5d       	subi	r24, 0xD1	; 209
     6f0:	97 40       	sbci	r25, 0x07	; 7
     6f2:	20 f0       	brcs	.+8      	; 0x6fc <__vector_16+0x1d8>
     6f4:	10 92 19 02 	sts	0x0219, r1
     6f8:	10 92 18 02 	sts	0x0218, r1
}
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	3f 91       	pop	r19
     702:	2f 91       	pop	r18
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <servo1>:
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
     70e:	80 93 1c 02 	sts	0x021C, r24
     712:	08 95       	ret

00000714 <servo2>:
void servo2(unsigned char ang)
{angle_2=ang;}
     714:	80 93 1d 02 	sts	0x021D, r24
     718:	08 95       	ret

0000071a <servo3>:
void servo3(unsigned char ang)
{angle_3=ang;}
     71a:	80 93 1e 02 	sts	0x021E, r24
     71e:	08 95       	ret

00000720 <servo4>:
void servo4(unsigned char ang)
{angle_4=ang;}
     720:	80 93 1f 02 	sts	0x021F, r24
     724:	08 95       	ret

00000726 <servo5>:
void servo5(unsigned char ang)
{angle_5=ang;}
     726:	80 93 20 02 	sts	0x0220, r24
     72a:	08 95       	ret

0000072c <servo6>:
void servo6(unsigned char ang)
{angle_6=ang;}
     72c:	80 93 21 02 	sts	0x0221, r24
     730:	08 95       	ret

00000732 <servo7>:
void servo7(unsigned char ang)
{angle_7=ang;}
     732:	80 93 22 02 	sts	0x0222, r24
     736:	08 95       	ret

00000738 <servo8>:
void servo8(unsigned char ang)
{angle_8=ang;}
     738:	80 93 23 02 	sts	0x0223, r24
     73c:	08 95       	ret

0000073e <center_servo_set>:


void center_servo_set(unsigned char sv1, unsigned char sv2, unsigned char sv3, unsigned char sv4,unsigned char sv5,unsigned char sv6,unsigned char sv7,unsigned char sv8,unsigned int del)
{
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	c4 01       	movw	r24, r8
sv_data[0]=s1;sv_data[1]=s2;sv_data[2]=s3;sv_data[3]=s4;sv_data[4]=s5;sv_data[5]=s6;sv_data[6]=s7;sv_data[7]=s8;
     74c:	f2 e0       	ldi	r31, 0x02	; 2
     74e:	f0 93 86 02 	sts	0x0286, r31
     752:	e4 e0       	ldi	r30, 0x04	; 4
     754:	e0 93 87 02 	sts	0x0287, r30
     758:	78 e0       	ldi	r23, 0x08	; 8
     75a:	70 93 88 02 	sts	0x0288, r23
     75e:	60 e1       	ldi	r22, 0x10	; 16
     760:	60 93 89 02 	sts	0x0289, r22
     764:	50 e2       	ldi	r21, 0x20	; 32
     766:	50 93 8a 02 	sts	0x028A, r21
     76a:	40 e4       	ldi	r20, 0x40	; 64
     76c:	40 93 8b 02 	sts	0x028B, r20
     770:	30 e8       	ldi	r19, 0x80	; 128
     772:	30 93 8c 02 	sts	0x028C, r19
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	20 93 8d 02 	sts	0x028D, r18
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
     77c:	f0 93 1c 02 	sts	0x021C, r31
void servo2(unsigned char ang)
{angle_2=ang;}
     780:	e0 93 1d 02 	sts	0x021D, r30
void servo3(unsigned char ang)
{angle_3=ang;}
     784:	70 93 1e 02 	sts	0x021E, r23
void servo4(unsigned char ang)
{angle_4=ang;}
     788:	60 93 1f 02 	sts	0x021F, r22
void servo5(unsigned char ang)
{angle_5=ang;}
     78c:	50 93 20 02 	sts	0x0220, r21
void servo6(unsigned char ang)
{angle_6=ang;}
     790:	40 93 21 02 	sts	0x0221, r20
void servo7(unsigned char ang)
{angle_7=ang;}
     794:	30 93 22 02 	sts	0x0222, r19
void servo8(unsigned char ang)
{angle_8=ang;}
     798:	20 93 23 02 	sts	0x0223, r18

void center_servo_set(unsigned char sv1, unsigned char sv2, unsigned char sv3, unsigned char sv4,unsigned char sv5,unsigned char sv6,unsigned char sv7,unsigned char sv8,unsigned int del)
{
sv_data[0]=s1;sv_data[1]=s2;sv_data[2]=s3;sv_data[3]=s4;sv_data[4]=s5;sv_data[5]=s6;sv_data[6]=s7;sv_data[7]=s8;
servo1(s1);servo2(s2);servo3(s3);servo4(s4);servo5(s5);servo6(s6);servo7(s7);servo8(s8);
svo_data[0]=s1;svo_data[1]=s2;svo_data[2]=s3;svo_data[3]=s4;svo_data[4]=s5;svo_data[5]=s6;svo_data[6]=s7;svo_data[7]=s8;
     79c:	f0 93 76 02 	sts	0x0276, r31
     7a0:	e0 93 77 02 	sts	0x0277, r30
     7a4:	70 93 78 02 	sts	0x0278, r23
     7a8:	60 93 79 02 	sts	0x0279, r22
     7ac:	50 93 7a 02 	sts	0x027A, r21
     7b0:	40 93 7b 02 	sts	0x027B, r20
     7b4:	30 93 7c 02 	sts	0x027C, r19
     7b8:	20 93 7d 02 	sts	0x027D, r18
delay(del);
     7bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
}
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	9f 90       	pop	r9
     7c6:	8f 90       	pop	r8
     7c8:	08 95       	ret

000007ca <motion1_set>:
void motion1_set(char sv1, char sv2,char sv3,char sv4,char sv5,char sv6,char sv7,char sv8)
{svf_data[0]=sv_data[0]+sv1;svf_data[1]=sv_data[1]+sv2;svf_data[2]=sv_data[2]+sv3;svf_data[3]=sv_data[3]+sv4;svf_data[4]=sv_data[4]+sv5;svf_data[5]=sv_data[5]+sv6;svf_data[6]=sv_data[6]+sv7;svf_data[7]=sv_data[7]+sv8;}
     7ca:	af 92       	push	r10
     7cc:	cf 92       	push	r12
     7ce:	ef 92       	push	r14
     7d0:	0f 93       	push	r16
     7d2:	90 91 86 02 	lds	r25, 0x0286
     7d6:	98 0f       	add	r25, r24
     7d8:	90 93 7e 02 	sts	0x027E, r25
     7dc:	80 91 87 02 	lds	r24, 0x0287
     7e0:	86 0f       	add	r24, r22
     7e2:	80 93 7f 02 	sts	0x027F, r24
     7e6:	80 91 88 02 	lds	r24, 0x0288
     7ea:	84 0f       	add	r24, r20
     7ec:	80 93 80 02 	sts	0x0280, r24
     7f0:	80 91 89 02 	lds	r24, 0x0289
     7f4:	82 0f       	add	r24, r18
     7f6:	80 93 81 02 	sts	0x0281, r24
     7fa:	80 91 8a 02 	lds	r24, 0x028A
     7fe:	80 0f       	add	r24, r16
     800:	80 93 82 02 	sts	0x0282, r24
     804:	80 91 8b 02 	lds	r24, 0x028B
     808:	8e 0d       	add	r24, r14
     80a:	80 93 83 02 	sts	0x0283, r24
     80e:	80 91 8c 02 	lds	r24, 0x028C
     812:	8c 0d       	add	r24, r12
     814:	80 93 84 02 	sts	0x0284, r24
     818:	80 91 8d 02 	lds	r24, 0x028D
     81c:	8a 0d       	add	r24, r10
     81e:	80 93 85 02 	sts	0x0285, r24
     822:	0f 91       	pop	r16
     824:	ef 90       	pop	r14
     826:	cf 90       	pop	r12
     828:	af 90       	pop	r10
     82a:	08 95       	ret

0000082c <motion2_set>:
void motion2_set(char sv1, char sv2,char sv3,char sv4,char sv5,char sv6,char sv7,char sv8)
{svf_data[0]=sv_data[0]+sv1;svf_data[1]=sv_data[1]+sv2;svf_data[2]=sv_data[2]+sv3;svf_data[3]=sv_data[3]+sv4;svf_data[4]=sv_data[4]+sv5;svf_data[5]=sv_data[5]+sv6;svf_data[6]=sv_data[6]+sv7;svf_data[7]=sv_data[7]+sv8;}
     82c:	af 92       	push	r10
     82e:	cf 92       	push	r12
     830:	ef 92       	push	r14
     832:	0f 93       	push	r16
     834:	90 91 86 02 	lds	r25, 0x0286
     838:	98 0f       	add	r25, r24
     83a:	90 93 7e 02 	sts	0x027E, r25
     83e:	80 91 87 02 	lds	r24, 0x0287
     842:	86 0f       	add	r24, r22
     844:	80 93 7f 02 	sts	0x027F, r24
     848:	80 91 88 02 	lds	r24, 0x0288
     84c:	84 0f       	add	r24, r20
     84e:	80 93 80 02 	sts	0x0280, r24
     852:	80 91 89 02 	lds	r24, 0x0289
     856:	82 0f       	add	r24, r18
     858:	80 93 81 02 	sts	0x0281, r24
     85c:	80 91 8a 02 	lds	r24, 0x028A
     860:	80 0f       	add	r24, r16
     862:	80 93 82 02 	sts	0x0282, r24
     866:	80 91 8b 02 	lds	r24, 0x028B
     86a:	8e 0d       	add	r24, r14
     86c:	80 93 83 02 	sts	0x0283, r24
     870:	80 91 8c 02 	lds	r24, 0x028C
     874:	8c 0d       	add	r24, r12
     876:	80 93 84 02 	sts	0x0284, r24
     87a:	80 91 8d 02 	lds	r24, 0x028D
     87e:	8a 0d       	add	r24, r10
     880:	80 93 85 02 	sts	0x0285, r24
     884:	0f 91       	pop	r16
     886:	ef 90       	pop	r14
     888:	cf 90       	pop	r12
     88a:	af 90       	pop	r10
     88c:	08 95       	ret

0000088e <motion3_set>:
void motion3_set(char sv1, char sv2,char sv3,char sv4,char sv5,char sv6,char sv7,char sv8)
{svf_data[0]=sv_data[0]+sv1;svf_data[1]=sv_data[1]+sv2;svf_data[2]=sv_data[2]+sv3;svf_data[3]=sv_data[3]+sv4;svf_data[4]=sv_data[4]+sv5;svf_data[5]=sv_data[5]+sv6;svf_data[6]=sv_data[6]+sv7;svf_data[7]=sv_data[7]+sv8;}
     88e:	af 92       	push	r10
     890:	cf 92       	push	r12
     892:	ef 92       	push	r14
     894:	0f 93       	push	r16
     896:	90 91 86 02 	lds	r25, 0x0286
     89a:	98 0f       	add	r25, r24
     89c:	90 93 7e 02 	sts	0x027E, r25
     8a0:	80 91 87 02 	lds	r24, 0x0287
     8a4:	86 0f       	add	r24, r22
     8a6:	80 93 7f 02 	sts	0x027F, r24
     8aa:	80 91 88 02 	lds	r24, 0x0288
     8ae:	84 0f       	add	r24, r20
     8b0:	80 93 80 02 	sts	0x0280, r24
     8b4:	80 91 89 02 	lds	r24, 0x0289
     8b8:	82 0f       	add	r24, r18
     8ba:	80 93 81 02 	sts	0x0281, r24
     8be:	80 91 8a 02 	lds	r24, 0x028A
     8c2:	80 0f       	add	r24, r16
     8c4:	80 93 82 02 	sts	0x0282, r24
     8c8:	80 91 8b 02 	lds	r24, 0x028B
     8cc:	8e 0d       	add	r24, r14
     8ce:	80 93 83 02 	sts	0x0283, r24
     8d2:	80 91 8c 02 	lds	r24, 0x028C
     8d6:	8c 0d       	add	r24, r12
     8d8:	80 93 84 02 	sts	0x0284, r24
     8dc:	80 91 8d 02 	lds	r24, 0x028D
     8e0:	8a 0d       	add	r24, r10
     8e2:	80 93 85 02 	sts	0x0285, r24
     8e6:	0f 91       	pop	r16
     8e8:	ef 90       	pop	r14
     8ea:	cf 90       	pop	r12
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret

000008f0 <motion4_set>:
void motion4_set(char sv1, char sv2,char sv3,char sv4,char sv5,char sv6,char sv7,char sv8)
{svf_data[0]=sv_data[0]+sv1;svf_data[1]=sv_data[1]+sv2;svf_data[2]=sv_data[2]+sv3;svf_data[3]=sv_data[3]+sv4;svf_data[4]=sv_data[4]+sv5;svf_data[5]=sv_data[5]+sv6;svf_data[6]=sv_data[6]+sv7;svf_data[7]=sv_data[7]+sv8;}
     8f0:	af 92       	push	r10
     8f2:	cf 92       	push	r12
     8f4:	ef 92       	push	r14
     8f6:	0f 93       	push	r16
     8f8:	90 91 86 02 	lds	r25, 0x0286
     8fc:	98 0f       	add	r25, r24
     8fe:	90 93 7e 02 	sts	0x027E, r25
     902:	80 91 87 02 	lds	r24, 0x0287
     906:	86 0f       	add	r24, r22
     908:	80 93 7f 02 	sts	0x027F, r24
     90c:	80 91 88 02 	lds	r24, 0x0288
     910:	84 0f       	add	r24, r20
     912:	80 93 80 02 	sts	0x0280, r24
     916:	80 91 89 02 	lds	r24, 0x0289
     91a:	82 0f       	add	r24, r18
     91c:	80 93 81 02 	sts	0x0281, r24
     920:	80 91 8a 02 	lds	r24, 0x028A
     924:	80 0f       	add	r24, r16
     926:	80 93 82 02 	sts	0x0282, r24
     92a:	80 91 8b 02 	lds	r24, 0x028B
     92e:	8e 0d       	add	r24, r14
     930:	80 93 83 02 	sts	0x0283, r24
     934:	80 91 8c 02 	lds	r24, 0x028C
     938:	8c 0d       	add	r24, r12
     93a:	80 93 84 02 	sts	0x0284, r24
     93e:	80 91 8d 02 	lds	r24, 0x028D
     942:	8a 0d       	add	r24, r10
     944:	80 93 85 02 	sts	0x0285, r24
     948:	0f 91       	pop	r16
     94a:	ef 90       	pop	r14
     94c:	cf 90       	pop	r12
     94e:	af 90       	pop	r10
     950:	08 95       	ret

00000952 <motion1>:



void motion1(unsigned char sv_sp, unsigned int del)
{
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	18 2f       	mov	r17, r24
     95a:	eb 01       	movw	r28, r22
  svm_data[0]=svo_data[0];
     95c:	80 91 76 02 	lds	r24, 0x0276
     960:	80 93 6e 02 	sts	0x026E, r24
  svm_data[1]=svo_data[1];
     964:	80 91 77 02 	lds	r24, 0x0277
     968:	80 93 6f 02 	sts	0x026F, r24
  svm_data[2]=svo_data[2];
     96c:	80 91 78 02 	lds	r24, 0x0278
     970:	80 93 70 02 	sts	0x0270, r24
  svm_data[3]=svo_data[3];
     974:	80 91 79 02 	lds	r24, 0x0279
     978:	80 93 71 02 	sts	0x0271, r24
  svm_data[4]=svo_data[4];
     97c:	80 91 7a 02 	lds	r24, 0x027A
     980:	80 93 72 02 	sts	0x0272, r24
  svm_data[5]=svo_data[5];
     984:	80 91 7b 02 	lds	r24, 0x027B
     988:	80 93 73 02 	sts	0x0273, r24
  svm_data[6]=svo_data[6];
     98c:	80 91 7c 02 	lds	r24, 0x027C
     990:	80 93 74 02 	sts	0x0274, r24
  svm_data[7]=svo_data[7];
     994:	80 91 7d 02 	lds	r24, 0x027D
     998:	80 93 75 02 	sts	0x0275, r24
  while(1)
  {	
    delay(sv_sp);
     99c:	81 2f       	mov	r24, r17
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

    if(svm_data[0]>svf_data[0]){svm_data[0]--;}
     9a4:	90 91 6e 02 	lds	r25, 0x026E
     9a8:	80 91 7e 02 	lds	r24, 0x027E
     9ac:	89 17       	cp	r24, r25
     9ae:	20 f4       	brcc	.+8      	; 0x9b8 <motion1+0x66>
     9b0:	80 91 6e 02 	lds	r24, 0x026E
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <motion1+0x78>
    else if(svm_data[0]<svf_data[0]){svm_data[0]++;}
     9b8:	90 91 6e 02 	lds	r25, 0x026E
     9bc:	80 91 7e 02 	lds	r24, 0x027E
     9c0:	98 17       	cp	r25, r24
     9c2:	28 f4       	brcc	.+10     	; 0x9ce <motion1+0x7c>
     9c4:	80 91 6e 02 	lds	r24, 0x026E
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 6e 02 	sts	0x026E, r24
	if(svm_data[1]>svf_data[1]){svm_data[1]--;}
     9ce:	90 91 6f 02 	lds	r25, 0x026F
     9d2:	80 91 7f 02 	lds	r24, 0x027F
     9d6:	89 17       	cp	r24, r25
     9d8:	20 f4       	brcc	.+8      	; 0x9e2 <motion1+0x90>
     9da:	80 91 6f 02 	lds	r24, 0x026F
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <motion1+0xa2>
    else if(svm_data[1]<svf_data[1]){svm_data[1]++;}
     9e2:	90 91 6f 02 	lds	r25, 0x026F
     9e6:	80 91 7f 02 	lds	r24, 0x027F
     9ea:	98 17       	cp	r25, r24
     9ec:	28 f4       	brcc	.+10     	; 0x9f8 <motion1+0xa6>
     9ee:	80 91 6f 02 	lds	r24, 0x026F
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	80 93 6f 02 	sts	0x026F, r24
	if(svm_data[2]>svf_data[2]){svm_data[2]--;}
     9f8:	90 91 70 02 	lds	r25, 0x0270
     9fc:	80 91 80 02 	lds	r24, 0x0280
     a00:	89 17       	cp	r24, r25
     a02:	20 f4       	brcc	.+8      	; 0xa0c <motion1+0xba>
     a04:	80 91 70 02 	lds	r24, 0x0270
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <motion1+0xcc>
    else if(svm_data[2]<svf_data[2]){svm_data[2]++;}
     a0c:	90 91 70 02 	lds	r25, 0x0270
     a10:	80 91 80 02 	lds	r24, 0x0280
     a14:	98 17       	cp	r25, r24
     a16:	28 f4       	brcc	.+10     	; 0xa22 <motion1+0xd0>
     a18:	80 91 70 02 	lds	r24, 0x0270
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 70 02 	sts	0x0270, r24
	if(svm_data[3]>svf_data[3]){svm_data[3]--;}
     a22:	90 91 71 02 	lds	r25, 0x0271
     a26:	80 91 81 02 	lds	r24, 0x0281
     a2a:	89 17       	cp	r24, r25
     a2c:	20 f4       	brcc	.+8      	; 0xa36 <motion1+0xe4>
     a2e:	80 91 71 02 	lds	r24, 0x0271
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <motion1+0xf6>
    else if(svm_data[3]<svf_data[3]){svm_data[3]++;}
     a36:	90 91 71 02 	lds	r25, 0x0271
     a3a:	80 91 81 02 	lds	r24, 0x0281
     a3e:	98 17       	cp	r25, r24
     a40:	28 f4       	brcc	.+10     	; 0xa4c <motion1+0xfa>
     a42:	80 91 71 02 	lds	r24, 0x0271
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	80 93 71 02 	sts	0x0271, r24
    if(svm_data[4]>svf_data[4]){svm_data[4]--;}
     a4c:	90 91 72 02 	lds	r25, 0x0272
     a50:	80 91 82 02 	lds	r24, 0x0282
     a54:	89 17       	cp	r24, r25
     a56:	20 f4       	brcc	.+8      	; 0xa60 <motion1+0x10e>
     a58:	80 91 72 02 	lds	r24, 0x0272
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <motion1+0x120>
    else if(svm_data[4]<svf_data[4]){svm_data[4]++;}
     a60:	90 91 72 02 	lds	r25, 0x0272
     a64:	80 91 82 02 	lds	r24, 0x0282
     a68:	98 17       	cp	r25, r24
     a6a:	28 f4       	brcc	.+10     	; 0xa76 <motion1+0x124>
     a6c:	80 91 72 02 	lds	r24, 0x0272
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	80 93 72 02 	sts	0x0272, r24
	if(svm_data[5]>svf_data[5]){svm_data[5]--;}
     a76:	90 91 73 02 	lds	r25, 0x0273
     a7a:	80 91 83 02 	lds	r24, 0x0283
     a7e:	89 17       	cp	r24, r25
     a80:	20 f4       	brcc	.+8      	; 0xa8a <motion1+0x138>
     a82:	80 91 73 02 	lds	r24, 0x0273
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	09 c0       	rjmp	.+18     	; 0xa9c <motion1+0x14a>
    else if(svm_data[5]<svf_data[5]){svm_data[5]++;}
     a8a:	90 91 73 02 	lds	r25, 0x0273
     a8e:	80 91 83 02 	lds	r24, 0x0283
     a92:	98 17       	cp	r25, r24
     a94:	28 f4       	brcc	.+10     	; 0xaa0 <motion1+0x14e>
     a96:	80 91 73 02 	lds	r24, 0x0273
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	80 93 73 02 	sts	0x0273, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
     aa0:	90 91 74 02 	lds	r25, 0x0274
     aa4:	80 91 84 02 	lds	r24, 0x0284
     aa8:	89 17       	cp	r24, r25
     aaa:	20 f4       	brcc	.+8      	; 0xab4 <motion1+0x162>
     aac:	80 91 74 02 	lds	r24, 0x0274
     ab0:	81 50       	subi	r24, 0x01	; 1
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <motion1+0x174>
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
     ab4:	90 91 74 02 	lds	r25, 0x0274
     ab8:	80 91 84 02 	lds	r24, 0x0284
     abc:	98 17       	cp	r25, r24
     abe:	28 f4       	brcc	.+10     	; 0xaca <motion1+0x178>
     ac0:	80 91 74 02 	lds	r24, 0x0274
     ac4:	8f 5f       	subi	r24, 0xFF	; 255
     ac6:	80 93 74 02 	sts	0x0274, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
     aca:	90 91 75 02 	lds	r25, 0x0275
     ace:	80 91 85 02 	lds	r24, 0x0285
     ad2:	89 17       	cp	r24, r25
     ad4:	20 f4       	brcc	.+8      	; 0xade <motion1+0x18c>
     ad6:	80 91 75 02 	lds	r24, 0x0275
     ada:	81 50       	subi	r24, 0x01	; 1
     adc:	09 c0       	rjmp	.+18     	; 0xaf0 <motion1+0x19e>
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
     ade:	90 91 75 02 	lds	r25, 0x0275
     ae2:	80 91 85 02 	lds	r24, 0x0285
     ae6:	98 17       	cp	r25, r24
     ae8:	28 f4       	brcc	.+10     	; 0xaf4 <motion1+0x1a2>
     aea:	80 91 75 02 	lds	r24, 0x0275
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 93 75 02 	sts	0x0275, r24
	servo1(svm_data[0]);
     af4:	80 91 6e 02 	lds	r24, 0x026E
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
     af8:	80 93 1c 02 	sts	0x021C, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
     afc:	80 91 6f 02 	lds	r24, 0x026F
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
     b00:	80 93 1d 02 	sts	0x021D, r24
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
     b04:	80 91 70 02 	lds	r24, 0x0270
void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
     b08:	80 93 1e 02 	sts	0x021E, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
     b0c:	80 91 71 02 	lds	r24, 0x0271
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
     b10:	80 93 1f 02 	sts	0x021F, r24
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
     b14:	80 91 72 02 	lds	r24, 0x0272
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
     b18:	80 93 20 02 	sts	0x0220, r24
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
     b1c:	80 91 73 02 	lds	r24, 0x0273
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
     b20:	80 93 21 02 	sts	0x0221, r24
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
     b24:	80 91 74 02 	lds	r24, 0x0274
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
     b28:	80 93 22 02 	sts	0x0222, r24
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
     b2c:	80 91 75 02 	lds	r24, 0x0275
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
void servo8(unsigned char ang)
{angle_8=ang;}
     b30:	80 93 23 02 	sts	0x0223, r24
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    if((svm_data[0]==svf_data[0])&&(svm_data[1]==svf_data[1])&&(svm_data[2]==svf_data[2])&&(svm_data[3]==svf_data[3])&&(svm_data[4]==svf_data[4])&&(svm_data[5]==svf_data[5])&&(svm_data[6]==svf_data[6])&&(svm_data[7]==svf_data[7])){break;}
     b34:	90 91 6e 02 	lds	r25, 0x026E
     b38:	80 91 7e 02 	lds	r24, 0x027E
     b3c:	98 17       	cp	r25, r24
     b3e:	09 f0       	breq	.+2      	; 0xb42 <motion1+0x1f0>
     b40:	2d cf       	rjmp	.-422    	; 0x99c <motion1+0x4a>
     b42:	90 91 6f 02 	lds	r25, 0x026F
     b46:	80 91 7f 02 	lds	r24, 0x027F
     b4a:	98 17       	cp	r25, r24
     b4c:	09 f0       	breq	.+2      	; 0xb50 <motion1+0x1fe>
     b4e:	26 cf       	rjmp	.-436    	; 0x99c <motion1+0x4a>
     b50:	90 91 70 02 	lds	r25, 0x0270
     b54:	80 91 80 02 	lds	r24, 0x0280
     b58:	98 17       	cp	r25, r24
     b5a:	09 f0       	breq	.+2      	; 0xb5e <motion1+0x20c>
     b5c:	1f cf       	rjmp	.-450    	; 0x99c <motion1+0x4a>
     b5e:	90 91 71 02 	lds	r25, 0x0271
     b62:	80 91 81 02 	lds	r24, 0x0281
     b66:	98 17       	cp	r25, r24
     b68:	09 f0       	breq	.+2      	; 0xb6c <motion1+0x21a>
     b6a:	18 cf       	rjmp	.-464    	; 0x99c <motion1+0x4a>
     b6c:	90 91 72 02 	lds	r25, 0x0272
     b70:	80 91 82 02 	lds	r24, 0x0282
     b74:	98 17       	cp	r25, r24
     b76:	09 f0       	breq	.+2      	; 0xb7a <motion1+0x228>
     b78:	11 cf       	rjmp	.-478    	; 0x99c <motion1+0x4a>
     b7a:	90 91 73 02 	lds	r25, 0x0273
     b7e:	80 91 83 02 	lds	r24, 0x0283
     b82:	98 17       	cp	r25, r24
     b84:	09 f0       	breq	.+2      	; 0xb88 <motion1+0x236>
     b86:	0a cf       	rjmp	.-492    	; 0x99c <motion1+0x4a>
     b88:	90 91 74 02 	lds	r25, 0x0274
     b8c:	80 91 84 02 	lds	r24, 0x0284
     b90:	98 17       	cp	r25, r24
     b92:	09 f0       	breq	.+2      	; 0xb96 <motion1+0x244>
     b94:	03 cf       	rjmp	.-506    	; 0x99c <motion1+0x4a>
     b96:	90 91 75 02 	lds	r25, 0x0275
     b9a:	80 91 85 02 	lds	r24, 0x0285
     b9e:	98 17       	cp	r25, r24
     ba0:	09 f0       	breq	.+2      	; 0xba4 <motion1+0x252>
     ba2:	fc ce       	rjmp	.-520    	; 0x99c <motion1+0x4a>
  }
  delay(del);
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
  svo_data[0]=svf_data[0];
     baa:	80 91 7e 02 	lds	r24, 0x027E
     bae:	80 93 76 02 	sts	0x0276, r24
  svo_data[1]=svf_data[1];
     bb2:	80 91 7f 02 	lds	r24, 0x027F
     bb6:	80 93 77 02 	sts	0x0277, r24
  svo_data[2]=svf_data[2];
     bba:	80 91 80 02 	lds	r24, 0x0280
     bbe:	80 93 78 02 	sts	0x0278, r24
  svo_data[3]=svf_data[3];
     bc2:	80 91 81 02 	lds	r24, 0x0281
     bc6:	80 93 79 02 	sts	0x0279, r24
  svo_data[4]=svf_data[4];
     bca:	80 91 82 02 	lds	r24, 0x0282
     bce:	80 93 7a 02 	sts	0x027A, r24
  svo_data[5]=svf_data[5];
     bd2:	80 91 83 02 	lds	r24, 0x0283
     bd6:	80 93 7b 02 	sts	0x027B, r24
  svo_data[6]=svf_data[6];
     bda:	80 91 84 02 	lds	r24, 0x0284
     bde:	80 93 7c 02 	sts	0x027C, r24
  svo_data[7]=svf_data[7];
     be2:	80 91 85 02 	lds	r24, 0x0285
     be6:	80 93 7d 02 	sts	0x027D, r24
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <motion2>:
void motion2(unsigned char sv_sp, unsigned int del)
{
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	18 2f       	mov	r17, r24
     bfa:	eb 01       	movw	r28, r22
    svm_data[0]=svo_data[0];
     bfc:	80 91 76 02 	lds	r24, 0x0276
     c00:	80 93 6e 02 	sts	0x026E, r24
  svm_data[1]=svo_data[1];
     c04:	80 91 77 02 	lds	r24, 0x0277
     c08:	80 93 6f 02 	sts	0x026F, r24
  svm_data[2]=svo_data[2];
     c0c:	80 91 78 02 	lds	r24, 0x0278
     c10:	80 93 70 02 	sts	0x0270, r24
  svm_data[3]=svo_data[3];
     c14:	80 91 79 02 	lds	r24, 0x0279
     c18:	80 93 71 02 	sts	0x0271, r24
  svm_data[4]=svo_data[4];
     c1c:	80 91 7a 02 	lds	r24, 0x027A
     c20:	80 93 72 02 	sts	0x0272, r24
  svm_data[5]=svo_data[5];
     c24:	80 91 7b 02 	lds	r24, 0x027B
     c28:	80 93 73 02 	sts	0x0273, r24
  svm_data[6]=svo_data[6];
     c2c:	80 91 7c 02 	lds	r24, 0x027C
     c30:	80 93 74 02 	sts	0x0274, r24
  svm_data[7]=svo_data[7];
     c34:	80 91 7d 02 	lds	r24, 0x027D
     c38:	80 93 75 02 	sts	0x0275, r24
  while(1)
  {	
    delay(sv_sp);
     c3c:	81 2f       	mov	r24, r17
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

    if(svm_data[0]>svf_data[0]){svm_data[0]--;}
     c44:	90 91 6e 02 	lds	r25, 0x026E
     c48:	80 91 7e 02 	lds	r24, 0x027E
     c4c:	89 17       	cp	r24, r25
     c4e:	20 f4       	brcc	.+8      	; 0xc58 <motion2+0x66>
     c50:	80 91 6e 02 	lds	r24, 0x026E
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <motion2+0x78>
    else if(svm_data[0]<svf_data[0]){svm_data[0]++;}
     c58:	90 91 6e 02 	lds	r25, 0x026E
     c5c:	80 91 7e 02 	lds	r24, 0x027E
     c60:	98 17       	cp	r25, r24
     c62:	28 f4       	brcc	.+10     	; 0xc6e <motion2+0x7c>
     c64:	80 91 6e 02 	lds	r24, 0x026E
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	80 93 6e 02 	sts	0x026E, r24
	if(svm_data[1]>svf_data[1]){svm_data[1]--;}
     c6e:	90 91 6f 02 	lds	r25, 0x026F
     c72:	80 91 7f 02 	lds	r24, 0x027F
     c76:	89 17       	cp	r24, r25
     c78:	20 f4       	brcc	.+8      	; 0xc82 <motion2+0x90>
     c7a:	80 91 6f 02 	lds	r24, 0x026F
     c7e:	81 50       	subi	r24, 0x01	; 1
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <motion2+0xa2>
    else if(svm_data[1]<svf_data[1]){svm_data[1]++;}
     c82:	90 91 6f 02 	lds	r25, 0x026F
     c86:	80 91 7f 02 	lds	r24, 0x027F
     c8a:	98 17       	cp	r25, r24
     c8c:	28 f4       	brcc	.+10     	; 0xc98 <motion2+0xa6>
     c8e:	80 91 6f 02 	lds	r24, 0x026F
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 6f 02 	sts	0x026F, r24
	if(svm_data[2]>svf_data[2]){svm_data[2]--;}
     c98:	90 91 70 02 	lds	r25, 0x0270
     c9c:	80 91 80 02 	lds	r24, 0x0280
     ca0:	89 17       	cp	r24, r25
     ca2:	20 f4       	brcc	.+8      	; 0xcac <motion2+0xba>
     ca4:	80 91 70 02 	lds	r24, 0x0270
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <motion2+0xcc>
    else if(svm_data[2]<svf_data[2]){svm_data[2]++;}
     cac:	90 91 70 02 	lds	r25, 0x0270
     cb0:	80 91 80 02 	lds	r24, 0x0280
     cb4:	98 17       	cp	r25, r24
     cb6:	28 f4       	brcc	.+10     	; 0xcc2 <motion2+0xd0>
     cb8:	80 91 70 02 	lds	r24, 0x0270
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 93 70 02 	sts	0x0270, r24
	if(svm_data[3]>svf_data[3]){svm_data[3]--;}
     cc2:	90 91 71 02 	lds	r25, 0x0271
     cc6:	80 91 81 02 	lds	r24, 0x0281
     cca:	89 17       	cp	r24, r25
     ccc:	20 f4       	brcc	.+8      	; 0xcd6 <motion2+0xe4>
     cce:	80 91 71 02 	lds	r24, 0x0271
     cd2:	81 50       	subi	r24, 0x01	; 1
     cd4:	09 c0       	rjmp	.+18     	; 0xce8 <motion2+0xf6>
    else if(svm_data[3]<svf_data[3]){svm_data[3]++;}
     cd6:	90 91 71 02 	lds	r25, 0x0271
     cda:	80 91 81 02 	lds	r24, 0x0281
     cde:	98 17       	cp	r25, r24
     ce0:	28 f4       	brcc	.+10     	; 0xcec <motion2+0xfa>
     ce2:	80 91 71 02 	lds	r24, 0x0271
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	80 93 71 02 	sts	0x0271, r24
    if(svm_data[4]>svf_data[4]){svm_data[4]--;}
     cec:	90 91 72 02 	lds	r25, 0x0272
     cf0:	80 91 82 02 	lds	r24, 0x0282
     cf4:	89 17       	cp	r24, r25
     cf6:	20 f4       	brcc	.+8      	; 0xd00 <motion2+0x10e>
     cf8:	80 91 72 02 	lds	r24, 0x0272
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <motion2+0x120>
    else if(svm_data[4]<svf_data[4]){svm_data[4]++;}
     d00:	90 91 72 02 	lds	r25, 0x0272
     d04:	80 91 82 02 	lds	r24, 0x0282
     d08:	98 17       	cp	r25, r24
     d0a:	28 f4       	brcc	.+10     	; 0xd16 <motion2+0x124>
     d0c:	80 91 72 02 	lds	r24, 0x0272
     d10:	8f 5f       	subi	r24, 0xFF	; 255
     d12:	80 93 72 02 	sts	0x0272, r24
	if(svm_data[5]>svf_data[5]){svm_data[5]--;}
     d16:	90 91 73 02 	lds	r25, 0x0273
     d1a:	80 91 83 02 	lds	r24, 0x0283
     d1e:	89 17       	cp	r24, r25
     d20:	20 f4       	brcc	.+8      	; 0xd2a <motion2+0x138>
     d22:	80 91 73 02 	lds	r24, 0x0273
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <motion2+0x14a>
    else if(svm_data[5]<svf_data[5]){svm_data[5]++;}
     d2a:	90 91 73 02 	lds	r25, 0x0273
     d2e:	80 91 83 02 	lds	r24, 0x0283
     d32:	98 17       	cp	r25, r24
     d34:	28 f4       	brcc	.+10     	; 0xd40 <motion2+0x14e>
     d36:	80 91 73 02 	lds	r24, 0x0273
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	80 93 73 02 	sts	0x0273, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
     d40:	90 91 74 02 	lds	r25, 0x0274
     d44:	80 91 84 02 	lds	r24, 0x0284
     d48:	89 17       	cp	r24, r25
     d4a:	20 f4       	brcc	.+8      	; 0xd54 <motion2+0x162>
     d4c:	80 91 74 02 	lds	r24, 0x0274
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <motion2+0x174>
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
     d54:	90 91 74 02 	lds	r25, 0x0274
     d58:	80 91 84 02 	lds	r24, 0x0284
     d5c:	98 17       	cp	r25, r24
     d5e:	28 f4       	brcc	.+10     	; 0xd6a <motion2+0x178>
     d60:	80 91 74 02 	lds	r24, 0x0274
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 74 02 	sts	0x0274, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
     d6a:	90 91 75 02 	lds	r25, 0x0275
     d6e:	80 91 85 02 	lds	r24, 0x0285
     d72:	89 17       	cp	r24, r25
     d74:	20 f4       	brcc	.+8      	; 0xd7e <motion2+0x18c>
     d76:	80 91 75 02 	lds	r24, 0x0275
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <motion2+0x19e>
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
     d7e:	90 91 75 02 	lds	r25, 0x0275
     d82:	80 91 85 02 	lds	r24, 0x0285
     d86:	98 17       	cp	r25, r24
     d88:	28 f4       	brcc	.+10     	; 0xd94 <motion2+0x1a2>
     d8a:	80 91 75 02 	lds	r24, 0x0275
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 93 75 02 	sts	0x0275, r24
	servo1(svm_data[0]);
     d94:	80 91 6e 02 	lds	r24, 0x026E
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
     d98:	80 93 1c 02 	sts	0x021C, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
     d9c:	80 91 6f 02 	lds	r24, 0x026F
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
     da0:	80 93 1d 02 	sts	0x021D, r24
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
     da4:	80 91 70 02 	lds	r24, 0x0270
void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
     da8:	80 93 1e 02 	sts	0x021E, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
     dac:	80 91 71 02 	lds	r24, 0x0271
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
     db0:	80 93 1f 02 	sts	0x021F, r24
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
     db4:	80 91 72 02 	lds	r24, 0x0272
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
     db8:	80 93 20 02 	sts	0x0220, r24
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
     dbc:	80 91 73 02 	lds	r24, 0x0273
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
     dc0:	80 93 21 02 	sts	0x0221, r24
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
     dc4:	80 91 74 02 	lds	r24, 0x0274
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
     dc8:	80 93 22 02 	sts	0x0222, r24
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
     dcc:	80 91 75 02 	lds	r24, 0x0275
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
void servo8(unsigned char ang)
{angle_8=ang;}
     dd0:	80 93 23 02 	sts	0x0223, r24
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    if((svm_data[0]==svf_data[0])&&(svm_data[1]==svf_data[1])&&(svm_data[2]==svf_data[2])&&(svm_data[3]==svf_data[3])&&(svm_data[4]==svf_data[4])&&(svm_data[5]==svf_data[5])&&(svm_data[6]==svf_data[6])&&(svm_data[7]==svf_data[7])){break;}
     dd4:	90 91 6e 02 	lds	r25, 0x026E
     dd8:	80 91 7e 02 	lds	r24, 0x027E
     ddc:	98 17       	cp	r25, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <motion2+0x1f0>
     de0:	2d cf       	rjmp	.-422    	; 0xc3c <motion2+0x4a>
     de2:	90 91 6f 02 	lds	r25, 0x026F
     de6:	80 91 7f 02 	lds	r24, 0x027F
     dea:	98 17       	cp	r25, r24
     dec:	09 f0       	breq	.+2      	; 0xdf0 <motion2+0x1fe>
     dee:	26 cf       	rjmp	.-436    	; 0xc3c <motion2+0x4a>
     df0:	90 91 70 02 	lds	r25, 0x0270
     df4:	80 91 80 02 	lds	r24, 0x0280
     df8:	98 17       	cp	r25, r24
     dfa:	09 f0       	breq	.+2      	; 0xdfe <motion2+0x20c>
     dfc:	1f cf       	rjmp	.-450    	; 0xc3c <motion2+0x4a>
     dfe:	90 91 71 02 	lds	r25, 0x0271
     e02:	80 91 81 02 	lds	r24, 0x0281
     e06:	98 17       	cp	r25, r24
     e08:	09 f0       	breq	.+2      	; 0xe0c <motion2+0x21a>
     e0a:	18 cf       	rjmp	.-464    	; 0xc3c <motion2+0x4a>
     e0c:	90 91 72 02 	lds	r25, 0x0272
     e10:	80 91 82 02 	lds	r24, 0x0282
     e14:	98 17       	cp	r25, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <motion2+0x228>
     e18:	11 cf       	rjmp	.-478    	; 0xc3c <motion2+0x4a>
     e1a:	90 91 73 02 	lds	r25, 0x0273
     e1e:	80 91 83 02 	lds	r24, 0x0283
     e22:	98 17       	cp	r25, r24
     e24:	09 f0       	breq	.+2      	; 0xe28 <motion2+0x236>
     e26:	0a cf       	rjmp	.-492    	; 0xc3c <motion2+0x4a>
     e28:	90 91 74 02 	lds	r25, 0x0274
     e2c:	80 91 84 02 	lds	r24, 0x0284
     e30:	98 17       	cp	r25, r24
     e32:	09 f0       	breq	.+2      	; 0xe36 <motion2+0x244>
     e34:	03 cf       	rjmp	.-506    	; 0xc3c <motion2+0x4a>
     e36:	90 91 75 02 	lds	r25, 0x0275
     e3a:	80 91 85 02 	lds	r24, 0x0285
     e3e:	98 17       	cp	r25, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <motion2+0x252>
     e42:	fc ce       	rjmp	.-520    	; 0xc3c <motion2+0x4a>
  }
  delay(del);
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
  svo_data[0]=svf_data[0];
     e4a:	80 91 7e 02 	lds	r24, 0x027E
     e4e:	80 93 76 02 	sts	0x0276, r24
  svo_data[1]=svf_data[1];
     e52:	80 91 7f 02 	lds	r24, 0x027F
     e56:	80 93 77 02 	sts	0x0277, r24
  svo_data[2]=svf_data[2];
     e5a:	80 91 80 02 	lds	r24, 0x0280
     e5e:	80 93 78 02 	sts	0x0278, r24
  svo_data[3]=svf_data[3];
     e62:	80 91 81 02 	lds	r24, 0x0281
     e66:	80 93 79 02 	sts	0x0279, r24
  svo_data[4]=svf_data[4];
     e6a:	80 91 82 02 	lds	r24, 0x0282
     e6e:	80 93 7a 02 	sts	0x027A, r24
  svo_data[5]=svf_data[5];
     e72:	80 91 83 02 	lds	r24, 0x0283
     e76:	80 93 7b 02 	sts	0x027B, r24
  svo_data[6]=svf_data[6];
     e7a:	80 91 84 02 	lds	r24, 0x0284
     e7e:	80 93 7c 02 	sts	0x027C, r24
  svo_data[7]=svf_data[7];
     e82:	80 91 85 02 	lds	r24, 0x0285
     e86:	80 93 7d 02 	sts	0x027D, r24
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	08 95       	ret

00000e92 <motion3>:
void motion3(unsigned char sv_sp, unsigned int del)
{
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	18 2f       	mov	r17, r24
     e9a:	eb 01       	movw	r28, r22
    svm_data[0]=svo_data[0];
     e9c:	80 91 76 02 	lds	r24, 0x0276
     ea0:	80 93 6e 02 	sts	0x026E, r24
  svm_data[1]=svo_data[1];
     ea4:	80 91 77 02 	lds	r24, 0x0277
     ea8:	80 93 6f 02 	sts	0x026F, r24
  svm_data[2]=svo_data[2];
     eac:	80 91 78 02 	lds	r24, 0x0278
     eb0:	80 93 70 02 	sts	0x0270, r24
  svm_data[3]=svo_data[3];
     eb4:	80 91 79 02 	lds	r24, 0x0279
     eb8:	80 93 71 02 	sts	0x0271, r24
  svm_data[4]=svo_data[4];
     ebc:	80 91 7a 02 	lds	r24, 0x027A
     ec0:	80 93 72 02 	sts	0x0272, r24
  svm_data[5]=svo_data[5];
     ec4:	80 91 7b 02 	lds	r24, 0x027B
     ec8:	80 93 73 02 	sts	0x0273, r24
  svm_data[6]=svo_data[6];
     ecc:	80 91 7c 02 	lds	r24, 0x027C
     ed0:	80 93 74 02 	sts	0x0274, r24
  svm_data[7]=svo_data[7];
     ed4:	80 91 7d 02 	lds	r24, 0x027D
     ed8:	80 93 75 02 	sts	0x0275, r24
  while(1)
  {	
    delay(sv_sp);
     edc:	81 2f       	mov	r24, r17
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

    if(svm_data[0]>svf_data[0]){svm_data[0]--;}
     ee4:	90 91 6e 02 	lds	r25, 0x026E
     ee8:	80 91 7e 02 	lds	r24, 0x027E
     eec:	89 17       	cp	r24, r25
     eee:	20 f4       	brcc	.+8      	; 0xef8 <motion3+0x66>
     ef0:	80 91 6e 02 	lds	r24, 0x026E
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	09 c0       	rjmp	.+18     	; 0xf0a <motion3+0x78>
    else if(svm_data[0]<svf_data[0]){svm_data[0]++;}
     ef8:	90 91 6e 02 	lds	r25, 0x026E
     efc:	80 91 7e 02 	lds	r24, 0x027E
     f00:	98 17       	cp	r25, r24
     f02:	28 f4       	brcc	.+10     	; 0xf0e <motion3+0x7c>
     f04:	80 91 6e 02 	lds	r24, 0x026E
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 93 6e 02 	sts	0x026E, r24
	if(svm_data[1]>svf_data[1]){svm_data[1]--;}
     f0e:	90 91 6f 02 	lds	r25, 0x026F
     f12:	80 91 7f 02 	lds	r24, 0x027F
     f16:	89 17       	cp	r24, r25
     f18:	20 f4       	brcc	.+8      	; 0xf22 <motion3+0x90>
     f1a:	80 91 6f 02 	lds	r24, 0x026F
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <motion3+0xa2>
    else if(svm_data[1]<svf_data[1]){svm_data[1]++;}
     f22:	90 91 6f 02 	lds	r25, 0x026F
     f26:	80 91 7f 02 	lds	r24, 0x027F
     f2a:	98 17       	cp	r25, r24
     f2c:	28 f4       	brcc	.+10     	; 0xf38 <motion3+0xa6>
     f2e:	80 91 6f 02 	lds	r24, 0x026F
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	80 93 6f 02 	sts	0x026F, r24
	if(svm_data[2]>svf_data[2]){svm_data[2]--;}
     f38:	90 91 70 02 	lds	r25, 0x0270
     f3c:	80 91 80 02 	lds	r24, 0x0280
     f40:	89 17       	cp	r24, r25
     f42:	20 f4       	brcc	.+8      	; 0xf4c <motion3+0xba>
     f44:	80 91 70 02 	lds	r24, 0x0270
     f48:	81 50       	subi	r24, 0x01	; 1
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <motion3+0xcc>
    else if(svm_data[2]<svf_data[2]){svm_data[2]++;}
     f4c:	90 91 70 02 	lds	r25, 0x0270
     f50:	80 91 80 02 	lds	r24, 0x0280
     f54:	98 17       	cp	r25, r24
     f56:	28 f4       	brcc	.+10     	; 0xf62 <motion3+0xd0>
     f58:	80 91 70 02 	lds	r24, 0x0270
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 70 02 	sts	0x0270, r24
	if(svm_data[3]>svf_data[3]){svm_data[3]--;}
     f62:	90 91 71 02 	lds	r25, 0x0271
     f66:	80 91 81 02 	lds	r24, 0x0281
     f6a:	89 17       	cp	r24, r25
     f6c:	20 f4       	brcc	.+8      	; 0xf76 <motion3+0xe4>
     f6e:	80 91 71 02 	lds	r24, 0x0271
     f72:	81 50       	subi	r24, 0x01	; 1
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <motion3+0xf6>
    else if(svm_data[3]<svf_data[3]){svm_data[3]++;}
     f76:	90 91 71 02 	lds	r25, 0x0271
     f7a:	80 91 81 02 	lds	r24, 0x0281
     f7e:	98 17       	cp	r25, r24
     f80:	28 f4       	brcc	.+10     	; 0xf8c <motion3+0xfa>
     f82:	80 91 71 02 	lds	r24, 0x0271
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	80 93 71 02 	sts	0x0271, r24
    if(svm_data[4]>svf_data[4]){svm_data[4]--;}
     f8c:	90 91 72 02 	lds	r25, 0x0272
     f90:	80 91 82 02 	lds	r24, 0x0282
     f94:	89 17       	cp	r24, r25
     f96:	20 f4       	brcc	.+8      	; 0xfa0 <motion3+0x10e>
     f98:	80 91 72 02 	lds	r24, 0x0272
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <motion3+0x120>
    else if(svm_data[4]<svf_data[4]){svm_data[4]++;}
     fa0:	90 91 72 02 	lds	r25, 0x0272
     fa4:	80 91 82 02 	lds	r24, 0x0282
     fa8:	98 17       	cp	r25, r24
     faa:	28 f4       	brcc	.+10     	; 0xfb6 <motion3+0x124>
     fac:	80 91 72 02 	lds	r24, 0x0272
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 72 02 	sts	0x0272, r24
	if(svm_data[5]>svf_data[5]){svm_data[5]--;}
     fb6:	90 91 73 02 	lds	r25, 0x0273
     fba:	80 91 83 02 	lds	r24, 0x0283
     fbe:	89 17       	cp	r24, r25
     fc0:	20 f4       	brcc	.+8      	; 0xfca <motion3+0x138>
     fc2:	80 91 73 02 	lds	r24, 0x0273
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <motion3+0x14a>
    else if(svm_data[5]<svf_data[5]){svm_data[5]++;}
     fca:	90 91 73 02 	lds	r25, 0x0273
     fce:	80 91 83 02 	lds	r24, 0x0283
     fd2:	98 17       	cp	r25, r24
     fd4:	28 f4       	brcc	.+10     	; 0xfe0 <motion3+0x14e>
     fd6:	80 91 73 02 	lds	r24, 0x0273
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	80 93 73 02 	sts	0x0273, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
     fe0:	90 91 74 02 	lds	r25, 0x0274
     fe4:	80 91 84 02 	lds	r24, 0x0284
     fe8:	89 17       	cp	r24, r25
     fea:	20 f4       	brcc	.+8      	; 0xff4 <motion3+0x162>
     fec:	80 91 74 02 	lds	r24, 0x0274
     ff0:	81 50       	subi	r24, 0x01	; 1
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <motion3+0x174>
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
     ff4:	90 91 74 02 	lds	r25, 0x0274
     ff8:	80 91 84 02 	lds	r24, 0x0284
     ffc:	98 17       	cp	r25, r24
     ffe:	28 f4       	brcc	.+10     	; 0x100a <motion3+0x178>
    1000:	80 91 74 02 	lds	r24, 0x0274
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 74 02 	sts	0x0274, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    100a:	90 91 75 02 	lds	r25, 0x0275
    100e:	80 91 85 02 	lds	r24, 0x0285
    1012:	89 17       	cp	r24, r25
    1014:	20 f4       	brcc	.+8      	; 0x101e <motion3+0x18c>
    1016:	80 91 75 02 	lds	r24, 0x0275
    101a:	81 50       	subi	r24, 0x01	; 1
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <motion3+0x19e>
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
    101e:	90 91 75 02 	lds	r25, 0x0275
    1022:	80 91 85 02 	lds	r24, 0x0285
    1026:	98 17       	cp	r25, r24
    1028:	28 f4       	brcc	.+10     	; 0x1034 <motion3+0x1a2>
    102a:	80 91 75 02 	lds	r24, 0x0275
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	80 93 75 02 	sts	0x0275, r24
	servo1(svm_data[0]);
    1034:	80 91 6e 02 	lds	r24, 0x026E
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
    1038:	80 93 1c 02 	sts	0x021C, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
    103c:	80 91 6f 02 	lds	r24, 0x026F
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
    1040:	80 93 1d 02 	sts	0x021D, r24
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    1044:	80 91 70 02 	lds	r24, 0x0270
void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
    1048:	80 93 1e 02 	sts	0x021E, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
    104c:	80 91 71 02 	lds	r24, 0x0271
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
    1050:	80 93 1f 02 	sts	0x021F, r24
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    1054:	80 91 72 02 	lds	r24, 0x0272
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
    1058:	80 93 20 02 	sts	0x0220, r24
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
    105c:	80 91 73 02 	lds	r24, 0x0273
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
    1060:	80 93 21 02 	sts	0x0221, r24
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    1064:	80 91 74 02 	lds	r24, 0x0274
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
    1068:	80 93 22 02 	sts	0x0222, r24
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    106c:	80 91 75 02 	lds	r24, 0x0275
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
void servo8(unsigned char ang)
{angle_8=ang;}
    1070:	80 93 23 02 	sts	0x0223, r24
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    if((svm_data[0]==svf_data[0])&&(svm_data[1]==svf_data[1])&&(svm_data[2]==svf_data[2])&&(svm_data[3]==svf_data[3])&&(svm_data[4]==svf_data[4])&&(svm_data[5]==svf_data[5])&&(svm_data[6]==svf_data[6])&&(svm_data[7]==svf_data[7])){break;}
    1074:	90 91 6e 02 	lds	r25, 0x026E
    1078:	80 91 7e 02 	lds	r24, 0x027E
    107c:	98 17       	cp	r25, r24
    107e:	09 f0       	breq	.+2      	; 0x1082 <motion3+0x1f0>
    1080:	2d cf       	rjmp	.-422    	; 0xedc <motion3+0x4a>
    1082:	90 91 6f 02 	lds	r25, 0x026F
    1086:	80 91 7f 02 	lds	r24, 0x027F
    108a:	98 17       	cp	r25, r24
    108c:	09 f0       	breq	.+2      	; 0x1090 <motion3+0x1fe>
    108e:	26 cf       	rjmp	.-436    	; 0xedc <motion3+0x4a>
    1090:	90 91 70 02 	lds	r25, 0x0270
    1094:	80 91 80 02 	lds	r24, 0x0280
    1098:	98 17       	cp	r25, r24
    109a:	09 f0       	breq	.+2      	; 0x109e <motion3+0x20c>
    109c:	1f cf       	rjmp	.-450    	; 0xedc <motion3+0x4a>
    109e:	90 91 71 02 	lds	r25, 0x0271
    10a2:	80 91 81 02 	lds	r24, 0x0281
    10a6:	98 17       	cp	r25, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <motion3+0x21a>
    10aa:	18 cf       	rjmp	.-464    	; 0xedc <motion3+0x4a>
    10ac:	90 91 72 02 	lds	r25, 0x0272
    10b0:	80 91 82 02 	lds	r24, 0x0282
    10b4:	98 17       	cp	r25, r24
    10b6:	09 f0       	breq	.+2      	; 0x10ba <motion3+0x228>
    10b8:	11 cf       	rjmp	.-478    	; 0xedc <motion3+0x4a>
    10ba:	90 91 73 02 	lds	r25, 0x0273
    10be:	80 91 83 02 	lds	r24, 0x0283
    10c2:	98 17       	cp	r25, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <motion3+0x236>
    10c6:	0a cf       	rjmp	.-492    	; 0xedc <motion3+0x4a>
    10c8:	90 91 74 02 	lds	r25, 0x0274
    10cc:	80 91 84 02 	lds	r24, 0x0284
    10d0:	98 17       	cp	r25, r24
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <motion3+0x244>
    10d4:	03 cf       	rjmp	.-506    	; 0xedc <motion3+0x4a>
    10d6:	90 91 75 02 	lds	r25, 0x0275
    10da:	80 91 85 02 	lds	r24, 0x0285
    10de:	98 17       	cp	r25, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <motion3+0x252>
    10e2:	fc ce       	rjmp	.-520    	; 0xedc <motion3+0x4a>
  }
  delay(del);
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
  svo_data[0]=svf_data[0];
    10ea:	80 91 7e 02 	lds	r24, 0x027E
    10ee:	80 93 76 02 	sts	0x0276, r24
  svo_data[1]=svf_data[1];
    10f2:	80 91 7f 02 	lds	r24, 0x027F
    10f6:	80 93 77 02 	sts	0x0277, r24
  svo_data[2]=svf_data[2];
    10fa:	80 91 80 02 	lds	r24, 0x0280
    10fe:	80 93 78 02 	sts	0x0278, r24
  svo_data[3]=svf_data[3];
    1102:	80 91 81 02 	lds	r24, 0x0281
    1106:	80 93 79 02 	sts	0x0279, r24
  svo_data[4]=svf_data[4];
    110a:	80 91 82 02 	lds	r24, 0x0282
    110e:	80 93 7a 02 	sts	0x027A, r24
  svo_data[5]=svf_data[5];
    1112:	80 91 83 02 	lds	r24, 0x0283
    1116:	80 93 7b 02 	sts	0x027B, r24
  svo_data[6]=svf_data[6];
    111a:	80 91 84 02 	lds	r24, 0x0284
    111e:	80 93 7c 02 	sts	0x027C, r24
  svo_data[7]=svf_data[7];
    1122:	80 91 85 02 	lds	r24, 0x0285
    1126:	80 93 7d 02 	sts	0x027D, r24
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	08 95       	ret

00001132 <motion4>:
void motion4(unsigned char sv_sp, unsigned int del)
{
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	18 2f       	mov	r17, r24
    113a:	eb 01       	movw	r28, r22
    svm_data[0]=svo_data[0];
    113c:	80 91 76 02 	lds	r24, 0x0276
    1140:	80 93 6e 02 	sts	0x026E, r24
  svm_data[1]=svo_data[1];
    1144:	80 91 77 02 	lds	r24, 0x0277
    1148:	80 93 6f 02 	sts	0x026F, r24
  svm_data[2]=svo_data[2];
    114c:	80 91 78 02 	lds	r24, 0x0278
    1150:	80 93 70 02 	sts	0x0270, r24
  svm_data[3]=svo_data[3];
    1154:	80 91 79 02 	lds	r24, 0x0279
    1158:	80 93 71 02 	sts	0x0271, r24
  svm_data[4]=svo_data[4];
    115c:	80 91 7a 02 	lds	r24, 0x027A
    1160:	80 93 72 02 	sts	0x0272, r24
  svm_data[5]=svo_data[5];
    1164:	80 91 7b 02 	lds	r24, 0x027B
    1168:	80 93 73 02 	sts	0x0273, r24
  svm_data[6]=svo_data[6];
    116c:	80 91 7c 02 	lds	r24, 0x027C
    1170:	80 93 74 02 	sts	0x0274, r24
  svm_data[7]=svo_data[7];
    1174:	80 91 7d 02 	lds	r24, 0x027D
    1178:	80 93 75 02 	sts	0x0275, r24
  while(1)
  {	
    delay(sv_sp);
    117c:	81 2f       	mov	r24, r17
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

    if(svm_data[0]>svf_data[0]){svm_data[0]--;}
    1184:	90 91 6e 02 	lds	r25, 0x026E
    1188:	80 91 7e 02 	lds	r24, 0x027E
    118c:	89 17       	cp	r24, r25
    118e:	20 f4       	brcc	.+8      	; 0x1198 <motion4+0x66>
    1190:	80 91 6e 02 	lds	r24, 0x026E
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <motion4+0x78>
    else if(svm_data[0]<svf_data[0]){svm_data[0]++;}
    1198:	90 91 6e 02 	lds	r25, 0x026E
    119c:	80 91 7e 02 	lds	r24, 0x027E
    11a0:	98 17       	cp	r25, r24
    11a2:	28 f4       	brcc	.+10     	; 0x11ae <motion4+0x7c>
    11a4:	80 91 6e 02 	lds	r24, 0x026E
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	80 93 6e 02 	sts	0x026E, r24
	if(svm_data[1]>svf_data[1]){svm_data[1]--;}
    11ae:	90 91 6f 02 	lds	r25, 0x026F
    11b2:	80 91 7f 02 	lds	r24, 0x027F
    11b6:	89 17       	cp	r24, r25
    11b8:	20 f4       	brcc	.+8      	; 0x11c2 <motion4+0x90>
    11ba:	80 91 6f 02 	lds	r24, 0x026F
    11be:	81 50       	subi	r24, 0x01	; 1
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <motion4+0xa2>
    else if(svm_data[1]<svf_data[1]){svm_data[1]++;}
    11c2:	90 91 6f 02 	lds	r25, 0x026F
    11c6:	80 91 7f 02 	lds	r24, 0x027F
    11ca:	98 17       	cp	r25, r24
    11cc:	28 f4       	brcc	.+10     	; 0x11d8 <motion4+0xa6>
    11ce:	80 91 6f 02 	lds	r24, 0x026F
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 6f 02 	sts	0x026F, r24
	if(svm_data[2]>svf_data[2]){svm_data[2]--;}
    11d8:	90 91 70 02 	lds	r25, 0x0270
    11dc:	80 91 80 02 	lds	r24, 0x0280
    11e0:	89 17       	cp	r24, r25
    11e2:	20 f4       	brcc	.+8      	; 0x11ec <motion4+0xba>
    11e4:	80 91 70 02 	lds	r24, 0x0270
    11e8:	81 50       	subi	r24, 0x01	; 1
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <motion4+0xcc>
    else if(svm_data[2]<svf_data[2]){svm_data[2]++;}
    11ec:	90 91 70 02 	lds	r25, 0x0270
    11f0:	80 91 80 02 	lds	r24, 0x0280
    11f4:	98 17       	cp	r25, r24
    11f6:	28 f4       	brcc	.+10     	; 0x1202 <motion4+0xd0>
    11f8:	80 91 70 02 	lds	r24, 0x0270
    11fc:	8f 5f       	subi	r24, 0xFF	; 255
    11fe:	80 93 70 02 	sts	0x0270, r24
	if(svm_data[3]>svf_data[3]){svm_data[3]--;}
    1202:	90 91 71 02 	lds	r25, 0x0271
    1206:	80 91 81 02 	lds	r24, 0x0281
    120a:	89 17       	cp	r24, r25
    120c:	20 f4       	brcc	.+8      	; 0x1216 <motion4+0xe4>
    120e:	80 91 71 02 	lds	r24, 0x0271
    1212:	81 50       	subi	r24, 0x01	; 1
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <motion4+0xf6>
    else if(svm_data[3]<svf_data[3]){svm_data[3]++;}
    1216:	90 91 71 02 	lds	r25, 0x0271
    121a:	80 91 81 02 	lds	r24, 0x0281
    121e:	98 17       	cp	r25, r24
    1220:	28 f4       	brcc	.+10     	; 0x122c <motion4+0xfa>
    1222:	80 91 71 02 	lds	r24, 0x0271
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 71 02 	sts	0x0271, r24
    if(svm_data[4]>svf_data[4]){svm_data[4]--;}
    122c:	90 91 72 02 	lds	r25, 0x0272
    1230:	80 91 82 02 	lds	r24, 0x0282
    1234:	89 17       	cp	r24, r25
    1236:	20 f4       	brcc	.+8      	; 0x1240 <motion4+0x10e>
    1238:	80 91 72 02 	lds	r24, 0x0272
    123c:	81 50       	subi	r24, 0x01	; 1
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <motion4+0x120>
    else if(svm_data[4]<svf_data[4]){svm_data[4]++;}
    1240:	90 91 72 02 	lds	r25, 0x0272
    1244:	80 91 82 02 	lds	r24, 0x0282
    1248:	98 17       	cp	r25, r24
    124a:	28 f4       	brcc	.+10     	; 0x1256 <motion4+0x124>
    124c:	80 91 72 02 	lds	r24, 0x0272
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	80 93 72 02 	sts	0x0272, r24
	if(svm_data[5]>svf_data[5]){svm_data[5]--;}
    1256:	90 91 73 02 	lds	r25, 0x0273
    125a:	80 91 83 02 	lds	r24, 0x0283
    125e:	89 17       	cp	r24, r25
    1260:	20 f4       	brcc	.+8      	; 0x126a <motion4+0x138>
    1262:	80 91 73 02 	lds	r24, 0x0273
    1266:	81 50       	subi	r24, 0x01	; 1
    1268:	09 c0       	rjmp	.+18     	; 0x127c <motion4+0x14a>
    else if(svm_data[5]<svf_data[5]){svm_data[5]++;}
    126a:	90 91 73 02 	lds	r25, 0x0273
    126e:	80 91 83 02 	lds	r24, 0x0283
    1272:	98 17       	cp	r25, r24
    1274:	28 f4       	brcc	.+10     	; 0x1280 <motion4+0x14e>
    1276:	80 91 73 02 	lds	r24, 0x0273
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	80 93 73 02 	sts	0x0273, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
    1280:	90 91 74 02 	lds	r25, 0x0274
    1284:	80 91 84 02 	lds	r24, 0x0284
    1288:	89 17       	cp	r24, r25
    128a:	20 f4       	brcc	.+8      	; 0x1294 <motion4+0x162>
    128c:	80 91 74 02 	lds	r24, 0x0274
    1290:	81 50       	subi	r24, 0x01	; 1
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <motion4+0x174>
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
    1294:	90 91 74 02 	lds	r25, 0x0274
    1298:	80 91 84 02 	lds	r24, 0x0284
    129c:	98 17       	cp	r25, r24
    129e:	28 f4       	brcc	.+10     	; 0x12aa <motion4+0x178>
    12a0:	80 91 74 02 	lds	r24, 0x0274
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	80 93 74 02 	sts	0x0274, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    12aa:	90 91 75 02 	lds	r25, 0x0275
    12ae:	80 91 85 02 	lds	r24, 0x0285
    12b2:	89 17       	cp	r24, r25
    12b4:	20 f4       	brcc	.+8      	; 0x12be <motion4+0x18c>
    12b6:	80 91 75 02 	lds	r24, 0x0275
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <motion4+0x19e>
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
    12be:	90 91 75 02 	lds	r25, 0x0275
    12c2:	80 91 85 02 	lds	r24, 0x0285
    12c6:	98 17       	cp	r25, r24
    12c8:	28 f4       	brcc	.+10     	; 0x12d4 <motion4+0x1a2>
    12ca:	80 91 75 02 	lds	r24, 0x0275
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	80 93 75 02 	sts	0x0275, r24
	servo1(svm_data[0]);
    12d4:	80 91 6e 02 	lds	r24, 0x026E
void motion2(unsigned char sv_sp, unsigned int del);
void motion3(unsigned char sv_sp, unsigned int del);
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
    12d8:	80 93 1c 02 	sts	0x021C, r24
    if(svm_data[6]>svf_data[6]){svm_data[6]--;}
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
    12dc:	80 91 6f 02 	lds	r24, 0x026F
void motion4(unsigned char sv_sp, unsigned int del);

void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
    12e0:	80 93 1d 02 	sts	0x021D, r24
    else if(svm_data[6]<svf_data[6]){svm_data[6]++;}
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    12e4:	80 91 70 02 	lds	r24, 0x0270
void servo1(unsigned char ang)
{angle_1=ang;}
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
    12e8:	80 93 1e 02 	sts	0x021E, r24
	if(svm_data[7]>svf_data[7]){svm_data[7]--;}
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
    12ec:	80 91 71 02 	lds	r24, 0x0271
void servo2(unsigned char ang)
{angle_2=ang;}
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
    12f0:	80 93 1f 02 	sts	0x021F, r24
    else if(svm_data[7]<svf_data[7]){svm_data[7]++;}
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    12f4:	80 91 72 02 	lds	r24, 0x0272
void servo3(unsigned char ang)
{angle_3=ang;}
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
    12f8:	80 93 20 02 	sts	0x0220, r24
	servo1(svm_data[0]);
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
    12fc:	80 91 73 02 	lds	r24, 0x0273
void servo4(unsigned char ang)
{angle_4=ang;}
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
    1300:	80 93 21 02 	sts	0x0221, r24
    servo2(svm_data[1]);
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    1304:	80 91 74 02 	lds	r24, 0x0274
void servo5(unsigned char ang)
{angle_5=ang;}
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
    1308:	80 93 22 02 	sts	0x0222, r24
	servo3(svm_data[2]);
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    130c:	80 91 75 02 	lds	r24, 0x0275
void servo6(unsigned char ang)
{angle_6=ang;}
void servo7(unsigned char ang)
{angle_7=ang;}
void servo8(unsigned char ang)
{angle_8=ang;}
    1310:	80 93 23 02 	sts	0x0223, r24
    servo4(svm_data[3]);
	servo5(svm_data[4]);
    servo6(svm_data[5]);
	servo7(svm_data[6]);
    servo8(svm_data[7]);
    if((svm_data[0]==svf_data[0])&&(svm_data[1]==svf_data[1])&&(svm_data[2]==svf_data[2])&&(svm_data[3]==svf_data[3])&&(svm_data[4]==svf_data[4])&&(svm_data[5]==svf_data[5])&&(svm_data[6]==svf_data[6])&&(svm_data[7]==svf_data[7])){break;}
    1314:	90 91 6e 02 	lds	r25, 0x026E
    1318:	80 91 7e 02 	lds	r24, 0x027E
    131c:	98 17       	cp	r25, r24
    131e:	09 f0       	breq	.+2      	; 0x1322 <motion4+0x1f0>
    1320:	2d cf       	rjmp	.-422    	; 0x117c <motion4+0x4a>
    1322:	90 91 6f 02 	lds	r25, 0x026F
    1326:	80 91 7f 02 	lds	r24, 0x027F
    132a:	98 17       	cp	r25, r24
    132c:	09 f0       	breq	.+2      	; 0x1330 <motion4+0x1fe>
    132e:	26 cf       	rjmp	.-436    	; 0x117c <motion4+0x4a>
    1330:	90 91 70 02 	lds	r25, 0x0270
    1334:	80 91 80 02 	lds	r24, 0x0280
    1338:	98 17       	cp	r25, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <motion4+0x20c>
    133c:	1f cf       	rjmp	.-450    	; 0x117c <motion4+0x4a>
    133e:	90 91 71 02 	lds	r25, 0x0271
    1342:	80 91 81 02 	lds	r24, 0x0281
    1346:	98 17       	cp	r25, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <motion4+0x21a>
    134a:	18 cf       	rjmp	.-464    	; 0x117c <motion4+0x4a>
    134c:	90 91 72 02 	lds	r25, 0x0272
    1350:	80 91 82 02 	lds	r24, 0x0282
    1354:	98 17       	cp	r25, r24
    1356:	09 f0       	breq	.+2      	; 0x135a <motion4+0x228>
    1358:	11 cf       	rjmp	.-478    	; 0x117c <motion4+0x4a>
    135a:	90 91 73 02 	lds	r25, 0x0273
    135e:	80 91 83 02 	lds	r24, 0x0283
    1362:	98 17       	cp	r25, r24
    1364:	09 f0       	breq	.+2      	; 0x1368 <motion4+0x236>
    1366:	0a cf       	rjmp	.-492    	; 0x117c <motion4+0x4a>
    1368:	90 91 74 02 	lds	r25, 0x0274
    136c:	80 91 84 02 	lds	r24, 0x0284
    1370:	98 17       	cp	r25, r24
    1372:	09 f0       	breq	.+2      	; 0x1376 <motion4+0x244>
    1374:	03 cf       	rjmp	.-506    	; 0x117c <motion4+0x4a>
    1376:	90 91 75 02 	lds	r25, 0x0275
    137a:	80 91 85 02 	lds	r24, 0x0285
    137e:	98 17       	cp	r25, r24
    1380:	09 f0       	breq	.+2      	; 0x1384 <motion4+0x252>
    1382:	fc ce       	rjmp	.-520    	; 0x117c <motion4+0x4a>
  }
  delay(del);
    1384:	ce 01       	movw	r24, r28
    1386:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
  svo_data[0]=svf_data[0];
    138a:	80 91 7e 02 	lds	r24, 0x027E
    138e:	80 93 76 02 	sts	0x0276, r24
  svo_data[1]=svf_data[1];
    1392:	80 91 7f 02 	lds	r24, 0x027F
    1396:	80 93 77 02 	sts	0x0277, r24
  svo_data[2]=svf_data[2];
    139a:	80 91 80 02 	lds	r24, 0x0280
    139e:	80 93 78 02 	sts	0x0278, r24
  svo_data[3]=svf_data[3];
    13a2:	80 91 81 02 	lds	r24, 0x0281
    13a6:	80 93 79 02 	sts	0x0279, r24
  svo_data[4]=svf_data[4];
    13aa:	80 91 82 02 	lds	r24, 0x0282
    13ae:	80 93 7a 02 	sts	0x027A, r24
  svo_data[5]=svf_data[5];
    13b2:	80 91 83 02 	lds	r24, 0x0283
    13b6:	80 93 7b 02 	sts	0x027B, r24
  svo_data[6]=svf_data[6];
    13ba:	80 91 84 02 	lds	r24, 0x0284
    13be:	80 93 7c 02 	sts	0x027C, r24
  svo_data[7]=svf_data[7];
    13c2:	80 91 85 02 	lds	r24, 0x0285
    13c6:	80 93 7d 02 	sts	0x027D, r24
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	08 95       	ret

000013d2 <__vector_14>:
volatile unsigned char rm_dir=0;
volatile unsigned char sp[3][22]={{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};


ISR(TIMER1_OVF_vect)//1ms
{
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
TCNT1H=0xFF;
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	8d bd       	out	0x2d, r24	; 45
TCNT1L=0xE0;
    13e8:	80 ee       	ldi	r24, 0xE0	; 224
    13ea:	8c bd       	out	0x2c, r24	; 44

    if(mt_count<=l_motor_speed)
    13ec:	20 91 24 02 	lds	r18, 0x0224
    13f0:	30 91 25 02 	lds	r19, 0x0225
    13f4:	80 91 26 02 	lds	r24, 0x0226
    13f8:	90 91 27 02 	lds	r25, 0x0227
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	a0 f0       	brcs	.+40     	; 0x142a <__vector_14+0x58>
	{ 
	  if(lm_dir==1){PORTA&=~0x04;PORTA|=0x03;}
    1402:	80 91 2a 02 	lds	r24, 0x022A
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	21 f4       	brne	.+8      	; 0x1412 <__vector_14+0x40>
    140a:	da 98       	cbi	0x1b, 2	; 27
    140c:	8b b3       	in	r24, 0x1b	; 27
    140e:	83 60       	ori	r24, 0x03	; 3
    1410:	0e c0       	rjmp	.+28     	; 0x142e <__vector_14+0x5c>
	  else if(lm_dir==2){PORTA&=~0x01;PORTA|=0x06;}
    1412:	80 91 2a 02 	lds	r24, 0x022A
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	21 f4       	brne	.+8      	; 0x1422 <__vector_14+0x50>
    141a:	d8 98       	cbi	0x1b, 0	; 27
    141c:	8b b3       	in	r24, 0x1b	; 27
    141e:	86 60       	ori	r24, 0x06	; 6
    1420:	06 c0       	rjmp	.+12     	; 0x142e <__vector_14+0x5c>
	  else if(lm_dir==3){PORTA|=0x07;}
    1422:	80 91 2a 02 	lds	r24, 0x022A
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	19 f4       	brne	.+6      	; 0x1430 <__vector_14+0x5e>
	}
	else {PORTA|=0x07;}
    142a:	8b b3       	in	r24, 0x1b	; 27
    142c:	87 60       	ori	r24, 0x07	; 7
    142e:	8b bb       	out	0x1b, r24	; 27

	if(mt_count<=r_motor_speed)
    1430:	20 91 24 02 	lds	r18, 0x0224
    1434:	30 91 25 02 	lds	r19, 0x0225
    1438:	80 91 28 02 	lds	r24, 0x0228
    143c:	90 91 29 02 	lds	r25, 0x0229
    1440:	82 17       	cp	r24, r18
    1442:	93 07       	cpc	r25, r19
    1444:	a0 f0       	brcs	.+40     	; 0x146e <__vector_14+0x9c>
	{ 
	  if(rm_dir==1){PORTA&=~0x20;PORTA|=0x18;}
    1446:	80 91 2b 02 	lds	r24, 0x022B
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	21 f4       	brne	.+8      	; 0x1456 <__vector_14+0x84>
    144e:	dd 98       	cbi	0x1b, 5	; 27
    1450:	8b b3       	in	r24, 0x1b	; 27
    1452:	88 61       	ori	r24, 0x18	; 24
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <__vector_14+0xa0>
	  else if(rm_dir==2){PORTA&=~0x10;PORTA|=0x28;}
    1456:	80 91 2b 02 	lds	r24, 0x022B
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	21 f4       	brne	.+8      	; 0x1466 <__vector_14+0x94>
    145e:	dc 98       	cbi	0x1b, 4	; 27
    1460:	8b b3       	in	r24, 0x1b	; 27
    1462:	88 62       	ori	r24, 0x28	; 40
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <__vector_14+0xa0>
	  else if(rm_dir==3){PORTA|=0x38;}
    1466:	80 91 2b 02 	lds	r24, 0x022B
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	19 f4       	brne	.+6      	; 0x1474 <__vector_14+0xa2>
	}
	else {PORTA|=0x38;}
    146e:	8b b3       	in	r24, 0x1b	; 27
    1470:	88 63       	ori	r24, 0x38	; 56
    1472:	8b bb       	out	0x1b, r24	; 27

  if(mt_count>50){mt_count=1;}
    1474:	80 91 24 02 	lds	r24, 0x0224
    1478:	90 91 25 02 	lds	r25, 0x0225
    147c:	c3 97       	sbiw	r24, 0x33	; 51
    147e:	18 f0       	brcs	.+6      	; 0x1486 <__vector_14+0xb4>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <__vector_14+0xbe>
  else {mt_count++;}
    1486:	80 91 24 02 	lds	r24, 0x0224
    148a:	90 91 25 02 	lds	r25, 0x0225
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	90 93 25 02 	sts	0x0225, r25
    1494:	80 93 24 02 	sts	0x0224, r24


}
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <motor_speed>:
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r);


void motor_speed(signed char lm, signed char rm)
{
  l_motor_speed=lm;
    14aa:	99 27       	eor	r25, r25
    14ac:	87 fd       	sbrc	r24, 7
    14ae:	90 95       	com	r25
    14b0:	90 93 27 02 	sts	0x0227, r25
    14b4:	80 93 26 02 	sts	0x0226, r24
  r_motor_speed=rm;
    14b8:	77 27       	eor	r23, r23
    14ba:	67 fd       	sbrc	r22, 7
    14bc:	70 95       	com	r23
    14be:	70 93 29 02 	sts	0x0229, r23
    14c2:	60 93 28 02 	sts	0x0228, r22

  if(l_motor_speed<0){l_motor_speed=l_motor_speed*(-1);lm_dir=1;}
    14c6:	80 91 26 02 	lds	r24, 0x0226
    14ca:	90 91 27 02 	lds	r25, 0x0227
    14ce:	97 ff       	sbrs	r25, 7
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <motor_speed+0x42>
    14d2:	80 91 26 02 	lds	r24, 0x0226
    14d6:	90 91 27 02 	lds	r25, 0x0227
    14da:	90 95       	com	r25
    14dc:	81 95       	neg	r24
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	90 93 27 02 	sts	0x0227, r25
    14e4:	80 93 26 02 	sts	0x0226, r24
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <motor_speed+0x56>
  else if(l_motor_speed>0){lm_dir=2;}
    14ec:	80 91 26 02 	lds	r24, 0x0226
    14f0:	90 91 27 02 	lds	r25, 0x0227
    14f4:	18 16       	cp	r1, r24
    14f6:	19 06       	cpc	r1, r25
    14f8:	14 f4       	brge	.+4      	; 0x14fe <motor_speed+0x54>
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <motor_speed+0x56>
  else {lm_dir=3;}
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	80 93 2a 02 	sts	0x022A, r24

  if(r_motor_speed<0){r_motor_speed=r_motor_speed*(-1);rm_dir=1;}
    1504:	80 91 28 02 	lds	r24, 0x0228
    1508:	90 91 29 02 	lds	r25, 0x0229
    150c:	97 ff       	sbrs	r25, 7
    150e:	0d c0       	rjmp	.+26     	; 0x152a <motor_speed+0x80>
    1510:	80 91 28 02 	lds	r24, 0x0228
    1514:	90 91 29 02 	lds	r25, 0x0229
    1518:	90 95       	com	r25
    151a:	81 95       	neg	r24
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	90 93 29 02 	sts	0x0229, r25
    1522:	80 93 28 02 	sts	0x0228, r24
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0a c0       	rjmp	.+20     	; 0x153e <motor_speed+0x94>
  else if(r_motor_speed>0){rm_dir=2;}
    152a:	80 91 28 02 	lds	r24, 0x0228
    152e:	90 91 29 02 	lds	r25, 0x0229
    1532:	18 16       	cp	r1, r24
    1534:	19 06       	cpc	r1, r25
    1536:	14 f4       	brge	.+4      	; 0x153c <motor_speed+0x92>
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	01 c0       	rjmp	.+2      	; 0x153e <motor_speed+0x94>
  else {rm_dir=3;}
    153c:	83 e0       	ldi	r24, 0x03	; 3
    153e:	80 93 2b 02 	sts	0x022B, r24
    1542:	08 95       	ret

00001544 <motor>:

}
void motor(signed char lm, signed char rm, unsigned int m_delay)
{
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	8a 01       	movw	r16, r20
  motor_speed(lm,rm);
    154a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
  delay(m_delay);
    154e:	c8 01       	movw	r24, r16
    1550:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
}
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <exturn>:

void exturn(signed char lm, signed char rm, unsigned char sen, unsigned int bk_delay)
{
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	f8 2e       	mov	r15, r24
    1566:	16 2f       	mov	r17, r22
    1568:	04 2f       	mov	r16, r20
    156a:	e9 01       	movw	r28, r18
  motor_speed(lm,rm);  
    156c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
  while(1)
  {
    if(!(PINF&sen)) {break;}
    1570:	80 b1       	in	r24, 0x00	; 0
    1572:	80 23       	and	r24, r16
    1574:	e9 f7       	brne	.-6      	; 0x1570 <exturn+0x16>
  }
  if(bk_delay>0){motor(-lm,-rm,bk_delay);}
    1576:	20 97       	sbiw	r28, 0x00	; 0
    1578:	39 f0       	breq	.+14     	; 0x1588 <exturn+0x2e>
    157a:	11 95       	neg	r17
    157c:	8f 2d       	mov	r24, r15
    157e:	81 95       	neg	r24
    1580:	61 2f       	mov	r22, r17
    1582:	ae 01       	movw	r20, r28
    1584:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>
  buzzer(20,1,init_buzzer_data);
    1588:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 15 02 	sts	0x0215, r25
    1592:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    1596:	84 e1       	ldi	r24, 0x14	; 20
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	90 93 0b 02 	sts	0x020B, r25
    159e:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
    15a2:	80 91 10 02 	lds	r24, 0x0210
    15a6:	90 91 11 02 	lds	r25, 0x0211
    15aa:	90 93 0f 02 	sts	0x020F, r25
    15ae:	80 93 0e 02 	sts	0x020E, r24
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	08 95       	ret

000015be <exline>:
void exline(signed char lm, signed char rm, unsigned char sen, unsigned int bk_delay)
{
    15be:	ff 92       	push	r15
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	f8 2e       	mov	r15, r24
    15ca:	16 2f       	mov	r17, r22
    15cc:	04 2f       	mov	r16, r20
    15ce:	e9 01       	movw	r28, r18
  motor_speed(lm,rm);  
    15d0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
  while(1)
  {
	if(!(PINF&sen)) {break;}
    15d4:	80 b1       	in	r24, 0x00	; 0
    15d6:	80 23       	and	r24, r16
    15d8:	e9 f7       	brne	.-6      	; 0x15d4 <exline+0x16>
  }
  while(1)
  {
	if((!(PINF&sen))==0) {break;}
    15da:	80 b1       	in	r24, 0x00	; 0
    15dc:	80 23       	and	r24, r16
    15de:	e9 f3       	breq	.-6      	; 0x15da <exline+0x1c>
  }
  if(bk_delay>0){motor(-lm,-rm,bk_delay);}
    15e0:	20 97       	sbiw	r28, 0x00	; 0
    15e2:	39 f0       	breq	.+14     	; 0x15f2 <exline+0x34>
    15e4:	11 95       	neg	r17
    15e6:	8f 2d       	mov	r24, r15
    15e8:	81 95       	neg	r24
    15ea:	61 2f       	mov	r22, r17
    15ec:	ae 01       	movw	r20, r28
    15ee:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>
  buzzer(20,1,init_buzzer_data);
    15f2:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	90 93 15 02 	sts	0x0215, r25
    15fc:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    1600:	84 e1       	ldi	r24, 0x14	; 20
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	90 93 0b 02 	sts	0x020B, r25
    1608:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
    160c:	80 91 10 02 	lds	r24, 0x0210
    1610:	90 91 11 02 	lds	r25, 0x0211
    1614:	90 93 0f 02 	sts	0x020F, r25
    1618:	80 93 0e 02 	sts	0x020E, r24
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	08 95       	ret

00001628 <line_del>:

void line_del(unsigned char dr_num, unsigned char sen_dr, unsigned char mt_sp,unsigned int m_delay)
{
    1628:	2f 92       	push	r2
    162a:	3f 92       	push	r3
    162c:	4f 92       	push	r4
    162e:	5f 92       	push	r5
    1630:	6f 92       	push	r6
    1632:	7f 92       	push	r7
    1634:	8f 92       	push	r8
    1636:	9f 92       	push	r9
    1638:	af 92       	push	r10
    163a:	bf 92       	push	r11
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	c4 54       	subi	r28, 0x44	; 68
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	98 2f       	mov	r25, r24
    1660:	59 01       	movw	r10, r18
unsigned char i=0;
unsigned int delcount=1;
i=dr_num;
  if(sen_dr<=2)
    1662:	63 30       	cpi	r22, 0x03	; 3
    1664:	08 f0       	brcs	.+2      	; 0x1668 <line_del+0x40>
    1666:	16 c1       	rjmp	.+556    	; 0x1894 <line_del+0x26c>
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	c7 2e       	mov	r12, r23
    166c:	d1 2c       	mov	r13, r1
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	26 e1       	ldi	r18, 0x16	; 22
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	82 9f       	mul	r24, r18
    1676:	b0 01       	movw	r22, r0
    1678:	83 9f       	mul	r24, r19
    167a:	70 0d       	add	r23, r0
    167c:	92 9f       	mul	r25, r18
    167e:	70 0d       	add	r23, r0
    1680:	11 24       	eor	r1, r1
    1682:	64 5d       	subi	r22, 0xD4	; 212
    1684:	7d 4f       	sbci	r23, 0xFD	; 253
    1686:	25 96       	adiw	r28, 0x05	; 5
    1688:	7f af       	std	Y+63, r23	; 0x3f
    168a:	6e af       	std	Y+62, r22	; 0x3e
    168c:	25 97       	sbiw	r28, 0x05	; 5
    168e:	6c 5e       	subi	r22, 0xEC	; 236
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	7a 83       	std	Y+2, r23	; 0x02
    1694:	69 83       	std	Y+1, r22	; 0x01
    1696:	04 2f       	mov	r16, r20
    1698:	10 e0       	ldi	r17, 0x00	; 0
    169a:	25 96       	adiw	r28, 0x05	; 5
    169c:	ee ad       	ldd	r30, Y+62	; 0x3e
    169e:	ff ad       	ldd	r31, Y+63	; 0x3f
    16a0:	25 97       	sbiw	r28, 0x05	; 5
    16a2:	75 96       	adiw	r30, 0x15	; 21
    16a4:	fc 83       	std	Y+4, r31	; 0x04
    16a6:	eb 83       	std	Y+3, r30	; 0x03
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
    16a8:	25 96       	adiw	r28, 0x05	; 5
    16aa:	2e ad       	ldd	r18, Y+62	; 0x3e
    16ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    16ae:	25 97       	sbiw	r28, 0x05	; 5
    16b0:	2f 5f       	subi	r18, 0xFF	; 255
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	3e 83       	std	Y+6, r19	; 0x06
    16b6:	2d 83       	std	Y+5, r18	; 0x05
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
    16b8:	25 96       	adiw	r28, 0x05	; 5
    16ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    16bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    16be:	25 97       	sbiw	r28, 0x05	; 5
    16c0:	4e 5e       	subi	r20, 0xEE	; 238
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	58 87       	std	Y+8, r21	; 0x08
    16c6:	4f 83       	std	Y+7, r20	; 0x07
    16c8:	25 96       	adiw	r28, 0x05	; 5
    16ca:	6e ad       	ldd	r22, Y+62	; 0x3e
    16cc:	7f ad       	ldd	r23, Y+63	; 0x3f
    16ce:	25 97       	sbiw	r28, 0x05	; 5
    16d0:	6d 5e       	subi	r22, 0xED	; 237
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	7a 87       	std	Y+10, r23	; 0x0a
    16d6:	69 87       	std	Y+9, r22	; 0x09
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    16d8:	2b e0       	ldi	r18, 0x0B	; 11
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	82 9f       	mul	r24, r18
    16de:	70 01       	movw	r14, r0
    16e0:	83 9f       	mul	r24, r19
    16e2:	f0 0c       	add	r15, r0
    16e4:	92 9f       	mul	r25, r18
    16e6:	f0 0c       	add	r15, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	ee 0c       	add	r14, r14
    16ec:	ff 1c       	adc	r15, r15
    16ee:	8e e2       	ldi	r24, 0x2E	; 46
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	e8 0e       	add	r14, r24
    16f4:	f9 1e       	adc	r15, r25
    16f6:	25 96       	adiw	r28, 0x05	; 5
    16f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    16fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    16fc:	25 97       	sbiw	r28, 0x05	; 5
    16fe:	33 96       	adiw	r30, 0x03	; 3
    1700:	fc 87       	std	Y+12, r31	; 0x0c
    1702:	eb 87       	std	Y+11, r30	; 0x0b
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    1704:	25 96       	adiw	r28, 0x05	; 5
    1706:	2e ad       	ldd	r18, Y+62	; 0x3e
    1708:	3f ad       	ldd	r19, Y+63	; 0x3f
    170a:	25 97       	sbiw	r28, 0x05	; 5
    170c:	20 5f       	subi	r18, 0xF0	; 240
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	3e 87       	std	Y+14, r19	; 0x0e
    1712:	2d 87       	std	Y+13, r18	; 0x0d
    1714:	25 96       	adiw	r28, 0x05	; 5
    1716:	4e ad       	ldd	r20, Y+62	; 0x3e
    1718:	5f ad       	ldd	r21, Y+63	; 0x3f
    171a:	25 97       	sbiw	r28, 0x05	; 5
    171c:	4f 5e       	subi	r20, 0xEF	; 239
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	58 8b       	std	Y+16, r21	; 0x10
    1722:	4f 87       	std	Y+15, r20	; 0x0f
      if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
    1724:	25 96       	adiw	r28, 0x05	; 5
    1726:	6e ad       	ldd	r22, Y+62	; 0x3e
    1728:	7f ad       	ldd	r23, Y+63	; 0x3f
    172a:	25 97       	sbiw	r28, 0x05	; 5
    172c:	6c 5f       	subi	r22, 0xFC	; 252
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	7a 8b       	std	Y+18, r23	; 0x12
    1732:	69 8b       	std	Y+17, r22	; 0x11
    1734:	25 96       	adiw	r28, 0x05	; 5
    1736:	8e ad       	ldd	r24, Y+62	; 0x3e
    1738:	9f ad       	ldd	r25, Y+63	; 0x3f
    173a:	25 97       	sbiw	r28, 0x05	; 5
    173c:	05 96       	adiw	r24, 0x05	; 5
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    {
      if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
    1742:	25 96       	adiw	r28, 0x05	; 5
    1744:	ee ad       	ldd	r30, Y+62	; 0x3e
    1746:	ff ad       	ldd	r31, Y+63	; 0x3f
    1748:	25 97       	sbiw	r28, 0x05	; 5
    174a:	3e 96       	adiw	r30, 0x0e	; 14
    174c:	fe 8b       	std	Y+22, r31	; 0x16
    174e:	ed 8b       	std	Y+21, r30	; 0x15
    1750:	5f e0       	ldi	r21, 0x0F	; 15
    1752:	25 2e       	mov	r2, r21
    1754:	31 2c       	mov	r3, r1
    1756:	25 96       	adiw	r28, 0x05	; 5
    1758:	2e ad       	ldd	r18, Y+62	; 0x3e
    175a:	3f ad       	ldd	r19, Y+63	; 0x3f
    175c:	25 97       	sbiw	r28, 0x05	; 5
    175e:	22 0e       	add	r2, r18
    1760:	33 1e       	adc	r3, r19
    while(delcount<=m_delay)
    {
      if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
    1762:	46 e0       	ldi	r20, 0x06	; 6
    1764:	44 2e       	mov	r4, r20
    1766:	51 2c       	mov	r5, r1
    1768:	42 0e       	add	r4, r18
    176a:	53 1e       	adc	r5, r19
    176c:	97 e0       	ldi	r25, 0x07	; 7
    176e:	69 2e       	mov	r6, r25
    1770:	71 2c       	mov	r7, r1
    1772:	62 0e       	add	r6, r18
    1774:	73 1e       	adc	r7, r19
  { 
    while(delcount<=m_delay)
    {
      if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
    1776:	8c e0       	ldi	r24, 0x0C	; 12
    1778:	88 2e       	mov	r8, r24
    177a:	91 2c       	mov	r9, r1
    177c:	82 0e       	add	r8, r18
    177e:	93 1e       	adc	r9, r19
    1780:	84 c0       	rjmp	.+264    	; 0x188a <line_del+0x262>
i=dr_num;
  if(sen_dr<=2)
  { 
    while(delcount<=m_delay)
    {
      if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
    1782:	04 99       	sbic	0x00, 4	; 0
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <line_del+0x170>
    1786:	05 99       	sbic	0x00, 5	; 0
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <line_del+0x170>
    178a:	25 96       	adiw	r28, 0x05	; 5
    178c:	ee ad       	ldd	r30, Y+62	; 0x3e
    178e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1790:	25 97       	sbiw	r28, 0x05	; 5
    1792:	82 85       	ldd	r24, Z+10	; 0x0a
    1794:	23 85       	ldd	r18, Z+11	; 0x0b
    1796:	55 c0       	rjmp	.+170    	; 0x1842 <line_del+0x21a>
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}
    1798:	04 99       	sbic	0x00, 4	; 0
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <line_del+0x182>
    179c:	25 96       	adiw	r28, 0x05	; 5
    179e:	ee ad       	ldd	r30, Y+62	; 0x3e
    17a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17a2:	25 97       	sbiw	r28, 0x05	; 5
    17a4:	80 85       	ldd	r24, Z+8	; 0x08
    17a6:	21 85       	ldd	r18, Z+9	; 0x09
    17a8:	4c c0       	rjmp	.+152    	; 0x1842 <line_del+0x21a>
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
    17aa:	05 99       	sbic	0x00, 5	; 0
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <line_del+0x196>
    17ae:	f4 01       	movw	r30, r8
    17b0:	80 81       	ld	r24, Z
    17b2:	25 96       	adiw	r28, 0x05	; 5
    17b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    17b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    17b8:	25 97       	sbiw	r28, 0x05	; 5
    17ba:	25 85       	ldd	r18, Z+13	; 0x0d
    17bc:	42 c0       	rjmp	.+132    	; 0x1842 <line_del+0x21a>
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
    17be:	03 99       	sbic	0x00, 3	; 0
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <line_del+0x1a6>
    17c2:	04 99       	sbic	0x00, 4	; 0
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <line_del+0x1a6>
    17c6:	f2 01       	movw	r30, r4
    17c8:	80 81       	ld	r24, Z
    17ca:	f3 01       	movw	r30, r6
    17cc:	39 c0       	rjmp	.+114    	; 0x1840 <line_del+0x218>
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
    17ce:	05 99       	sbic	0x00, 5	; 0
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <line_del+0x1b8>
    17d2:	06 99       	sbic	0x00, 6	; 0
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <line_del+0x1b8>
    17d6:	ed 89       	ldd	r30, Y+21	; 0x15
    17d8:	fe 89       	ldd	r31, Y+22	; 0x16
    17da:	80 81       	ld	r24, Z
    17dc:	f1 01       	movw	r30, r2
    17de:	30 c0       	rjmp	.+96     	; 0x1840 <line_del+0x218>
	  else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
    17e0:	03 99       	sbic	0x00, 3	; 0
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <line_del+0x1c8>
    17e4:	e9 89       	ldd	r30, Y+17	; 0x11
    17e6:	fa 89       	ldd	r31, Y+18	; 0x12
    17e8:	80 81       	ld	r24, Z
    17ea:	eb 89       	ldd	r30, Y+19	; 0x13
    17ec:	fc 89       	ldd	r31, Y+20	; 0x14
    17ee:	28 c0       	rjmp	.+80     	; 0x1840 <line_del+0x218>
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    17f0:	06 99       	sbic	0x00, 6	; 0
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <line_del+0x1d8>
    17f4:	ed 85       	ldd	r30, Y+13	; 0x0d
    17f6:	fe 85       	ldd	r31, Y+14	; 0x0e
    17f8:	80 81       	ld	r24, Z
    17fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    17fc:	f8 89       	ldd	r31, Y+16	; 0x10
    17fe:	20 c0       	rjmp	.+64     	; 0x1840 <line_del+0x218>
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    1800:	02 99       	sbic	0x00, 2	; 0
    1802:	05 c0       	rjmp	.+10     	; 0x180e <line_del+0x1e6>
    1804:	f7 01       	movw	r30, r14
    1806:	80 81       	ld	r24, Z
    1808:	eb 85       	ldd	r30, Y+11	; 0x0b
    180a:	fc 85       	ldd	r31, Y+12	; 0x0c
    180c:	19 c0       	rjmp	.+50     	; 0x1840 <line_del+0x218>
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
    180e:	07 99       	sbic	0x00, 7	; 0
    1810:	06 c0       	rjmp	.+12     	; 0x181e <line_del+0x1f6>
    1812:	ef 81       	ldd	r30, Y+7	; 0x07
    1814:	f8 85       	ldd	r31, Y+8	; 0x08
    1816:	80 81       	ld	r24, Z
    1818:	e9 85       	ldd	r30, Y+9	; 0x09
    181a:	fa 85       	ldd	r31, Y+10	; 0x0a
    181c:	11 c0       	rjmp	.+34     	; 0x1840 <line_del+0x218>
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
    181e:	01 99       	sbic	0x00, 1	; 0
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <line_del+0x20a>
    1822:	25 96       	adiw	r28, 0x05	; 5
    1824:	ee ad       	ldd	r30, Y+62	; 0x3e
    1826:	ff ad       	ldd	r31, Y+63	; 0x3f
    1828:	25 97       	sbiw	r28, 0x05	; 5
    182a:	80 81       	ld	r24, Z
    182c:	ed 81       	ldd	r30, Y+5	; 0x05
    182e:	fe 81       	ldd	r31, Y+6	; 0x06
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <line_del+0x218>
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
    1832:	00 99       	sbic	0x00, 0	; 0
    1834:	23 c0       	rjmp	.+70     	; 0x187c <line_del+0x254>
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	80 81       	ld	r24, Z
    183c:	eb 81       	ldd	r30, Y+3	; 0x03
    183e:	fc 81       	ldd	r31, Y+4	; 0x04
    1840:	20 81       	ld	r18, Z
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	ac 01       	movw	r20, r24
    1846:	04 9f       	mul	r16, r20
    1848:	c0 01       	movw	r24, r0
    184a:	05 9f       	mul	r16, r21
    184c:	90 0d       	add	r25, r0
    184e:	14 9f       	mul	r17, r20
    1850:	90 0d       	add	r25, r0
    1852:	11 24       	eor	r1, r1
    1854:	64 e1       	ldi	r22, 0x14	; 20
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    185c:	46 2f       	mov	r20, r22
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	02 9f       	mul	r16, r18
    1862:	c0 01       	movw	r24, r0
    1864:	03 9f       	mul	r16, r19
    1866:	90 0d       	add	r25, r0
    1868:	12 9f       	mul	r17, r18
    186a:	90 0d       	add	r25, r0
    186c:	11 24       	eor	r1, r1
    186e:	64 e1       	ldi	r22, 0x14	; 20
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    1876:	84 2f       	mov	r24, r20
    1878:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
	  delay(1);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
	  delcount++;
    1884:	08 94       	sec
    1886:	c1 1c       	adc	r12, r1
    1888:	d1 1c       	adc	r13, r1
unsigned char i=0;
unsigned int delcount=1;
i=dr_num;
  if(sen_dr<=2)
  { 
    while(delcount<=m_delay)
    188a:	ac 14       	cp	r10, r12
    188c:	bd 04       	cpc	r11, r13
    188e:	08 f0       	brcs	.+2      	; 0x1892 <line_del+0x26a>
    1890:	78 cf       	rjmp	.-272    	; 0x1782 <line_del+0x15a>
    1892:	40 c2       	rjmp	.+1152   	; 0x1d14 <line_del+0x6ec>
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
	  delay(1);
	  delcount++;
	}
  }
  else if((sen_dr>=3)&&(sen_dr<=4))
    1894:	86 2f       	mov	r24, r22
    1896:	83 50       	subi	r24, 0x03	; 3
    1898:	82 30       	cpi	r24, 0x02	; 2
    189a:	08 f0       	brcs	.+2      	; 0x189e <line_del+0x276>
    189c:	19 c1       	rjmp	.+562    	; 0x1ad0 <line_del+0x4a8>
    189e:	11 e0       	ldi	r17, 0x01	; 1
    18a0:	c1 2e       	mov	r12, r17
    18a2:	d1 2c       	mov	r13, r1
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
    18a4:	89 2f       	mov	r24, r25
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	26 e1       	ldi	r18, 0x16	; 22
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	82 9f       	mul	r24, r18
    18ae:	b0 01       	movw	r22, r0
    18b0:	83 9f       	mul	r24, r19
    18b2:	70 0d       	add	r23, r0
    18b4:	92 9f       	mul	r25, r18
    18b6:	70 0d       	add	r23, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	64 5d       	subi	r22, 0xD4	; 212
    18bc:	7d 4f       	sbci	r23, 0xFD	; 253
    18be:	25 96       	adiw	r28, 0x05	; 5
    18c0:	7f af       	std	Y+63, r23	; 0x3f
    18c2:	6e af       	std	Y+62, r22	; 0x3e
    18c4:	25 97       	sbiw	r28, 0x05	; 5
    18c6:	6c 5e       	subi	r22, 0xEC	; 236
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	78 8f       	std	Y+24, r23	; 0x18
    18cc:	6f 8b       	std	Y+23, r22	; 0x17
    18ce:	04 2f       	mov	r16, r20
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	25 96       	adiw	r28, 0x05	; 5
    18d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    18d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    18d8:	25 97       	sbiw	r28, 0x05	; 5
    18da:	75 96       	adiw	r30, 0x15	; 21
    18dc:	fa 8f       	std	Y+26, r31	; 0x1a
    18de:	e9 8f       	std	Y+25, r30	; 0x19
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
    18e0:	25 96       	adiw	r28, 0x05	; 5
    18e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    18e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    18e6:	25 97       	sbiw	r28, 0x05	; 5
    18e8:	2e 5e       	subi	r18, 0xEE	; 238
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	3c 8f       	std	Y+28, r19	; 0x1c
    18ee:	2b 8f       	std	Y+27, r18	; 0x1b
    18f0:	25 96       	adiw	r28, 0x05	; 5
    18f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f6:	25 97       	sbiw	r28, 0x05	; 5
    18f8:	4d 5e       	subi	r20, 0xED	; 237
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	5e 8f       	std	Y+30, r21	; 0x1e
    18fe:	4d 8f       	std	Y+29, r20	; 0x1d
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    1900:	25 96       	adiw	r28, 0x05	; 5
    1902:	6e ad       	ldd	r22, Y+62	; 0x3e
    1904:	7f ad       	ldd	r23, Y+63	; 0x3f
    1906:	25 97       	sbiw	r28, 0x05	; 5
    1908:	60 5f       	subi	r22, 0xF0	; 240
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	78 a3       	std	Y+32, r23	; 0x20
    190e:	6f 8f       	std	Y+31, r22	; 0x1f
    1910:	25 96       	adiw	r28, 0x05	; 5
    1912:	ee ad       	ldd	r30, Y+62	; 0x3e
    1914:	ff ad       	ldd	r31, Y+63	; 0x3f
    1916:	25 97       	sbiw	r28, 0x05	; 5
    1918:	71 96       	adiw	r30, 0x11	; 17
    191a:	fa a3       	std	Y+34, r31	; 0x22
    191c:	e9 a3       	std	Y+33, r30	; 0x21
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
    191e:	25 96       	adiw	r28, 0x05	; 5
    1920:	2e ad       	ldd	r18, Y+62	; 0x3e
    1922:	3f ad       	ldd	r19, Y+63	; 0x3f
    1924:	25 97       	sbiw	r28, 0x05	; 5
    1926:	22 5f       	subi	r18, 0xF2	; 242
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	3c a3       	std	Y+36, r19	; 0x24
    192c:	2b a3       	std	Y+35, r18	; 0x23
    192e:	25 96       	adiw	r28, 0x05	; 5
    1930:	4e ad       	ldd	r20, Y+62	; 0x3e
    1932:	5f ad       	ldd	r21, Y+63	; 0x3f
    1934:	25 97       	sbiw	r28, 0x05	; 5
    1936:	41 5f       	subi	r20, 0xF1	; 241
    1938:	5f 4f       	sbci	r21, 0xFF	; 255
    193a:	5e a3       	std	Y+38, r21	; 0x26
    193c:	4d a3       	std	Y+37, r20	; 0x25
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
    193e:	25 96       	adiw	r28, 0x05	; 5
    1940:	6e ad       	ldd	r22, Y+62	; 0x3e
    1942:	7f ad       	ldd	r23, Y+63	; 0x3f
    1944:	25 97       	sbiw	r28, 0x05	; 5
    1946:	64 5f       	subi	r22, 0xF4	; 244
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	78 a7       	std	Y+40, r23	; 0x28
    194c:	6f a3       	std	Y+39, r22	; 0x27
    194e:	25 96       	adiw	r28, 0x05	; 5
    1950:	ee ad       	ldd	r30, Y+62	; 0x3e
    1952:	ff ad       	ldd	r31, Y+63	; 0x3f
    1954:	25 97       	sbiw	r28, 0x05	; 5
    1956:	3d 96       	adiw	r30, 0x0d	; 13
    1958:	fa a7       	std	Y+42, r31	; 0x2a
    195a:	e9 a7       	std	Y+41, r30	; 0x29
      if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
    195c:	25 96       	adiw	r28, 0x05	; 5
    195e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1960:	3f ad       	ldd	r19, Y+63	; 0x3f
    1962:	25 97       	sbiw	r28, 0x05	; 5
    1964:	26 5f       	subi	r18, 0xF6	; 246
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	3c a7       	std	Y+44, r19	; 0x2c
    196a:	2b a7       	std	Y+43, r18	; 0x2b
    196c:	bb e0       	ldi	r27, 0x0B	; 11
    196e:	2b 2e       	mov	r2, r27
    1970:	31 2c       	mov	r3, r1
    1972:	25 96       	adiw	r28, 0x05	; 5
    1974:	4e ad       	ldd	r20, Y+62	; 0x3e
    1976:	5f ad       	ldd	r21, Y+63	; 0x3f
    1978:	25 97       	sbiw	r28, 0x05	; 5
    197a:	24 0e       	add	r2, r20
    197c:	35 1e       	adc	r3, r21
	{
      if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
    197e:	a8 e0       	ldi	r26, 0x08	; 8
    1980:	4a 2e       	mov	r4, r26
    1982:	51 2c       	mov	r5, r1
    1984:	44 0e       	add	r4, r20
    1986:	55 1e       	adc	r5, r21
    1988:	f9 e0       	ldi	r31, 0x09	; 9
    198a:	6f 2e       	mov	r6, r31
    198c:	71 2c       	mov	r7, r1
    198e:	64 0e       	add	r6, r20
    1990:	75 1e       	adc	r7, r21
    while(delcount<=m_delay)
	{
      if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
    1992:	e6 e0       	ldi	r30, 0x06	; 6
    1994:	8e 2e       	mov	r8, r30
    1996:	91 2c       	mov	r9, r1
    1998:	84 0e       	add	r8, r20
    199a:	95 1e       	adc	r9, r21
  else if((sen_dr>=3)&&(sen_dr<=4))
  {	
    while(delcount<=m_delay)
	{
      if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    199c:	2b e0       	ldi	r18, 0x0B	; 11
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	82 9f       	mul	r24, r18
    19a2:	70 01       	movw	r14, r0
    19a4:	83 9f       	mul	r24, r19
    19a6:	f0 0c       	add	r15, r0
    19a8:	92 9f       	mul	r25, r18
    19aa:	f0 0c       	add	r15, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	ee 0c       	add	r14, r14
    19b0:	ff 1c       	adc	r15, r15
    19b2:	6e e2       	ldi	r22, 0x2E	; 46
    19b4:	72 e0       	ldi	r23, 0x02	; 2
    19b6:	e6 0e       	add	r14, r22
    19b8:	f7 1e       	adc	r15, r23
    19ba:	85 c0       	rjmp	.+266    	; 0x1ac6 <line_del+0x49e>
  }
  else if((sen_dr>=3)&&(sen_dr<=4))
  {	
    while(delcount<=m_delay)
	{
      if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
    19bc:	01 99       	sbic	0x00, 1	; 0
    19be:	07 c0       	rjmp	.+14     	; 0x19ce <line_del+0x3a6>
    19c0:	25 96       	adiw	r28, 0x05	; 5
    19c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    19c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    19c6:	25 97       	sbiw	r28, 0x05	; 5
    19c8:	80 81       	ld	r24, Z
    19ca:	21 81       	ldd	r18, Z+1	; 0x01
    19cc:	58 c0       	rjmp	.+176    	; 0x1a7e <line_del+0x456>
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    19ce:	02 99       	sbic	0x00, 2	; 0
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <line_del+0x3ba>
    19d2:	f7 01       	movw	r30, r14
    19d4:	80 81       	ld	r24, Z
    19d6:	25 96       	adiw	r28, 0x05	; 5
    19d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    19da:	ff ad       	ldd	r31, Y+63	; 0x3f
    19dc:	25 97       	sbiw	r28, 0x05	; 5
    19de:	23 81       	ldd	r18, Z+3	; 0x03
    19e0:	4e c0       	rjmp	.+156    	; 0x1a7e <line_del+0x456>
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
    19e2:	03 99       	sbic	0x00, 3	; 0
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <line_del+0x3cc>
    19e6:	25 96       	adiw	r28, 0x05	; 5
    19e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    19ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    19ec:	25 97       	sbiw	r28, 0x05	; 5
    19ee:	84 81       	ldd	r24, Z+4	; 0x04
    19f0:	25 81       	ldd	r18, Z+5	; 0x05
    19f2:	45 c0       	rjmp	.+138    	; 0x1a7e <line_del+0x456>
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}
    19f4:	03 99       	sbic	0x00, 3	; 0
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <line_del+0x3e4>
    19f8:	04 99       	sbic	0x00, 4	; 0
    19fa:	08 c0       	rjmp	.+16     	; 0x1a0c <line_del+0x3e4>
    19fc:	f4 01       	movw	r30, r8
    19fe:	80 81       	ld	r24, Z
    1a00:	25 96       	adiw	r28, 0x05	; 5
    1a02:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a04:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a06:	25 97       	sbiw	r28, 0x05	; 5
    1a08:	27 81       	ldd	r18, Z+7	; 0x07
    1a0a:	39 c0       	rjmp	.+114    	; 0x1a7e <line_del+0x456>
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	  
    1a0c:	04 99       	sbic	0x00, 4	; 0
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <line_del+0x3f0>
    1a10:	f2 01       	movw	r30, r4
    1a12:	80 81       	ld	r24, Z
    1a14:	f3 01       	movw	r30, r6
    1a16:	32 c0       	rjmp	.+100    	; 0x1a7c <line_del+0x454>
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}
    1a18:	04 99       	sbic	0x00, 4	; 0
    1a1a:	07 c0       	rjmp	.+14     	; 0x1a2a <line_del+0x402>
    1a1c:	05 99       	sbic	0x00, 5	; 0
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <line_del+0x402>
    1a20:	eb a5       	ldd	r30, Y+43	; 0x2b
    1a22:	fc a5       	ldd	r31, Y+44	; 0x2c
    1a24:	80 81       	ld	r24, Z
    1a26:	f1 01       	movw	r30, r2
    1a28:	29 c0       	rjmp	.+82     	; 0x1a7c <line_del+0x454>
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}
    1a2a:	05 99       	sbic	0x00, 5	; 0
    1a2c:	06 c0       	rjmp	.+12     	; 0x1a3a <line_del+0x412>
    1a2e:	ef a1       	ldd	r30, Y+39	; 0x27
    1a30:	f8 a5       	ldd	r31, Y+40	; 0x28
    1a32:	80 81       	ld	r24, Z
    1a34:	e9 a5       	ldd	r30, Y+41	; 0x29
    1a36:	fa a5       	ldd	r31, Y+42	; 0x2a
    1a38:	21 c0       	rjmp	.+66     	; 0x1a7c <line_del+0x454>
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}
    1a3a:	05 99       	sbic	0x00, 5	; 0
    1a3c:	08 c0       	rjmp	.+16     	; 0x1a4e <line_del+0x426>
    1a3e:	06 99       	sbic	0x00, 6	; 0
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <line_del+0x426>
    1a42:	eb a1       	ldd	r30, Y+35	; 0x23
    1a44:	fc a1       	ldd	r31, Y+36	; 0x24
    1a46:	80 81       	ld	r24, Z
    1a48:	ed a1       	ldd	r30, Y+37	; 0x25
    1a4a:	fe a1       	ldd	r31, Y+38	; 0x26
    1a4c:	17 c0       	rjmp	.+46     	; 0x1a7c <line_del+0x454>
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    1a4e:	06 99       	sbic	0x00, 6	; 0
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <line_del+0x436>
    1a52:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1a54:	f8 a1       	ldd	r31, Y+32	; 0x20
    1a56:	80 81       	ld	r24, Z
    1a58:	e9 a1       	ldd	r30, Y+33	; 0x21
    1a5a:	fa a1       	ldd	r31, Y+34	; 0x22
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <line_del+0x454>
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}
    1a5e:	07 99       	sbic	0x00, 7	; 0
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <line_del+0x446>
    1a62:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a64:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a66:	80 81       	ld	r24, Z
    1a68:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1a6a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <line_del+0x454>
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
    1a6e:	00 99       	sbic	0x00, 0	; 0
    1a70:	23 c0       	rjmp	.+70     	; 0x1ab8 <line_del+0x490>
    1a72:	ef 89       	ldd	r30, Y+23	; 0x17
    1a74:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a76:	80 81       	ld	r24, Z
    1a78:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a7c:	20 81       	ld	r18, Z
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	ac 01       	movw	r20, r24
    1a82:	04 9f       	mul	r16, r20
    1a84:	c0 01       	movw	r24, r0
    1a86:	05 9f       	mul	r16, r21
    1a88:	90 0d       	add	r25, r0
    1a8a:	14 9f       	mul	r17, r20
    1a8c:	90 0d       	add	r25, r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	64 e1       	ldi	r22, 0x14	; 20
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    1a98:	46 2f       	mov	r20, r22
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	02 9f       	mul	r16, r18
    1a9e:	c0 01       	movw	r24, r0
    1aa0:	03 9f       	mul	r16, r19
    1aa2:	90 0d       	add	r25, r0
    1aa4:	12 9f       	mul	r17, r18
    1aa6:	90 0d       	add	r25, r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	64 e1       	ldi	r22, 0x14	; 20
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    1ab2:	84 2f       	mov	r24, r20
    1ab4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
      delay(1);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
	  delcount++;
    1ac0:	08 94       	sec
    1ac2:	c1 1c       	adc	r12, r1
    1ac4:	d1 1c       	adc	r13, r1
	  delcount++;
	}
  }
  else if((sen_dr>=3)&&(sen_dr<=4))
  {	
    while(delcount<=m_delay)
    1ac6:	ac 14       	cp	r10, r12
    1ac8:	bd 04       	cpc	r11, r13
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <line_del+0x4a6>
    1acc:	77 cf       	rjmp	.-274    	; 0x19bc <line_del+0x394>
    1ace:	22 c1       	rjmp	.+580    	; 0x1d14 <line_del+0x6ec>
	  else if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}
      delay(1);
	  delcount++;
	  }
  }
  else if((sen_dr>=5)&&(sen_dr<=6))
    1ad0:	65 50       	subi	r22, 0x05	; 5
    1ad2:	62 30       	cpi	r22, 0x02	; 2
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <line_del+0x4b0>
    1ad6:	1e c1       	rjmp	.+572    	; 0x1d14 <line_del+0x6ec>
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	c6 2e       	mov	r12, r22
    1adc:	d1 2c       	mov	r13, r1
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}	  
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
    1ade:	89 2f       	mov	r24, r25
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	26 e1       	ldi	r18, 0x16	; 22
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	82 9f       	mul	r24, r18
    1ae8:	b0 01       	movw	r22, r0
    1aea:	83 9f       	mul	r24, r19
    1aec:	70 0d       	add	r23, r0
    1aee:	92 9f       	mul	r25, r18
    1af0:	70 0d       	add	r23, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	64 5d       	subi	r22, 0xD4	; 212
    1af6:	7d 4f       	sbci	r23, 0xFD	; 253
    1af8:	25 96       	adiw	r28, 0x05	; 5
    1afa:	7f af       	std	Y+63, r23	; 0x3f
    1afc:	6e af       	std	Y+62, r22	; 0x3e
    1afe:	25 97       	sbiw	r28, 0x05	; 5
    1b00:	04 2f       	mov	r16, r20
    1b02:	10 e0       	ldi	r17, 0x00	; 0
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	7e a7       	std	Y+46, r23	; 0x2e
    1b0a:	6d a7       	std	Y+45, r22	; 0x2d
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}	  
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    1b0c:	2b e0       	ldi	r18, 0x0B	; 11
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	82 9f       	mul	r24, r18
    1b12:	70 01       	movw	r14, r0
    1b14:	83 9f       	mul	r24, r19
    1b16:	f0 0c       	add	r15, r0
    1b18:	92 9f       	mul	r25, r18
    1b1a:	f0 0c       	add	r15, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	ee 0c       	add	r14, r14
    1b20:	ff 1c       	adc	r15, r15
    1b22:	8e e2       	ldi	r24, 0x2E	; 46
    1b24:	92 e0       	ldi	r25, 0x02	; 2
    1b26:	e8 0e       	add	r14, r24
    1b28:	f9 1e       	adc	r15, r25
    1b2a:	25 96       	adiw	r28, 0x05	; 5
    1b2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b30:	25 97       	sbiw	r28, 0x05	; 5
    1b32:	33 96       	adiw	r30, 0x03	; 3
    1b34:	f8 ab       	std	Y+48, r31	; 0x30
    1b36:	ef a7       	std	Y+47, r30	; 0x2f
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}	  
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
    1b38:	25 96       	adiw	r28, 0x05	; 5
    1b3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b3e:	25 97       	sbiw	r28, 0x05	; 5
    1b40:	2c 5f       	subi	r18, 0xFC	; 252
    1b42:	3f 4f       	sbci	r19, 0xFF	; 255
    1b44:	3a ab       	std	Y+50, r19	; 0x32
    1b46:	29 ab       	std	Y+49, r18	; 0x31
    1b48:	25 96       	adiw	r28, 0x05	; 5
    1b4a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b4e:	25 97       	sbiw	r28, 0x05	; 5
    1b50:	4b 5f       	subi	r20, 0xFB	; 251
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	5c ab       	std	Y+52, r21	; 0x34
    1b56:	4b ab       	std	Y+51, r20	; 0x33
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}	  
    1b58:	25 96       	adiw	r28, 0x05	; 5
    1b5a:	6e ad       	ldd	r22, Y+62	; 0x3e
    1b5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b5e:	25 97       	sbiw	r28, 0x05	; 5
    1b60:	6a 5f       	subi	r22, 0xFA	; 250
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	7e ab       	std	Y+54, r23	; 0x36
    1b66:	6d ab       	std	Y+53, r22	; 0x35
    1b68:	25 96       	adiw	r28, 0x05	; 5
    1b6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b6e:	25 97       	sbiw	r28, 0x05	; 5
    1b70:	07 96       	adiw	r24, 0x07	; 7
    1b72:	98 af       	std	Y+56, r25	; 0x38
    1b74:	8f ab       	std	Y+55, r24	; 0x37
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
    1b76:	25 96       	adiw	r28, 0x05	; 5
    1b78:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b7c:	25 97       	sbiw	r28, 0x05	; 5
    1b7e:	38 96       	adiw	r30, 0x08	; 8
    1b80:	fa af       	std	Y+58, r31	; 0x3a
    1b82:	e9 af       	std	Y+57, r30	; 0x39
    1b84:	25 96       	adiw	r28, 0x05	; 5
    1b86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b8a:	25 97       	sbiw	r28, 0x05	; 5
    1b8c:	27 5f       	subi	r18, 0xF7	; 247
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	3c af       	std	Y+60, r19	; 0x3c
    1b92:	2b af       	std	Y+59, r18	; 0x3b
	  if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}      
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
    1b94:	25 96       	adiw	r28, 0x05	; 5
    1b96:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b98:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b9a:	25 97       	sbiw	r28, 0x05	; 5
    1b9c:	46 5f       	subi	r20, 0xF6	; 246
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	5e af       	std	Y+62, r21	; 0x3e
    1ba2:	4d af       	std	Y+61, r20	; 0x3d
    1ba4:	25 96       	adiw	r28, 0x05	; 5
    1ba6:	6e ad       	ldd	r22, Y+62	; 0x3e
    1ba8:	7f ad       	ldd	r23, Y+63	; 0x3f
    1baa:	25 97       	sbiw	r28, 0x05	; 5
    1bac:	65 5f       	subi	r22, 0xF5	; 245
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	21 96       	adiw	r28, 0x01	; 1
    1bb2:	7f af       	std	Y+63, r23	; 0x3f
    1bb4:	6e af       	std	Y+62, r22	; 0x3e
    1bb6:	21 97       	sbiw	r28, 0x01	; 1
	{
	  if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}      
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
    1bb8:	25 96       	adiw	r28, 0x05	; 5
    1bba:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bbe:	25 97       	sbiw	r28, 0x05	; 5
    1bc0:	0c 96       	adiw	r24, 0x0c	; 12
    1bc2:	23 96       	adiw	r28, 0x03	; 3
    1bc4:	9f af       	std	Y+63, r25	; 0x3f
    1bc6:	8e af       	std	Y+62, r24	; 0x3e
    1bc8:	23 97       	sbiw	r28, 0x03	; 3
    1bca:	4d e0       	ldi	r20, 0x0D	; 13
    1bcc:	24 2e       	mov	r2, r20
    1bce:	31 2c       	mov	r3, r1
    1bd0:	25 96       	adiw	r28, 0x05	; 5
    1bd2:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bd4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bd6:	25 97       	sbiw	r28, 0x05	; 5
    1bd8:	2e 0e       	add	r2, r30
    1bda:	3f 1e       	adc	r3, r31
    while(delcount<=m_delay)
	{
	  if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}      
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
    1bdc:	3e e0       	ldi	r19, 0x0E	; 14
    1bde:	43 2e       	mov	r4, r19
    1be0:	51 2c       	mov	r5, r1
    1be2:	4e 0e       	add	r4, r30
    1be4:	5f 1e       	adc	r5, r31
    1be6:	2f e0       	ldi	r18, 0x0F	; 15
    1be8:	62 2e       	mov	r6, r18
    1bea:	71 2c       	mov	r7, r1
    1bec:	6e 0e       	add	r6, r30
    1bee:	7f 1e       	adc	r7, r31
  { 
    while(delcount<=m_delay)
	{
	  if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}      
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    1bf0:	90 e1       	ldi	r25, 0x10	; 16
    1bf2:	89 2e       	mov	r8, r25
    1bf4:	91 2c       	mov	r9, r1
    1bf6:	8e 0e       	add	r8, r30
    1bf8:	9f 1e       	adc	r9, r31
    1bfa:	88 c0       	rjmp	.+272    	; 0x1d0c <line_del+0x6e4>
  }
  else if((sen_dr>=5)&&(sen_dr<=6))
  { 
    while(delcount<=m_delay)
	{
	  if(s8_data) {motor_speed(sp[i][20]*mt_sp/20,sp[i][21]*mt_sp/20);}      
    1bfc:	00 99       	sbic	0x00, 0	; 0
    1bfe:	07 c0       	rjmp	.+14     	; 0x1c0e <line_del+0x5e6>
    1c00:	25 96       	adiw	r28, 0x05	; 5
    1c02:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c04:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c06:	25 97       	sbiw	r28, 0x05	; 5
    1c08:	84 89       	ldd	r24, Z+20	; 0x14
    1c0a:	25 89       	ldd	r18, Z+21	; 0x15
    1c0c:	5b c0       	rjmp	.+182    	; 0x1cc4 <line_del+0x69c>
	  else if(s7_data) {motor_speed(sp[i][18]*mt_sp/20,sp[i][19]*mt_sp/20);}	  
    1c0e:	07 99       	sbic	0x00, 7	; 0
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <line_del+0x5f8>
    1c12:	25 96       	adiw	r28, 0x05	; 5
    1c14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c18:	25 97       	sbiw	r28, 0x05	; 5
    1c1a:	82 89       	ldd	r24, Z+18	; 0x12
    1c1c:	23 89       	ldd	r18, Z+19	; 0x13
    1c1e:	52 c0       	rjmp	.+164    	; 0x1cc4 <line_del+0x69c>
	  else if(s6_data) {motor_speed(sp[i][16]*mt_sp/20,sp[i][17]*mt_sp/20);}
    1c20:	06 99       	sbic	0x00, 6	; 0
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <line_del+0x60c>
    1c24:	f4 01       	movw	r30, r8
    1c26:	80 81       	ld	r24, Z
    1c28:	25 96       	adiw	r28, 0x05	; 5
    1c2a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c2c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c2e:	25 97       	sbiw	r28, 0x05	; 5
    1c30:	21 89       	ldd	r18, Z+17	; 0x11
    1c32:	48 c0       	rjmp	.+144    	; 0x1cc4 <line_del+0x69c>
	  else if(s5_data&&s6_data) {motor_speed(sp[i][14]*mt_sp/20,sp[i][15]*mt_sp/20);}	
    1c34:	05 99       	sbic	0x00, 5	; 0
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <line_del+0x61c>
    1c38:	06 99       	sbic	0x00, 6	; 0
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <line_del+0x61c>
    1c3c:	f2 01       	movw	r30, r4
    1c3e:	80 81       	ld	r24, Z
    1c40:	f3 01       	movw	r30, r6
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <line_del+0x69a>
	  else if(s5_data) {motor_speed(sp[i][12]*mt_sp/20,sp[i][13]*mt_sp/20);}	  
    1c44:	05 99       	sbic	0x00, 5	; 0
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <line_del+0x62e>
    1c48:	23 96       	adiw	r28, 0x03	; 3
    1c4a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c4e:	23 97       	sbiw	r28, 0x03	; 3
    1c50:	80 81       	ld	r24, Z
    1c52:	f1 01       	movw	r30, r2
    1c54:	36 c0       	rjmp	.+108    	; 0x1cc2 <line_del+0x69a>
	  else if(s4_data&&s5_data){motor_speed(sp[i][10]*mt_sp/20,sp[i][11]*mt_sp/20);}	  
    1c56:	04 99       	sbic	0x00, 4	; 0
    1c58:	0a c0       	rjmp	.+20     	; 0x1c6e <line_del+0x646>
    1c5a:	05 99       	sbic	0x00, 5	; 0
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <line_del+0x646>
    1c5e:	ed ad       	ldd	r30, Y+61	; 0x3d
    1c60:	fe ad       	ldd	r31, Y+62	; 0x3e
    1c62:	80 81       	ld	r24, Z
    1c64:	21 96       	adiw	r28, 0x01	; 1
    1c66:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c68:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c6a:	21 97       	sbiw	r28, 0x01	; 1
    1c6c:	2a c0       	rjmp	.+84     	; 0x1cc2 <line_del+0x69a>
	  else if(s4_data) {motor_speed(sp[i][8]*mt_sp/20,sp[i][9]*mt_sp/20);}	 	  
    1c6e:	04 99       	sbic	0x00, 4	; 0
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <line_del+0x656>
    1c72:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c74:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c76:	80 81       	ld	r24, Z
    1c78:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c7a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c7c:	22 c0       	rjmp	.+68     	; 0x1cc2 <line_del+0x69a>
	  else if(s3_data&&s4_data) {motor_speed(sp[i][6]*mt_sp/20,sp[i][7]*mt_sp/20);}	  
    1c7e:	03 99       	sbic	0x00, 3	; 0
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <line_del+0x66a>
    1c82:	04 99       	sbic	0x00, 4	; 0
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <line_del+0x66a>
    1c86:	ed a9       	ldd	r30, Y+53	; 0x35
    1c88:	fe a9       	ldd	r31, Y+54	; 0x36
    1c8a:	80 81       	ld	r24, Z
    1c8c:	ef a9       	ldd	r30, Y+55	; 0x37
    1c8e:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c90:	18 c0       	rjmp	.+48     	; 0x1cc2 <line_del+0x69a>
      else if(s3_data) {motor_speed(sp[i][4]*mt_sp/20,sp[i][5]*mt_sp/20);}
    1c92:	03 99       	sbic	0x00, 3	; 0
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <line_del+0x67a>
    1c96:	e9 a9       	ldd	r30, Y+49	; 0x31
    1c98:	fa a9       	ldd	r31, Y+50	; 0x32
    1c9a:	80 81       	ld	r24, Z
    1c9c:	eb a9       	ldd	r30, Y+51	; 0x33
    1c9e:	fc a9       	ldd	r31, Y+52	; 0x34
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <line_del+0x69a>
	  else if(s2_data) {motor_speed(sp[i][2]*mt_sp/20,sp[i][3]*mt_sp/20);}
    1ca2:	02 99       	sbic	0x00, 2	; 0
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <line_del+0x688>
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	80 81       	ld	r24, Z
    1caa:	ef a5       	ldd	r30, Y+47	; 0x2f
    1cac:	f8 a9       	ldd	r31, Y+48	; 0x30
    1cae:	09 c0       	rjmp	.+18     	; 0x1cc2 <line_del+0x69a>
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
    1cb0:	01 99       	sbic	0x00, 1	; 0
    1cb2:	25 c0       	rjmp	.+74     	; 0x1cfe <line_del+0x6d6>
    1cb4:	25 96       	adiw	r28, 0x05	; 5
    1cb6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cb8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cba:	25 97       	sbiw	r28, 0x05	; 5
    1cbc:	80 81       	ld	r24, Z
    1cbe:	ed a5       	ldd	r30, Y+45	; 0x2d
    1cc0:	fe a5       	ldd	r31, Y+46	; 0x2e
    1cc2:	20 81       	ld	r18, Z
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	04 9f       	mul	r16, r20
    1cca:	c0 01       	movw	r24, r0
    1ccc:	05 9f       	mul	r16, r21
    1cce:	90 0d       	add	r25, r0
    1cd0:	14 9f       	mul	r17, r20
    1cd2:	90 0d       	add	r25, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	64 e1       	ldi	r22, 0x14	; 20
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    1cde:	46 2f       	mov	r20, r22
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	02 9f       	mul	r16, r18
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	03 9f       	mul	r16, r19
    1ce8:	90 0d       	add	r25, r0
    1cea:	12 9f       	mul	r17, r18
    1cec:	90 0d       	add	r25, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	64 e1       	ldi	r22, 0x14	; 20
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	0e 94 24 20 	call	0x4048	; 0x4048 <__divmodhi4>
    1cf8:	84 2f       	mov	r24, r20
    1cfa:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
      delay(1);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
	  delcount++;
    1d06:	08 94       	sec
    1d08:	c1 1c       	adc	r12, r1
    1d0a:	d1 1c       	adc	r13, r1
	  delcount++;
	  }
  }
  else if((sen_dr>=5)&&(sen_dr<=6))
  { 
    while(delcount<=m_delay)
    1d0c:	ac 14       	cp	r10, r12
    1d0e:	bd 04       	cpc	r11, r13
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <line_del+0x6ec>
    1d12:	74 cf       	rjmp	.-280    	; 0x1bfc <line_del+0x5d4>
	  else if(s1_data) {motor_speed(sp[i][0]*mt_sp/20,sp[i][1]*mt_sp/20);}
      delay(1);
	  delcount++;
	} 
  }
}
    1d14:	cc 5b       	subi	r28, 0xBC	; 188
    1d16:	df 4f       	sbci	r29, 0xFF	; 255
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	9f 90       	pop	r9
    1d38:	8f 90       	pop	r8
    1d3a:	7f 90       	pop	r7
    1d3c:	6f 90       	pop	r6
    1d3e:	5f 90       	pop	r5
    1d40:	4f 90       	pop	r4
    1d42:	3f 90       	pop	r3
    1d44:	2f 90       	pop	r2
    1d46:	08 95       	ret

00001d48 <linedelay>:

void linedelay(unsigned char sen_dr, unsigned char mt_sp,unsigned int m_delay,unsigned int ps_delay)
{
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	98 2f       	mov	r25, r24
    1d50:	16 2f       	mov	r17, r22
    1d52:	fa 01       	movw	r30, r20
    1d54:	e9 01       	movw	r28, r18
line_del(0,sen_dr,mt_sp,m_delay);
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	69 2f       	mov	r22, r25
    1d5a:	41 2f       	mov	r20, r17
    1d5c:	9f 01       	movw	r18, r30
    1d5e:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
  if(ps_delay>0){motor(mt_sp,mt_sp,ps_delay);}
    1d62:	20 97       	sbiw	r28, 0x00	; 0
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <linedelay+0x28>
    1d66:	81 2f       	mov	r24, r17
    1d68:	61 2f       	mov	r22, r17
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>

}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	08 95       	ret

00001d78 <go>:
void go(unsigned int sp_delay, unsigned char sen_dr, signed char ls, signed char rs, unsigned char mt_sp,unsigned int ps_delay)
{
    1d78:	2f 92       	push	r2
    1d7a:	3f 92       	push	r3
    1d7c:	5f 92       	push	r5
    1d7e:	6f 92       	push	r6
    1d80:	7f 92       	push	r7
    1d82:	8f 92       	push	r8
    1d84:	9f 92       	push	r9
    1d86:	af 92       	push	r10
    1d88:	bf 92       	push	r11
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	2b 97       	sbiw	r28, 0x0b	; 11
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	6c 01       	movw	r12, r24
    1dac:	b6 2e       	mov	r11, r22
    1dae:	54 2e       	mov	r5, r20
    1db0:	a2 2e       	mov	r10, r18
unsigned char sen_data=0;
unsigned int sp_count=0;
unsigned char lsen_data=0;
unsigned char rsen_data=0;

if(sp_delay==0)
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <go+0x40>
    1db6:	66 c0       	rjmp	.+204    	; 0x1e84 <go+0x10c>
    1db8:	1b 86       	std	Y+11, r1	; 0x0b
    1dba:	1a 86       	std	Y+10, r1	; 0x0a
{
  while(sen_data==0)
  {
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
    1dbc:	c4 2e       	mov	r12, r20
    1dbe:	dd 24       	eor	r13, r13
    1dc0:	c7 fc       	sbrc	r12, 7
    1dc2:	d0 94       	com	r13
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}
    1dc4:	e2 2e       	mov	r14, r18
    1dc6:	ff 24       	eor	r15, r15
    1dc8:	e7 fc       	sbrc	r14, 7
    1dca:	f0 94       	com	r15
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=1;}else {sen_data=2;}}
    1dcc:	86 2e       	mov	r8, r22
    1dce:	99 24       	eor	r9, r9
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	88 22       	and	r8, r24
    1dd4:	99 24       	eor	r9, r9

if(sp_delay==0)
{
  while(sen_data==0)
  {
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
    1dd6:	80 b1       	in	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	8c 21       	and	r24, r12
    1ddc:	9d 21       	and	r25, r13
    1dde:	89 2b       	or	r24, r25
    1de0:	11 f4       	brne	.+4      	; 0x1de6 <go+0x6e>
    1de2:	e1 e0       	ldi	r30, 0x01	; 1
    1de4:	eb 87       	std	Y+11, r30	; 0x0b
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}
    1de6:	80 b1       	in	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	8e 21       	and	r24, r14
    1dec:	9f 21       	and	r25, r15
    1dee:	89 2b       	or	r24, r25
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <go+0x7e>
    1df2:	f1 e0       	ldi	r31, 0x01	; 1
    1df4:	fa 87       	std	Y+10, r31	; 0x0a
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=1;}else {sen_data=2;}}
    1df6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	51 f4       	brne	.+20     	; 0x1e10 <go+0x98>
    1dfc:	ea 85       	ldd	r30, Y+10	; 0x0a
    1dfe:	e1 30       	cpi	r30, 0x01	; 1
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <go+0x98>
    1e02:	81 14       	cp	r8, r1
    1e04:	91 04       	cpc	r9, r1
    1e06:	11 f4       	brne	.+4      	; 0x1e0c <go+0x94>
    1e08:	12 e0       	ldi	r17, 0x02	; 2
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <go+0x9a>
    1e0c:	11 e0       	ldi	r17, 0x01	; 1
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <go+0x9a>
    1e10:	10 e0       	ldi	r17, 0x00	; 0
	line_del(0,sen_dr,mt_sp,1);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	6b 2d       	mov	r22, r11
    1e16:	40 2f       	mov	r20, r16
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
unsigned char lsen_data=0;
unsigned char rsen_data=0;

if(sp_delay==0)
{
  while(sen_data==0)
    1e20:	11 23       	and	r17, r17
    1e22:	c9 f2       	breq	.-78     	; 0x1dd6 <go+0x5e>
    1e24:	19 86       	std	Y+9, r1	; 0x09
    1e26:	1c 82       	std	Y+4, r1	; 0x04
  rsen_data=0;
  while(sen_data==1)
  {	
    if(((!(PINF&ls))==0)||(ls==0)) {lsen_data=1;}
	if(((!(PINF&rs))==0)||(rs==0)) {rsen_data=1;}
	if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=2;}}
    1e28:	8b 2c       	mov	r8, r11
    1e2a:	99 24       	eor	r9, r9
    1e2c:	f1 e0       	ldi	r31, 0x01	; 1
    1e2e:	8f 22       	and	r8, r31
    1e30:	99 24       	eor	r9, r9
    1e32:	25 c0       	rjmp	.+74     	; 0x1e7e <go+0x106>
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==1)
  {	
    if(((!(PINF&ls))==0)||(ls==0)) {lsen_data=1;}
    1e34:	80 b1       	in	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	8c 21       	and	r24, r12
    1e3a:	9d 21       	and	r25, r13
    1e3c:	89 2b       	or	r24, r25
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <go+0xcc>
    1e40:	55 20       	and	r5, r5
    1e42:	11 f4       	brne	.+4      	; 0x1e48 <go+0xd0>
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 87       	std	Y+9, r24	; 0x09
	if(((!(PINF&rs))==0)||(rs==0)) {rsen_data=1;}
    1e48:	80 b1       	in	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	8e 21       	and	r24, r14
    1e4e:	9f 21       	and	r25, r15
    1e50:	89 2b       	or	r24, r25
    1e52:	11 f4       	brne	.+4      	; 0x1e58 <go+0xe0>
    1e54:	aa 20       	and	r10, r10
    1e56:	11 f4       	brne	.+4      	; 0x1e5c <go+0xe4>
    1e58:	e1 e0       	ldi	r30, 0x01	; 1
    1e5a:	ec 83       	std	Y+4, r30	; 0x04
	if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=2;}}
    1e5c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e5e:	f1 30       	cpi	r31, 0x01	; 1
    1e60:	39 f4       	brne	.+14     	; 0x1e70 <go+0xf8>
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <go+0xf8>
    1e68:	81 14       	cp	r8, r1
    1e6a:	91 04       	cpc	r9, r1
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <go+0xf8>
    1e6e:	12 e0       	ldi	r17, 0x02	; 2
	line_del(0,sen_dr,mt_sp,1);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	6b 2d       	mov	r22, r11
    1e74:	40 2f       	mov	r20, r16
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=1;}else {sen_data=2;}}
	line_del(0,sen_dr,mt_sp,1);
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==1)
    1e7e:	11 30       	cpi	r17, 0x01	; 1
    1e80:	c9 f2       	breq	.-78     	; 0x1e34 <go+0xbc>
    1e82:	cc c0       	rjmp	.+408    	; 0x201c <go+0x2a4>
    1e84:	18 86       	std	Y+8, r1	; 0x08
    1e86:	22 24       	eor	r2, r2
    1e88:	33 24       	eor	r3, r3
    1e8a:	1b 82       	std	Y+3, r1	; 0x03
}
else 
{
  while((sp_count<=sp_delay)&&(sen_data==0))
  { 
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
    1e8c:	64 2e       	mov	r6, r20
    1e8e:	77 24       	eor	r7, r7
    1e90:	67 fc       	sbrc	r6, 7
    1e92:	70 94       	com	r7
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}
    1e94:	82 2e       	mov	r8, r18
    1e96:	99 24       	eor	r9, r9
    1e98:	87 fc       	sbrc	r8, 7
    1e9a:	90 94       	com	r9
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=1;}else {sen_data=4;}}
    1e9c:	e6 2e       	mov	r14, r22
    1e9e:	ff 24       	eor	r15, r15
    1ea0:	e1 e0       	ldi	r30, 0x01	; 1
    1ea2:	ee 22       	and	r14, r30
    1ea4:	ff 24       	eor	r15, r15
}
else 
{
  while((sp_count<=sp_delay)&&(sen_data==0))
  { 
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
    1ea6:	80 b1       	in	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	86 21       	and	r24, r6
    1eac:	97 21       	and	r25, r7
    1eae:	89 2b       	or	r24, r25
    1eb0:	11 f4       	brne	.+4      	; 0x1eb6 <go+0x13e>
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	f8 87       	std	Y+8, r31	; 0x08
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}
    1eb6:	80 b1       	in	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	88 21       	and	r24, r8
    1ebc:	99 21       	and	r25, r9
    1ebe:	89 2b       	or	r24, r25
    1ec0:	11 f4       	brne	.+4      	; 0x1ec6 <go+0x14e>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=1;}else {sen_data=4;}}
    1ec6:	e8 85       	ldd	r30, Y+8	; 0x08
    1ec8:	e1 30       	cpi	r30, 0x01	; 1
    1eca:	51 f4       	brne	.+20     	; 0x1ee0 <go+0x168>
    1ecc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ece:	f1 30       	cpi	r31, 0x01	; 1
    1ed0:	39 f4       	brne	.+14     	; 0x1ee0 <go+0x168>
    1ed2:	e1 14       	cp	r14, r1
    1ed4:	f1 04       	cpc	r15, r1
    1ed6:	11 f4       	brne	.+4      	; 0x1edc <go+0x164>
    1ed8:	14 e0       	ldi	r17, 0x04	; 4
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <go+0x16a>
    1edc:	11 e0       	ldi	r17, 0x01	; 1
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <go+0x16a>
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
	line_del(1,sen_dr,mt_sp,1);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	6b 2d       	mov	r22, r11
    1ee6:	40 2f       	mov	r20, r16
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
	if(sp_count>=sp_delay){sen_data=2;}
    1ef0:	2c 14       	cp	r2, r12
    1ef2:	3d 04       	cpc	r3, r13
    1ef4:	10 f0       	brcs	.+4      	; 0x1efa <go+0x182>
    1ef6:	12 e0       	ldi	r17, 0x02	; 2
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <go+0x188>
	else {sp_count++;}
    1efa:	08 94       	sec
    1efc:	21 1c       	adc	r2, r1
    1efe:	31 1c       	adc	r3, r1
	line_del(0,sen_dr,mt_sp,1);
  }
}
else 
{
  while((sp_count<=sp_delay)&&(sen_data==0))
    1f00:	c2 14       	cp	r12, r2
    1f02:	d3 04       	cpc	r13, r3
    1f04:	18 f4       	brcc	.+6      	; 0x1f0c <go+0x194>
	if(sp_count>=sp_delay){sen_data=2;}
	else {sp_count++;}
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==1)
    1f06:	11 30       	cpi	r17, 0x01	; 1
    1f08:	a9 f5       	brne	.+106    	; 0x1f74 <go+0x1fc>
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <go+0x19a>
	line_del(0,sen_dr,mt_sp,1);
  }
}
else 
{
  while((sp_count<=sp_delay)&&(sen_data==0))
    1f0c:	11 23       	and	r17, r17
    1f0e:	59 f2       	breq	.-106    	; 0x1ea6 <go+0x12e>
    1f10:	fa cf       	rjmp	.-12     	; 0x1f06 <go+0x18e>
    1f12:	1f 82       	std	Y+7, r1	; 0x07
    1f14:	10 e0       	ldi	r17, 0x00	; 0
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==1)
  {
    if(((!(PINF&ls))==0)||(ls==0)) {lsen_data=1;}
    1f16:	80 b1       	in	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	86 21       	and	r24, r6
    1f1c:	97 21       	and	r25, r7
    1f1e:	89 2b       	or	r24, r25
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <go+0x1ae>
    1f22:	55 20       	and	r5, r5
    1f24:	11 f4       	brne	.+4      	; 0x1f2a <go+0x1b2>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	8f 83       	std	Y+7, r24	; 0x07
	if(((!(PINF&rs))==0)||(rs==0)) {rsen_data=1;}
    1f2a:	80 b1       	in	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	88 21       	and	r24, r8
    1f30:	99 21       	and	r25, r9
    1f32:	89 2b       	or	r24, r25
    1f34:	11 f4       	brne	.+4      	; 0x1f3a <go+0x1c2>
    1f36:	aa 20       	and	r10, r10
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <go+0x1c4>
    1f3a:	11 e0       	ldi	r17, 0x01	; 1
    if((lsen_data==1)&&(rsen_data==1)){sen_data=4;break;}	
    1f3c:	ef 81       	ldd	r30, Y+7	; 0x07
    1f3e:	e1 30       	cpi	r30, 0x01	; 1
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <go+0x1ce>
    1f42:	11 30       	cpi	r17, 0x01	; 1
    1f44:	b1 f0       	breq	.+44     	; 0x1f72 <go+0x1fa>
    
	if(sp_count<=sp_delay){line_del(1,sen_dr,mt_sp,1);sp_count++;}
    1f46:	c2 14       	cp	r12, r2
    1f48:	d3 04       	cpc	r13, r3
    1f4a:	58 f0       	brcs	.+22     	; 0x1f62 <go+0x1ea>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	6b 2d       	mov	r22, r11
    1f50:	40 2f       	mov	r20, r16
    1f52:	21 e0       	ldi	r18, 0x01	; 1
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
    1f5a:	08 94       	sec
    1f5c:	21 1c       	adc	r2, r1
    1f5e:	31 1c       	adc	r3, r1
    1f60:	da cf       	rjmp	.-76     	; 0x1f16 <go+0x19e>
	else{line_del(2,sen_dr,mt_sp,1);}
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	6b 2d       	mov	r22, r11
    1f66:	40 2f       	mov	r20, r16
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
    1f70:	d2 cf       	rjmp	.-92     	; 0x1f16 <go+0x19e>
    1f72:	14 e0       	ldi	r17, 0x04	; 4
    1f74:	1e 82       	std	Y+6, r1	; 0x06
    1f76:	1a 82       	std	Y+2, r1	; 0x02
  rsen_data=0;
  while(sen_data==2)
  {  
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}	 
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=3;}else{sen_data=4;}}
    1f78:	eb 2c       	mov	r14, r11
    1f7a:	ff 24       	eor	r15, r15
    1f7c:	f1 e0       	ldi	r31, 0x01	; 1
    1f7e:	ef 22       	and	r14, r31
    1f80:	ff 24       	eor	r15, r15
    1f82:	23 c0       	rjmp	.+70     	; 0x1fca <go+0x252>
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==2)
  {  
    if(((!(PINF&ls)))||(ls==0)) {lsen_data=1;}
    1f84:	80 b1       	in	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	86 21       	and	r24, r6
    1f8a:	97 21       	and	r25, r7
    1f8c:	89 2b       	or	r24, r25
    1f8e:	11 f4       	brne	.+4      	; 0x1f94 <go+0x21c>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	8e 83       	std	Y+6, r24	; 0x06
	if(((!(PINF&rs)))||(rs==0)) {rsen_data=1;}	 
    1f94:	80 b1       	in	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	88 21       	and	r24, r8
    1f9a:	99 21       	and	r25, r9
    1f9c:	89 2b       	or	r24, r25
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <go+0x22c>
    1fa0:	e1 e0       	ldi	r30, 0x01	; 1
    1fa2:	ea 83       	std	Y+2, r30	; 0x02
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=3;}else{sen_data=4;}}
    1fa4:	fe 81       	ldd	r31, Y+6	; 0x06
    1fa6:	f1 30       	cpi	r31, 0x01	; 1
    1fa8:	49 f4       	brne	.+18     	; 0x1fbc <go+0x244>
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <go+0x244>
    1fb0:	e1 14       	cp	r14, r1
    1fb2:	f1 04       	cpc	r15, r1
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <go+0x242>
    1fb6:	14 e0       	ldi	r17, 0x04	; 4
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <go+0x244>
    1fba:	13 e0       	ldi	r17, 0x03	; 3
  	line_del(2,sen_dr,mt_sp,1);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	6b 2d       	mov	r22, r11
    1fc0:	40 2f       	mov	r20, r16
    1fc2:	21 e0       	ldi	r18, 0x01	; 1
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
	if(sp_count<=sp_delay){line_del(1,sen_dr,mt_sp,1);sp_count++;}
	else{line_del(2,sen_dr,mt_sp,1);}
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==2)
    1fca:	12 30       	cpi	r17, 0x02	; 2
    1fcc:	d9 f2       	breq	.-74     	; 0x1f84 <go+0x20c>
    1fce:	1d 82       	std	Y+5, r1	; 0x05
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	22 c0       	rjmp	.+68     	; 0x2018 <go+0x2a0>
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==3)
  {
    if(((!(PINF&ls))==0)||(ls==0)) {lsen_data=1;}
    1fd4:	80 b1       	in	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	86 21       	and	r24, r6
    1fda:	97 21       	and	r25, r7
    1fdc:	89 2b       	or	r24, r25
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <go+0x26c>
    1fe0:	55 20       	and	r5, r5
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <go+0x270>
    1fe4:	e1 e0       	ldi	r30, 0x01	; 1
    1fe6:	ed 83       	std	Y+5, r30	; 0x05
	if(((!(PINF&rs))==0)||(rs==0)) {rsen_data=1;}
    1fe8:	80 b1       	in	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	88 21       	and	r24, r8
    1fee:	99 21       	and	r25, r9
    1ff0:	89 2b       	or	r24, r25
    1ff2:	11 f4       	brne	.+4      	; 0x1ff8 <go+0x280>
    1ff4:	aa 20       	and	r10, r10
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <go+0x284>
    1ff8:	f1 e0       	ldi	r31, 0x01	; 1
    1ffa:	f9 83       	std	Y+1, r31	; 0x01
	if((lsen_data==1)&&(rsen_data==1)){sen_data=4;}
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	21 f4       	brne	.+8      	; 0x200a <go+0x292>
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	e1 30       	cpi	r30, 0x01	; 1
    2006:	09 f4       	brne	.+2      	; 0x200a <go+0x292>
    2008:	14 e0       	ldi	r17, 0x04	; 4
  	line_del(2,sen_dr,mt_sp,1);
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	6b 2d       	mov	r22, r11
    200e:	40 2f       	mov	r20, r16
    2010:	21 e0       	ldi	r18, 0x01	; 1
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
    if((lsen_data==1)&&(rsen_data==1)){if((sen_dr%2)==1){sen_data=3;}else{sen_data=4;}}
  	line_del(2,sen_dr,mt_sp,1);
  }
  lsen_data=0;
  rsen_data=0;
  while(sen_data==3)
    2018:	13 30       	cpi	r17, 0x03	; 3
    201a:	e1 f2       	breq	.-72     	; 0x1fd4 <go+0x25c>
	if(((!(PINF&rs))==0)||(rs==0)) {rsen_data=1;}
	if((lsen_data==1)&&(rsen_data==1)){sen_data=4;}
  	line_del(2,sen_dr,mt_sp,1);
  }
}
buzzer(20,1,init_buzzer_data);
    201c:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	90 93 15 02 	sts	0x0215, r25
    2026:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    202a:	84 e1       	ldi	r24, 0x14	; 20
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	90 93 0b 02 	sts	0x020B, r25
    2032:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
    2036:	80 91 10 02 	lds	r24, 0x0210
    203a:	90 91 11 02 	lds	r25, 0x0211
    203e:	90 93 0f 02 	sts	0x020F, r25
    2042:	80 93 0e 02 	sts	0x020E, r24
}
    2046:	2b 96       	adiw	r28, 0x0b	; 11
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	7f 90       	pop	r7
    206c:	6f 90       	pop	r6
    206e:	5f 90       	pop	r5
    2070:	3f 90       	pop	r3
    2072:	2f 90       	pop	r2
    2074:	08 95       	ret

00002076 <s_driver>:
void ldriver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
  s_ldriver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
}
void s_driver(signed char dr1, signed char dr2, signed char dr3, signed char dr34, signed char dr4, signed char dr45, signed char dr5, signed char dr56, signed char dr6, signed char dr7, signed char dr8)
{
    2076:	8f 92       	push	r8
    2078:	af 92       	push	r10
    207a:	cf 92       	push	r12
    207c:	ef 92       	push	r14
    207e:	0f 93       	push	r16
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	3b 85       	ldd	r19, Y+11	; 0x0b
  if(dr45>dr4)
    208c:	0e 15       	cp	r16, r14
    208e:	0c f0       	brlt	.+2      	; 0x2092 <s_driver+0x1c>
    2090:	10 c1       	rjmp	.+544    	; 0x22b2 <s_driver+0x23c>
  {
    if(dr5>dr45)
    2092:	ec 14       	cp	r14, r12
    2094:	0c f0       	brlt	.+2      	; 0x2098 <s_driver+0x22>
    2096:	e2 c0       	rjmp	.+452    	; 0x225c <s_driver+0x1e6>
	{
	  if(dr56>dr5)
    2098:	ca 14       	cp	r12, r10
    209a:	0c f0       	brlt	.+2      	; 0x209e <s_driver+0x28>
    209c:	b4 c0       	rjmp	.+360    	; 0x2206 <s_driver+0x190>
	  {
		if(dr6>dr56)
    209e:	a8 14       	cp	r10, r8
    20a0:	0c f0       	brlt	.+2      	; 0x20a4 <s_driver+0x2e>
    20a2:	86 c0       	rjmp	.+268    	; 0x21b0 <s_driver+0x13a>
		{
		  if(dr7>dr6)
    20a4:	89 16       	cp	r8, r25
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <s_driver+0x34>
    20a8:	58 c0       	rjmp	.+176    	; 0x215a <s_driver+0xe4>
		  {
		    if(dr8>dr7) {all_driver(dr1,dr8,dr2,dr8,dr3,dr8,dr34,dr8,dr4,dr8,dr45,dr8,dr5,dr8,dr56,dr8,dr6,dr8,dr7,dr8,dr8,dr8);}
    20aa:	93 17       	cp	r25, r19
    20ac:	5c f5       	brge	.+86     	; 0x2104 <s_driver+0x8e>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    20ae:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    20b2:	30 93 2d 02 	sts	0x022D, r19
  sp[0][2]=dr2_l;
    20b6:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    20ba:	30 93 2f 02 	sts	0x022F, r19
  sp[0][4]=dr3_l;
    20be:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    20c2:	30 93 31 02 	sts	0x0231, r19
  sp[0][6]=dr34_l;
    20c6:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    20ca:	30 93 33 02 	sts	0x0233, r19
  sp[0][8]=dr4_l;
    20ce:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    20d2:	30 93 35 02 	sts	0x0235, r19
  sp[0][10]=dr45_l;
    20d6:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    20da:	30 93 37 02 	sts	0x0237, r19
  sp[0][12]=dr5_l;
    20de:	c0 92 38 02 	sts	0x0238, r12
  sp[0][13]=dr5_r;
    20e2:	30 93 39 02 	sts	0x0239, r19
  sp[0][14]=dr56_l;
    20e6:	a0 92 3a 02 	sts	0x023A, r10
  sp[0][15]=dr56_r;
    20ea:	30 93 3b 02 	sts	0x023B, r19
  sp[0][16]=dr6_l;
    20ee:	80 92 3c 02 	sts	0x023C, r8
  sp[0][17]=dr6_r;
    20f2:	30 93 3d 02 	sts	0x023D, r19
  sp[0][18]=dr7_l;
    20f6:	90 93 3e 02 	sts	0x023E, r25
  sp[0][19]=dr7_r;
    20fa:	30 93 3f 02 	sts	0x023F, r19
  sp[0][20]=dr8_l;
    20fe:	30 93 40 02 	sts	0x0240, r19
    2102:	b8 c1       	rjmp	.+880    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    2104:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2108:	90 93 2d 02 	sts	0x022D, r25
  sp[0][2]=dr2_l;
    210c:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    2110:	90 93 2f 02 	sts	0x022F, r25
  sp[0][4]=dr3_l;
    2114:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    2118:	90 93 31 02 	sts	0x0231, r25
  sp[0][6]=dr34_l;
    211c:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    2120:	90 93 33 02 	sts	0x0233, r25
  sp[0][8]=dr4_l;
    2124:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    2128:	90 93 35 02 	sts	0x0235, r25
  sp[0][10]=dr45_l;
    212c:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    2130:	90 93 37 02 	sts	0x0237, r25
  sp[0][12]=dr5_l;
    2134:	c0 92 38 02 	sts	0x0238, r12
  sp[0][13]=dr5_r;
    2138:	90 93 39 02 	sts	0x0239, r25
  sp[0][14]=dr56_l;
    213c:	a0 92 3a 02 	sts	0x023A, r10
  sp[0][15]=dr56_r;
    2140:	90 93 3b 02 	sts	0x023B, r25
  sp[0][16]=dr6_l;
    2144:	80 92 3c 02 	sts	0x023C, r8
  sp[0][17]=dr6_r;
    2148:	90 93 3d 02 	sts	0x023D, r25
  sp[0][18]=dr7_l;
    214c:	90 93 3e 02 	sts	0x023E, r25
  sp[0][19]=dr7_r;
    2150:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    2154:	90 93 40 02 	sts	0x0240, r25
    2158:	8d c1       	rjmp	.+794    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    215a:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    215e:	80 92 2d 02 	sts	0x022D, r8
  sp[0][2]=dr2_l;
    2162:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    2166:	80 92 2f 02 	sts	0x022F, r8
  sp[0][4]=dr3_l;
    216a:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    216e:	80 92 31 02 	sts	0x0231, r8
  sp[0][6]=dr34_l;
    2172:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    2176:	80 92 33 02 	sts	0x0233, r8
  sp[0][8]=dr4_l;
    217a:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    217e:	80 92 35 02 	sts	0x0235, r8
  sp[0][10]=dr45_l;
    2182:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    2186:	80 92 37 02 	sts	0x0237, r8
  sp[0][12]=dr5_l;
    218a:	c0 92 38 02 	sts	0x0238, r12
  sp[0][13]=dr5_r;
    218e:	80 92 39 02 	sts	0x0239, r8
  sp[0][14]=dr56_l;
    2192:	a0 92 3a 02 	sts	0x023A, r10
  sp[0][15]=dr56_r;
    2196:	80 92 3b 02 	sts	0x023B, r8
  sp[0][16]=dr6_l;
    219a:	80 92 3c 02 	sts	0x023C, r8
  sp[0][17]=dr6_r;
    219e:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    21a2:	80 92 3e 02 	sts	0x023E, r8
  sp[0][19]=dr7_r;
    21a6:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    21aa:	80 92 40 02 	sts	0x0240, r8
    21ae:	62 c1       	rjmp	.+708    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    21b0:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    21b4:	a0 92 2d 02 	sts	0x022D, r10
  sp[0][2]=dr2_l;
    21b8:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    21bc:	a0 92 2f 02 	sts	0x022F, r10
  sp[0][4]=dr3_l;
    21c0:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    21c4:	a0 92 31 02 	sts	0x0231, r10
  sp[0][6]=dr34_l;
    21c8:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    21cc:	a0 92 33 02 	sts	0x0233, r10
  sp[0][8]=dr4_l;
    21d0:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    21d4:	a0 92 35 02 	sts	0x0235, r10
  sp[0][10]=dr45_l;
    21d8:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    21dc:	a0 92 37 02 	sts	0x0237, r10
  sp[0][12]=dr5_l;
    21e0:	c0 92 38 02 	sts	0x0238, r12
  sp[0][13]=dr5_r;
    21e4:	a0 92 39 02 	sts	0x0239, r10
  sp[0][14]=dr56_l;
    21e8:	a0 92 3a 02 	sts	0x023A, r10
  sp[0][15]=dr56_r;
    21ec:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    21f0:	a0 92 3c 02 	sts	0x023C, r10
  sp[0][17]=dr6_r;
    21f4:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    21f8:	a0 92 3e 02 	sts	0x023E, r10
  sp[0][19]=dr7_r;
    21fc:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    2200:	a0 92 40 02 	sts	0x0240, r10
    2204:	37 c1       	rjmp	.+622    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    2206:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    220a:	c0 92 2d 02 	sts	0x022D, r12
  sp[0][2]=dr2_l;
    220e:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    2212:	c0 92 2f 02 	sts	0x022F, r12
  sp[0][4]=dr3_l;
    2216:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    221a:	c0 92 31 02 	sts	0x0231, r12
  sp[0][6]=dr34_l;
    221e:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    2222:	c0 92 33 02 	sts	0x0233, r12
  sp[0][8]=dr4_l;
    2226:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    222a:	c0 92 35 02 	sts	0x0235, r12
  sp[0][10]=dr45_l;
    222e:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    2232:	c0 92 37 02 	sts	0x0237, r12
  sp[0][12]=dr5_l;
    2236:	c0 92 38 02 	sts	0x0238, r12
  sp[0][13]=dr5_r;
    223a:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    223e:	c0 92 3a 02 	sts	0x023A, r12
  sp[0][15]=dr56_r;
    2242:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    2246:	c0 92 3c 02 	sts	0x023C, r12
  sp[0][17]=dr6_r;
    224a:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    224e:	c0 92 3e 02 	sts	0x023E, r12
  sp[0][19]=dr7_r;
    2252:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    2256:	c0 92 40 02 	sts	0x0240, r12
    225a:	0c c1       	rjmp	.+536    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    225c:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2260:	e0 92 2d 02 	sts	0x022D, r14
  sp[0][2]=dr2_l;
    2264:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    2268:	e0 92 2f 02 	sts	0x022F, r14
  sp[0][4]=dr3_l;
    226c:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    2270:	e0 92 31 02 	sts	0x0231, r14
  sp[0][6]=dr34_l;
    2274:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    2278:	e0 92 33 02 	sts	0x0233, r14
  sp[0][8]=dr4_l;
    227c:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    2280:	e0 92 35 02 	sts	0x0235, r14
  sp[0][10]=dr45_l;
    2284:	e0 92 36 02 	sts	0x0236, r14
  sp[0][11]=dr45_r;
    2288:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    228c:	e0 92 38 02 	sts	0x0238, r14
  sp[0][13]=dr5_r;
    2290:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    2294:	e0 92 3a 02 	sts	0x023A, r14
  sp[0][15]=dr56_r;
    2298:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    229c:	e0 92 3c 02 	sts	0x023C, r14
  sp[0][17]=dr6_r;
    22a0:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    22a4:	e0 92 3e 02 	sts	0x023E, r14
  sp[0][19]=dr7_r;
    22a8:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    22ac:	e0 92 40 02 	sts	0x0240, r14
    22b0:	e1 c0       	rjmp	.+450    	; 0x2474 <s_driver+0x3fe>
	}
	else {all_driver(dr1,dr45,dr2,dr45,dr3,dr45,dr34,dr45,dr4,dr45,dr45,dr45,dr45,dr5,dr45,dr56,dr45,dr6,dr45,dr7,dr45,dr8);}
  }
  else if(dr45<=dr4)
  {
    if(dr4<dr34)
    22b2:	02 17       	cp	r16, r18
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <s_driver+0x242>
    22b6:	b4 c0       	rjmp	.+360    	; 0x2420 <s_driver+0x3aa>
	{
	  if(dr34<dr3)
    22b8:	24 17       	cp	r18, r20
    22ba:	0c f0       	brlt	.+2      	; 0x22be <s_driver+0x248>
    22bc:	86 c0       	rjmp	.+268    	; 0x23ca <s_driver+0x354>
	  {
	    if(dr3<dr2)
    22be:	46 17       	cp	r20, r22
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <s_driver+0x24e>
    22c2:	58 c0       	rjmp	.+176    	; 0x2374 <s_driver+0x2fe>
		{
		  if(dr2<dr1) {all_driver(dr1,dr1,dr1,dr2,dr1,dr3,dr1,dr34,dr1,dr4,dr1,dr45,dr1,dr5,dr1,dr56,dr1,dr6,dr1,dr7,dr1,dr8);}
    22c4:	68 17       	cp	r22, r24
    22c6:	5c f5       	brge	.+86     	; 0x231e <s_driver+0x2a8>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    22c8:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    22cc:	80 93 2d 02 	sts	0x022D, r24
  sp[0][2]=dr2_l;
    22d0:	80 93 2e 02 	sts	0x022E, r24
  sp[0][3]=dr2_r;
    22d4:	60 93 2f 02 	sts	0x022F, r22
  sp[0][4]=dr3_l;
    22d8:	80 93 30 02 	sts	0x0230, r24
  sp[0][5]=dr3_r;
    22dc:	40 93 31 02 	sts	0x0231, r20
  sp[0][6]=dr34_l;
    22e0:	80 93 32 02 	sts	0x0232, r24
  sp[0][7]=dr34_r;
    22e4:	20 93 33 02 	sts	0x0233, r18
  sp[0][8]=dr4_l;
    22e8:	80 93 34 02 	sts	0x0234, r24
  sp[0][9]=dr4_r;
    22ec:	00 93 35 02 	sts	0x0235, r16
  sp[0][10]=dr45_l;
    22f0:	80 93 36 02 	sts	0x0236, r24
  sp[0][11]=dr45_r;
    22f4:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    22f8:	80 93 38 02 	sts	0x0238, r24
  sp[0][13]=dr5_r;
    22fc:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    2300:	80 93 3a 02 	sts	0x023A, r24
  sp[0][15]=dr56_r;
    2304:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    2308:	80 93 3c 02 	sts	0x023C, r24
  sp[0][17]=dr6_r;
    230c:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    2310:	80 93 3e 02 	sts	0x023E, r24
  sp[0][19]=dr7_r;
    2314:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    2318:	80 93 40 02 	sts	0x0240, r24
    231c:	ab c0       	rjmp	.+342    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    231e:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2322:	60 93 2d 02 	sts	0x022D, r22
  sp[0][2]=dr2_l;
    2326:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    232a:	60 93 2f 02 	sts	0x022F, r22
  sp[0][4]=dr3_l;
    232e:	60 93 30 02 	sts	0x0230, r22
  sp[0][5]=dr3_r;
    2332:	40 93 31 02 	sts	0x0231, r20
  sp[0][6]=dr34_l;
    2336:	60 93 32 02 	sts	0x0232, r22
  sp[0][7]=dr34_r;
    233a:	20 93 33 02 	sts	0x0233, r18
  sp[0][8]=dr4_l;
    233e:	60 93 34 02 	sts	0x0234, r22
  sp[0][9]=dr4_r;
    2342:	00 93 35 02 	sts	0x0235, r16
  sp[0][10]=dr45_l;
    2346:	60 93 36 02 	sts	0x0236, r22
  sp[0][11]=dr45_r;
    234a:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    234e:	60 93 38 02 	sts	0x0238, r22
  sp[0][13]=dr5_r;
    2352:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    2356:	60 93 3a 02 	sts	0x023A, r22
  sp[0][15]=dr56_r;
    235a:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    235e:	60 93 3c 02 	sts	0x023C, r22
  sp[0][17]=dr6_r;
    2362:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    2366:	60 93 3e 02 	sts	0x023E, r22
  sp[0][19]=dr7_r;
    236a:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    236e:	60 93 40 02 	sts	0x0240, r22
    2372:	80 c0       	rjmp	.+256    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    2374:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2378:	40 93 2d 02 	sts	0x022D, r20
  sp[0][2]=dr2_l;
    237c:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    2380:	40 93 2f 02 	sts	0x022F, r20
  sp[0][4]=dr3_l;
    2384:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    2388:	40 93 31 02 	sts	0x0231, r20
  sp[0][6]=dr34_l;
    238c:	40 93 32 02 	sts	0x0232, r20
  sp[0][7]=dr34_r;
    2390:	20 93 33 02 	sts	0x0233, r18
  sp[0][8]=dr4_l;
    2394:	40 93 34 02 	sts	0x0234, r20
  sp[0][9]=dr4_r;
    2398:	00 93 35 02 	sts	0x0235, r16
  sp[0][10]=dr45_l;
    239c:	40 93 36 02 	sts	0x0236, r20
  sp[0][11]=dr45_r;
    23a0:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    23a4:	40 93 38 02 	sts	0x0238, r20
  sp[0][13]=dr5_r;
    23a8:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    23ac:	40 93 3a 02 	sts	0x023A, r20
  sp[0][15]=dr56_r;
    23b0:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    23b4:	40 93 3c 02 	sts	0x023C, r20
  sp[0][17]=dr6_r;
    23b8:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    23bc:	40 93 3e 02 	sts	0x023E, r20
  sp[0][19]=dr7_r;
    23c0:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    23c4:	40 93 40 02 	sts	0x0240, r20
    23c8:	55 c0       	rjmp	.+170    	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    23ca:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    23ce:	20 93 2d 02 	sts	0x022D, r18
  sp[0][2]=dr2_l;
    23d2:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    23d6:	20 93 2f 02 	sts	0x022F, r18
  sp[0][4]=dr3_l;
    23da:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    23de:	20 93 31 02 	sts	0x0231, r18
  sp[0][6]=dr34_l;
    23e2:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    23e6:	20 93 33 02 	sts	0x0233, r18
  sp[0][8]=dr4_l;
    23ea:	20 93 34 02 	sts	0x0234, r18
  sp[0][9]=dr4_r;
    23ee:	00 93 35 02 	sts	0x0235, r16
  sp[0][10]=dr45_l;
    23f2:	20 93 36 02 	sts	0x0236, r18
  sp[0][11]=dr45_r;
    23f6:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    23fa:	20 93 38 02 	sts	0x0238, r18
  sp[0][13]=dr5_r;
    23fe:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    2402:	20 93 3a 02 	sts	0x023A, r18
  sp[0][15]=dr56_r;
    2406:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    240a:	20 93 3c 02 	sts	0x023C, r18
  sp[0][17]=dr6_r;
    240e:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    2412:	20 93 3e 02 	sts	0x023E, r18
  sp[0][19]=dr7_r;
    2416:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    241a:	20 93 40 02 	sts	0x0240, r18
    241e:	2a c0       	rjmp	.+84     	; 0x2474 <s_driver+0x3fe>
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[0][0]=dr1_l;
    2420:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2424:	00 93 2d 02 	sts	0x022D, r16
  sp[0][2]=dr2_l;
    2428:	60 93 2e 02 	sts	0x022E, r22
  sp[0][3]=dr2_r;
    242c:	00 93 2f 02 	sts	0x022F, r16
  sp[0][4]=dr3_l;
    2430:	40 93 30 02 	sts	0x0230, r20
  sp[0][5]=dr3_r;
    2434:	00 93 31 02 	sts	0x0231, r16
  sp[0][6]=dr34_l;
    2438:	20 93 32 02 	sts	0x0232, r18
  sp[0][7]=dr34_r;
    243c:	00 93 33 02 	sts	0x0233, r16
  sp[0][8]=dr4_l;
    2440:	00 93 34 02 	sts	0x0234, r16
  sp[0][9]=dr4_r;
    2444:	00 93 35 02 	sts	0x0235, r16
  sp[0][10]=dr45_l;
    2448:	00 93 36 02 	sts	0x0236, r16
  sp[0][11]=dr45_r;
    244c:	e0 92 37 02 	sts	0x0237, r14
  sp[0][12]=dr5_l;
    2450:	00 93 38 02 	sts	0x0238, r16
  sp[0][13]=dr5_r;
    2454:	c0 92 39 02 	sts	0x0239, r12
  sp[0][14]=dr56_l;
    2458:	00 93 3a 02 	sts	0x023A, r16
  sp[0][15]=dr56_r;
    245c:	a0 92 3b 02 	sts	0x023B, r10
  sp[0][16]=dr6_l;
    2460:	00 93 3c 02 	sts	0x023C, r16
  sp[0][17]=dr6_r;
    2464:	80 92 3d 02 	sts	0x023D, r8
  sp[0][18]=dr7_l;
    2468:	00 93 3e 02 	sts	0x023E, r16
  sp[0][19]=dr7_r;
    246c:	90 93 3f 02 	sts	0x023F, r25
  sp[0][20]=dr8_l;
    2470:	00 93 40 02 	sts	0x0240, r16
  sp[0][21]=dr8_r;
    2474:	30 93 41 02 	sts	0x0241, r19
	  else {all_driver(dr1,dr34,dr2,dr34,dr3,dr34,dr34,dr34,dr34,dr4,dr34,dr45,dr34,dr5,dr34,dr56,dr34,dr6,dr34,dr7,dr34,dr8);}
	}
	else{all_driver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	0f 91       	pop	r16
    247e:	ef 90       	pop	r14
    2480:	cf 90       	pop	r12
    2482:	af 90       	pop	r10
    2484:	8f 90       	pop	r8
    2486:	08 95       	ret

00002488 <driver>:
buzzer(20,1,init_buzzer_data);
}


void driver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
    2488:	8f 92       	push	r8
    248a:	af 92       	push	r10
    248c:	cf 92       	push	r12
    248e:	ef 92       	push	r14
    2490:	0f 93       	push	r16
    2492:	98 2f       	mov	r25, r24
    2494:	c6 2e       	mov	r12, r22
    2496:	a4 2e       	mov	r10, r20
    2498:	82 2e       	mov	r8, r18
    249a:	60 2f       	mov	r22, r16
    249c:	8e 2d       	mov	r24, r14
  s_driver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <driver+0x18>
    24a0:	ed b7       	in	r30, 0x3d	; 61
    24a2:	fe b7       	in	r31, 0x3e	; 62
    24a4:	01 83       	std	Z+1, r16	; 0x01
    24a6:	e2 82       	std	Z+2, r14	; 0x02
    24a8:	42 2f       	mov	r20, r18
    24aa:	2a 2d       	mov	r18, r10
    24ac:	0c 2d       	mov	r16, r12
    24ae:	e9 2e       	mov	r14, r25
    24b0:	0e 94 3b 10 	call	0x2076	; 0x2076 <s_driver>
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
}
    24b8:	0f 91       	pop	r16
    24ba:	ef 90       	pop	r14
    24bc:	cf 90       	pop	r12
    24be:	af 90       	pop	r10
    24c0:	8f 90       	pop	r8
    24c2:	08 95       	ret

000024c4 <s_hdriver>:
	else{all_driver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
void s_hdriver(signed char dr1, signed char dr2, signed char dr3, signed char dr34, signed char dr4, signed char dr45, signed char dr5, signed char dr56, signed char dr6, signed char dr7, signed char dr8)
{
    24c4:	8f 92       	push	r8
    24c6:	af 92       	push	r10
    24c8:	cf 92       	push	r12
    24ca:	ef 92       	push	r14
    24cc:	0f 93       	push	r16
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	3b 85       	ldd	r19, Y+11	; 0x0b
  if(dr45>dr4)
    24da:	0e 15       	cp	r16, r14
    24dc:	0c f0       	brlt	.+2      	; 0x24e0 <s_hdriver+0x1c>
    24de:	10 c1       	rjmp	.+544    	; 0x2700 <s_hdriver+0x23c>
  {
    if(dr5>dr45)
    24e0:	ec 14       	cp	r14, r12
    24e2:	0c f0       	brlt	.+2      	; 0x24e6 <s_hdriver+0x22>
    24e4:	e2 c0       	rjmp	.+452    	; 0x26aa <s_hdriver+0x1e6>
	{
	  if(dr56>dr5)
    24e6:	ca 14       	cp	r12, r10
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <s_hdriver+0x28>
    24ea:	b4 c0       	rjmp	.+360    	; 0x2654 <s_hdriver+0x190>
	  {
		if(dr6>dr56)
    24ec:	a8 14       	cp	r10, r8
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <s_hdriver+0x2e>
    24f0:	86 c0       	rjmp	.+268    	; 0x25fe <s_hdriver+0x13a>
		{
		  if(dr7>dr6)
    24f2:	89 16       	cp	r8, r25
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <s_hdriver+0x34>
    24f6:	58 c0       	rjmp	.+176    	; 0x25a8 <s_hdriver+0xe4>
		  {
		    if(dr8>dr7) {all_hdriver(dr1,dr8,dr2,dr8,dr3,dr8,dr34,dr8,dr4,dr8,dr45,dr8,dr5,dr8,dr56,dr8,dr6,dr8,dr7,dr8,dr8,dr8);}
    24f8:	93 17       	cp	r25, r19
    24fa:	5c f5       	brge	.+86     	; 0x2552 <s_hdriver+0x8e>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    24fc:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2500:	30 93 43 02 	sts	0x0243, r19
  sp[1][2]=dr2_l;
    2504:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    2508:	30 93 45 02 	sts	0x0245, r19
  sp[1][4]=dr3_l;
    250c:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2510:	30 93 47 02 	sts	0x0247, r19
  sp[1][6]=dr34_l;
    2514:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    2518:	30 93 49 02 	sts	0x0249, r19
  sp[1][8]=dr4_l;
    251c:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    2520:	30 93 4b 02 	sts	0x024B, r19
  sp[1][10]=dr45_l;
    2524:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    2528:	30 93 4d 02 	sts	0x024D, r19
  sp[1][12]=dr5_l;
    252c:	c0 92 4e 02 	sts	0x024E, r12
  sp[1][13]=dr5_r;
    2530:	30 93 4f 02 	sts	0x024F, r19
  sp[1][14]=dr56_l;
    2534:	a0 92 50 02 	sts	0x0250, r10
  sp[1][15]=dr56_r;
    2538:	30 93 51 02 	sts	0x0251, r19
  sp[1][16]=dr6_l;
    253c:	80 92 52 02 	sts	0x0252, r8
  sp[1][17]=dr6_r;
    2540:	30 93 53 02 	sts	0x0253, r19
  sp[1][18]=dr7_l;
    2544:	90 93 54 02 	sts	0x0254, r25
  sp[1][19]=dr7_r;
    2548:	30 93 55 02 	sts	0x0255, r19
  sp[1][20]=dr8_l;
    254c:	30 93 56 02 	sts	0x0256, r19
    2550:	bb c1       	rjmp	.+886    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    2552:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2556:	90 93 43 02 	sts	0x0243, r25
  sp[1][2]=dr2_l;
    255a:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    255e:	90 93 45 02 	sts	0x0245, r25
  sp[1][4]=dr3_l;
    2562:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2566:	90 93 47 02 	sts	0x0247, r25
  sp[1][6]=dr34_l;
    256a:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    256e:	90 93 49 02 	sts	0x0249, r25
  sp[1][8]=dr4_l;
    2572:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    2576:	90 93 4b 02 	sts	0x024B, r25
  sp[1][10]=dr45_l;
    257a:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    257e:	90 93 4d 02 	sts	0x024D, r25
  sp[1][12]=dr5_l;
    2582:	c0 92 4e 02 	sts	0x024E, r12
  sp[1][13]=dr5_r;
    2586:	90 93 4f 02 	sts	0x024F, r25
  sp[1][14]=dr56_l;
    258a:	a0 92 50 02 	sts	0x0250, r10
  sp[1][15]=dr56_r;
    258e:	90 93 51 02 	sts	0x0251, r25
  sp[1][16]=dr6_l;
    2592:	80 92 52 02 	sts	0x0252, r8
  sp[1][17]=dr6_r;
    2596:	90 93 53 02 	sts	0x0253, r25
  sp[1][18]=dr7_l;
    259a:	90 93 54 02 	sts	0x0254, r25
  sp[1][19]=dr7_r;
    259e:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    25a2:	90 93 56 02 	sts	0x0256, r25
    25a6:	90 c1       	rjmp	.+800    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    25a8:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    25ac:	80 92 43 02 	sts	0x0243, r8
  sp[1][2]=dr2_l;
    25b0:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    25b4:	80 92 45 02 	sts	0x0245, r8
  sp[1][4]=dr3_l;
    25b8:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    25bc:	80 92 47 02 	sts	0x0247, r8
  sp[1][6]=dr34_l;
    25c0:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    25c4:	80 92 49 02 	sts	0x0249, r8
  sp[1][8]=dr4_l;
    25c8:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    25cc:	80 92 4b 02 	sts	0x024B, r8
  sp[1][10]=dr45_l;
    25d0:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    25d4:	80 92 4d 02 	sts	0x024D, r8
  sp[1][12]=dr5_l;
    25d8:	c0 92 4e 02 	sts	0x024E, r12
  sp[1][13]=dr5_r;
    25dc:	80 92 4f 02 	sts	0x024F, r8
  sp[1][14]=dr56_l;
    25e0:	a0 92 50 02 	sts	0x0250, r10
  sp[1][15]=dr56_r;
    25e4:	80 92 51 02 	sts	0x0251, r8
  sp[1][16]=dr6_l;
    25e8:	80 92 52 02 	sts	0x0252, r8
  sp[1][17]=dr6_r;
    25ec:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    25f0:	80 92 54 02 	sts	0x0254, r8
  sp[1][19]=dr7_r;
    25f4:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    25f8:	80 92 56 02 	sts	0x0256, r8
    25fc:	65 c1       	rjmp	.+714    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    25fe:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2602:	a0 92 43 02 	sts	0x0243, r10
  sp[1][2]=dr2_l;
    2606:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    260a:	a0 92 45 02 	sts	0x0245, r10
  sp[1][4]=dr3_l;
    260e:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2612:	a0 92 47 02 	sts	0x0247, r10
  sp[1][6]=dr34_l;
    2616:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    261a:	a0 92 49 02 	sts	0x0249, r10
  sp[1][8]=dr4_l;
    261e:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    2622:	a0 92 4b 02 	sts	0x024B, r10
  sp[1][10]=dr45_l;
    2626:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    262a:	a0 92 4d 02 	sts	0x024D, r10
  sp[1][12]=dr5_l;
    262e:	c0 92 4e 02 	sts	0x024E, r12
  sp[1][13]=dr5_r;
    2632:	a0 92 4f 02 	sts	0x024F, r10
  sp[1][14]=dr56_l;
    2636:	a0 92 50 02 	sts	0x0250, r10
  sp[1][15]=dr56_r;
    263a:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    263e:	a0 92 52 02 	sts	0x0252, r10
  sp[1][17]=dr6_r;
    2642:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    2646:	a0 92 54 02 	sts	0x0254, r10
  sp[1][19]=dr7_r;
    264a:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    264e:	a0 92 56 02 	sts	0x0256, r10
    2652:	3a c1       	rjmp	.+628    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    2654:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2658:	c0 92 43 02 	sts	0x0243, r12
  sp[1][2]=dr2_l;
    265c:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    2660:	c0 92 45 02 	sts	0x0245, r12
  sp[1][4]=dr3_l;
    2664:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2668:	c0 92 47 02 	sts	0x0247, r12
  sp[1][6]=dr34_l;
    266c:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    2670:	c0 92 49 02 	sts	0x0249, r12
  sp[1][8]=dr4_l;
    2674:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    2678:	c0 92 4b 02 	sts	0x024B, r12
  sp[1][10]=dr45_l;
    267c:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    2680:	c0 92 4d 02 	sts	0x024D, r12
  sp[1][12]=dr5_l;
    2684:	c0 92 4e 02 	sts	0x024E, r12
  sp[1][13]=dr5_r;
    2688:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    268c:	c0 92 50 02 	sts	0x0250, r12
  sp[1][15]=dr56_r;
    2690:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    2694:	c0 92 52 02 	sts	0x0252, r12
  sp[1][17]=dr6_r;
    2698:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    269c:	c0 92 54 02 	sts	0x0254, r12
  sp[1][19]=dr7_r;
    26a0:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    26a4:	c0 92 56 02 	sts	0x0256, r12
    26a8:	0f c1       	rjmp	.+542    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    26aa:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    26ae:	e0 92 43 02 	sts	0x0243, r14
  sp[1][2]=dr2_l;
    26b2:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    26b6:	e0 92 45 02 	sts	0x0245, r14
  sp[1][4]=dr3_l;
    26ba:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    26be:	e0 92 47 02 	sts	0x0247, r14
  sp[1][6]=dr34_l;
    26c2:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    26c6:	e0 92 49 02 	sts	0x0249, r14
  sp[1][8]=dr4_l;
    26ca:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    26ce:	e0 92 4b 02 	sts	0x024B, r14
  sp[1][10]=dr45_l;
    26d2:	e0 92 4c 02 	sts	0x024C, r14
  sp[1][11]=dr45_r;
    26d6:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    26da:	e0 92 4e 02 	sts	0x024E, r14
  sp[1][13]=dr5_r;
    26de:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    26e2:	e0 92 50 02 	sts	0x0250, r14
  sp[1][15]=dr56_r;
    26e6:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    26ea:	e0 92 52 02 	sts	0x0252, r14
  sp[1][17]=dr6_r;
    26ee:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    26f2:	e0 92 54 02 	sts	0x0254, r14
  sp[1][19]=dr7_r;
    26f6:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    26fa:	e0 92 56 02 	sts	0x0256, r14
    26fe:	e4 c0       	rjmp	.+456    	; 0x28c8 <s_hdriver+0x404>
	  }
	  else {all_hdriver(dr1,dr5,dr2,dr5,dr3,dr5,dr34,dr5,dr4,dr5,dr45,dr5,dr5,dr5,dr5,dr56,dr5,dr6,dr5,dr7,dr5,dr8);}
	}
	else {all_hdriver(dr1,dr45,dr2,dr45,dr3,dr45,dr34,dr45,dr4,dr45,dr45,dr45,dr45,dr5,dr45,dr56,dr45,dr6,dr45,dr7,dr45,dr8);}
  }
  else if(dr45<dr4)
    2700:	e0 16       	cp	r14, r16
    2702:	0c f0       	brlt	.+2      	; 0x2706 <s_hdriver+0x242>
    2704:	e3 c0       	rjmp	.+454    	; 0x28cc <s_hdriver+0x408>
  {
    if(dr4<dr34)
    2706:	02 17       	cp	r16, r18
    2708:	0c f0       	brlt	.+2      	; 0x270c <s_hdriver+0x248>
    270a:	b4 c0       	rjmp	.+360    	; 0x2874 <s_hdriver+0x3b0>
	{
	  if(dr34<dr3)
    270c:	24 17       	cp	r18, r20
    270e:	0c f0       	brlt	.+2      	; 0x2712 <s_hdriver+0x24e>
    2710:	86 c0       	rjmp	.+268    	; 0x281e <s_hdriver+0x35a>
	  {
	    if(dr3<dr2)
    2712:	46 17       	cp	r20, r22
    2714:	0c f0       	brlt	.+2      	; 0x2718 <s_hdriver+0x254>
    2716:	58 c0       	rjmp	.+176    	; 0x27c8 <s_hdriver+0x304>
		{
		  if(dr2<dr1) {all_hdriver(dr1,dr1,dr1,dr2,dr1,dr3,dr1,dr34,dr1,dr4,dr1,dr45,dr1,dr5,dr1,dr56,dr1,dr6,dr1,dr7,dr1,dr8);}
    2718:	68 17       	cp	r22, r24
    271a:	5c f5       	brge	.+86     	; 0x2772 <s_hdriver+0x2ae>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    271c:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2720:	80 93 43 02 	sts	0x0243, r24
  sp[1][2]=dr2_l;
    2724:	80 93 44 02 	sts	0x0244, r24
  sp[1][3]=dr2_r;
    2728:	60 93 45 02 	sts	0x0245, r22
  sp[1][4]=dr3_l;
    272c:	80 93 46 02 	sts	0x0246, r24
  sp[1][5]=dr3_r;
    2730:	40 93 47 02 	sts	0x0247, r20
  sp[1][6]=dr34_l;
    2734:	80 93 48 02 	sts	0x0248, r24
  sp[1][7]=dr34_r;
    2738:	20 93 49 02 	sts	0x0249, r18
  sp[1][8]=dr4_l;
    273c:	80 93 4a 02 	sts	0x024A, r24
  sp[1][9]=dr4_r;
    2740:	00 93 4b 02 	sts	0x024B, r16
  sp[1][10]=dr45_l;
    2744:	80 93 4c 02 	sts	0x024C, r24
  sp[1][11]=dr45_r;
    2748:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    274c:	80 93 4e 02 	sts	0x024E, r24
  sp[1][13]=dr5_r;
    2750:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    2754:	80 93 50 02 	sts	0x0250, r24
  sp[1][15]=dr56_r;
    2758:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    275c:	80 93 52 02 	sts	0x0252, r24
  sp[1][17]=dr6_r;
    2760:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    2764:	80 93 54 02 	sts	0x0254, r24
  sp[1][19]=dr7_r;
    2768:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    276c:	80 93 56 02 	sts	0x0256, r24
    2770:	ab c0       	rjmp	.+342    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    2772:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2776:	60 93 43 02 	sts	0x0243, r22
  sp[1][2]=dr2_l;
    277a:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    277e:	60 93 45 02 	sts	0x0245, r22
  sp[1][4]=dr3_l;
    2782:	60 93 46 02 	sts	0x0246, r22
  sp[1][5]=dr3_r;
    2786:	40 93 47 02 	sts	0x0247, r20
  sp[1][6]=dr34_l;
    278a:	60 93 48 02 	sts	0x0248, r22
  sp[1][7]=dr34_r;
    278e:	20 93 49 02 	sts	0x0249, r18
  sp[1][8]=dr4_l;
    2792:	60 93 4a 02 	sts	0x024A, r22
  sp[1][9]=dr4_r;
    2796:	00 93 4b 02 	sts	0x024B, r16
  sp[1][10]=dr45_l;
    279a:	60 93 4c 02 	sts	0x024C, r22
  sp[1][11]=dr45_r;
    279e:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    27a2:	60 93 4e 02 	sts	0x024E, r22
  sp[1][13]=dr5_r;
    27a6:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    27aa:	60 93 50 02 	sts	0x0250, r22
  sp[1][15]=dr56_r;
    27ae:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    27b2:	60 93 52 02 	sts	0x0252, r22
  sp[1][17]=dr6_r;
    27b6:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    27ba:	60 93 54 02 	sts	0x0254, r22
  sp[1][19]=dr7_r;
    27be:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    27c2:	60 93 56 02 	sts	0x0256, r22
    27c6:	80 c0       	rjmp	.+256    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    27c8:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    27cc:	40 93 43 02 	sts	0x0243, r20
  sp[1][2]=dr2_l;
    27d0:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    27d4:	40 93 45 02 	sts	0x0245, r20
  sp[1][4]=dr3_l;
    27d8:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    27dc:	40 93 47 02 	sts	0x0247, r20
  sp[1][6]=dr34_l;
    27e0:	40 93 48 02 	sts	0x0248, r20
  sp[1][7]=dr34_r;
    27e4:	20 93 49 02 	sts	0x0249, r18
  sp[1][8]=dr4_l;
    27e8:	40 93 4a 02 	sts	0x024A, r20
  sp[1][9]=dr4_r;
    27ec:	00 93 4b 02 	sts	0x024B, r16
  sp[1][10]=dr45_l;
    27f0:	40 93 4c 02 	sts	0x024C, r20
  sp[1][11]=dr45_r;
    27f4:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    27f8:	40 93 4e 02 	sts	0x024E, r20
  sp[1][13]=dr5_r;
    27fc:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    2800:	40 93 50 02 	sts	0x0250, r20
  sp[1][15]=dr56_r;
    2804:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    2808:	40 93 52 02 	sts	0x0252, r20
  sp[1][17]=dr6_r;
    280c:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    2810:	40 93 54 02 	sts	0x0254, r20
  sp[1][19]=dr7_r;
    2814:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    2818:	40 93 56 02 	sts	0x0256, r20
    281c:	55 c0       	rjmp	.+170    	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    281e:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2822:	20 93 43 02 	sts	0x0243, r18
  sp[1][2]=dr2_l;
    2826:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    282a:	20 93 45 02 	sts	0x0245, r18
  sp[1][4]=dr3_l;
    282e:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2832:	20 93 47 02 	sts	0x0247, r18
  sp[1][6]=dr34_l;
    2836:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    283a:	20 93 49 02 	sts	0x0249, r18
  sp[1][8]=dr4_l;
    283e:	20 93 4a 02 	sts	0x024A, r18
  sp[1][9]=dr4_r;
    2842:	00 93 4b 02 	sts	0x024B, r16
  sp[1][10]=dr45_l;
    2846:	20 93 4c 02 	sts	0x024C, r18
  sp[1][11]=dr45_r;
    284a:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    284e:	20 93 4e 02 	sts	0x024E, r18
  sp[1][13]=dr5_r;
    2852:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    2856:	20 93 50 02 	sts	0x0250, r18
  sp[1][15]=dr56_r;
    285a:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    285e:	20 93 52 02 	sts	0x0252, r18
  sp[1][17]=dr6_r;
    2862:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    2866:	20 93 54 02 	sts	0x0254, r18
  sp[1][19]=dr7_r;
    286a:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    286e:	20 93 56 02 	sts	0x0256, r18
    2872:	2a c0       	rjmp	.+84     	; 0x28c8 <s_hdriver+0x404>
  sp[0][20]=dr8_l;
  sp[0][21]=dr8_r;
}
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[1][0]=dr1_l;
    2874:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2878:	00 93 43 02 	sts	0x0243, r16
  sp[1][2]=dr2_l;
    287c:	60 93 44 02 	sts	0x0244, r22
  sp[1][3]=dr2_r;
    2880:	00 93 45 02 	sts	0x0245, r16
  sp[1][4]=dr3_l;
    2884:	40 93 46 02 	sts	0x0246, r20
  sp[1][5]=dr3_r;
    2888:	00 93 47 02 	sts	0x0247, r16
  sp[1][6]=dr34_l;
    288c:	20 93 48 02 	sts	0x0248, r18
  sp[1][7]=dr34_r;
    2890:	00 93 49 02 	sts	0x0249, r16
  sp[1][8]=dr4_l;
    2894:	00 93 4a 02 	sts	0x024A, r16
  sp[1][9]=dr4_r;
    2898:	00 93 4b 02 	sts	0x024B, r16
  sp[1][10]=dr45_l;
    289c:	00 93 4c 02 	sts	0x024C, r16
  sp[1][11]=dr45_r;
    28a0:	e0 92 4d 02 	sts	0x024D, r14
  sp[1][12]=dr5_l;
    28a4:	00 93 4e 02 	sts	0x024E, r16
  sp[1][13]=dr5_r;
    28a8:	c0 92 4f 02 	sts	0x024F, r12
  sp[1][14]=dr56_l;
    28ac:	00 93 50 02 	sts	0x0250, r16
  sp[1][15]=dr56_r;
    28b0:	a0 92 51 02 	sts	0x0251, r10
  sp[1][16]=dr6_l;
    28b4:	00 93 52 02 	sts	0x0252, r16
  sp[1][17]=dr6_r;
    28b8:	80 92 53 02 	sts	0x0253, r8
  sp[1][18]=dr7_l;
    28bc:	00 93 54 02 	sts	0x0254, r16
  sp[1][19]=dr7_r;
    28c0:	90 93 55 02 	sts	0x0255, r25
  sp[1][20]=dr8_l;
    28c4:	00 93 56 02 	sts	0x0256, r16
  sp[1][21]=dr8_r;
    28c8:	30 93 57 02 	sts	0x0257, r19
	  else {all_hdriver(dr1,dr34,dr2,dr34,dr3,dr34,dr34,dr34,dr34,dr4,dr34,dr45,dr34,dr5,dr34,dr56,dr34,dr6,dr34,dr7,dr34,dr8);}
	}
	else{all_hdriver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	0f 91       	pop	r16
    28d2:	ef 90       	pop	r14
    28d4:	cf 90       	pop	r12
    28d6:	af 90       	pop	r10
    28d8:	8f 90       	pop	r8
    28da:	08 95       	ret

000028dc <hdriver>:
void driver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
  s_driver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
}
void hdriver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
    28dc:	8f 92       	push	r8
    28de:	af 92       	push	r10
    28e0:	cf 92       	push	r12
    28e2:	ef 92       	push	r14
    28e4:	0f 93       	push	r16
    28e6:	98 2f       	mov	r25, r24
    28e8:	c6 2e       	mov	r12, r22
    28ea:	a4 2e       	mov	r10, r20
    28ec:	82 2e       	mov	r8, r18
    28ee:	60 2f       	mov	r22, r16
    28f0:	8e 2d       	mov	r24, r14
  s_hdriver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <hdriver+0x18>
    28f4:	ed b7       	in	r30, 0x3d	; 61
    28f6:	fe b7       	in	r31, 0x3e	; 62
    28f8:	01 83       	std	Z+1, r16	; 0x01
    28fa:	e2 82       	std	Z+2, r14	; 0x02
    28fc:	42 2f       	mov	r20, r18
    28fe:	2a 2d       	mov	r18, r10
    2900:	0c 2d       	mov	r16, r12
    2902:	e9 2e       	mov	r14, r25
    2904:	0e 94 62 12 	call	0x24c4	; 0x24c4 <s_hdriver>
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
}
    290c:	0f 91       	pop	r16
    290e:	ef 90       	pop	r14
    2910:	cf 90       	pop	r12
    2912:	af 90       	pop	r10
    2914:	8f 90       	pop	r8
    2916:	08 95       	ret

00002918 <s_ldriver>:
	else{all_hdriver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
void s_ldriver(signed char dr1, signed char dr2, signed char dr3, signed char dr34, signed char dr4, signed char dr45, signed char dr5, signed char dr56, signed char dr6, signed char dr7, signed char dr8)
{
    2918:	8f 92       	push	r8
    291a:	af 92       	push	r10
    291c:	cf 92       	push	r12
    291e:	ef 92       	push	r14
    2920:	0f 93       	push	r16
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	3b 85       	ldd	r19, Y+11	; 0x0b
  if(dr45>dr4)
    292e:	0e 15       	cp	r16, r14
    2930:	0c f0       	brlt	.+2      	; 0x2934 <s_ldriver+0x1c>
    2932:	10 c1       	rjmp	.+544    	; 0x2b54 <s_ldriver+0x23c>
  {
    if(dr5>dr45)
    2934:	ec 14       	cp	r14, r12
    2936:	0c f0       	brlt	.+2      	; 0x293a <s_ldriver+0x22>
    2938:	e2 c0       	rjmp	.+452    	; 0x2afe <s_ldriver+0x1e6>
	{
	  if(dr56>dr5)
    293a:	ca 14       	cp	r12, r10
    293c:	0c f0       	brlt	.+2      	; 0x2940 <s_ldriver+0x28>
    293e:	b4 c0       	rjmp	.+360    	; 0x2aa8 <s_ldriver+0x190>
	  {
		if(dr6>dr56)
    2940:	a8 14       	cp	r10, r8
    2942:	0c f0       	brlt	.+2      	; 0x2946 <s_ldriver+0x2e>
    2944:	86 c0       	rjmp	.+268    	; 0x2a52 <s_ldriver+0x13a>
		{
		  if(dr7>dr6)
    2946:	89 16       	cp	r8, r25
    2948:	0c f0       	brlt	.+2      	; 0x294c <s_ldriver+0x34>
    294a:	58 c0       	rjmp	.+176    	; 0x29fc <s_ldriver+0xe4>
		  {
		    if(dr8>dr7) {all_ldriver(dr1,dr8,dr2,dr8,dr3,dr8,dr34,dr8,dr4,dr8,dr45,dr8,dr5,dr8,dr56,dr8,dr6,dr8,dr7,dr8,dr8,dr8);}
    294c:	93 17       	cp	r25, r19
    294e:	5c f5       	brge	.+86     	; 0x29a6 <s_ldriver+0x8e>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2950:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2954:	30 93 59 02 	sts	0x0259, r19
  sp[2][2]=dr2_l;
    2958:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    295c:	30 93 5b 02 	sts	0x025B, r19
  sp[2][4]=dr3_l;
    2960:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2964:	30 93 5d 02 	sts	0x025D, r19
  sp[2][6]=dr34_l;
    2968:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    296c:	30 93 5f 02 	sts	0x025F, r19
  sp[2][8]=dr4_l;
    2970:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2974:	30 93 61 02 	sts	0x0261, r19
  sp[2][10]=dr45_l;
    2978:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    297c:	30 93 63 02 	sts	0x0263, r19
  sp[2][12]=dr5_l;
    2980:	c0 92 64 02 	sts	0x0264, r12
  sp[2][13]=dr5_r;
    2984:	30 93 65 02 	sts	0x0265, r19
  sp[2][14]=dr56_l;
    2988:	a0 92 66 02 	sts	0x0266, r10
  sp[2][15]=dr56_r;
    298c:	30 93 67 02 	sts	0x0267, r19
  sp[2][16]=dr6_l;
    2990:	80 92 68 02 	sts	0x0268, r8
  sp[2][17]=dr6_r;
    2994:	30 93 69 02 	sts	0x0269, r19
  sp[2][18]=dr7_l;
    2998:	90 93 6a 02 	sts	0x026A, r25
  sp[2][19]=dr7_r;
    299c:	30 93 6b 02 	sts	0x026B, r19
  sp[2][20]=dr8_l;
    29a0:	30 93 6c 02 	sts	0x026C, r19
    29a4:	bb c1       	rjmp	.+886    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    29a6:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    29aa:	90 93 59 02 	sts	0x0259, r25
  sp[2][2]=dr2_l;
    29ae:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    29b2:	90 93 5b 02 	sts	0x025B, r25
  sp[2][4]=dr3_l;
    29b6:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    29ba:	90 93 5d 02 	sts	0x025D, r25
  sp[2][6]=dr34_l;
    29be:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    29c2:	90 93 5f 02 	sts	0x025F, r25
  sp[2][8]=dr4_l;
    29c6:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    29ca:	90 93 61 02 	sts	0x0261, r25
  sp[2][10]=dr45_l;
    29ce:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    29d2:	90 93 63 02 	sts	0x0263, r25
  sp[2][12]=dr5_l;
    29d6:	c0 92 64 02 	sts	0x0264, r12
  sp[2][13]=dr5_r;
    29da:	90 93 65 02 	sts	0x0265, r25
  sp[2][14]=dr56_l;
    29de:	a0 92 66 02 	sts	0x0266, r10
  sp[2][15]=dr56_r;
    29e2:	90 93 67 02 	sts	0x0267, r25
  sp[2][16]=dr6_l;
    29e6:	80 92 68 02 	sts	0x0268, r8
  sp[2][17]=dr6_r;
    29ea:	90 93 69 02 	sts	0x0269, r25
  sp[2][18]=dr7_l;
    29ee:	90 93 6a 02 	sts	0x026A, r25
  sp[2][19]=dr7_r;
    29f2:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    29f6:	90 93 6c 02 	sts	0x026C, r25
    29fa:	90 c1       	rjmp	.+800    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    29fc:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2a00:	80 92 59 02 	sts	0x0259, r8
  sp[2][2]=dr2_l;
    2a04:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2a08:	80 92 5b 02 	sts	0x025B, r8
  sp[2][4]=dr3_l;
    2a0c:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2a10:	80 92 5d 02 	sts	0x025D, r8
  sp[2][6]=dr34_l;
    2a14:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2a18:	80 92 5f 02 	sts	0x025F, r8
  sp[2][8]=dr4_l;
    2a1c:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2a20:	80 92 61 02 	sts	0x0261, r8
  sp[2][10]=dr45_l;
    2a24:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    2a28:	80 92 63 02 	sts	0x0263, r8
  sp[2][12]=dr5_l;
    2a2c:	c0 92 64 02 	sts	0x0264, r12
  sp[2][13]=dr5_r;
    2a30:	80 92 65 02 	sts	0x0265, r8
  sp[2][14]=dr56_l;
    2a34:	a0 92 66 02 	sts	0x0266, r10
  sp[2][15]=dr56_r;
    2a38:	80 92 67 02 	sts	0x0267, r8
  sp[2][16]=dr6_l;
    2a3c:	80 92 68 02 	sts	0x0268, r8
  sp[2][17]=dr6_r;
    2a40:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2a44:	80 92 6a 02 	sts	0x026A, r8
  sp[2][19]=dr7_r;
    2a48:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2a4c:	80 92 6c 02 	sts	0x026C, r8
    2a50:	65 c1       	rjmp	.+714    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2a52:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2a56:	a0 92 59 02 	sts	0x0259, r10
  sp[2][2]=dr2_l;
    2a5a:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2a5e:	a0 92 5b 02 	sts	0x025B, r10
  sp[2][4]=dr3_l;
    2a62:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2a66:	a0 92 5d 02 	sts	0x025D, r10
  sp[2][6]=dr34_l;
    2a6a:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2a6e:	a0 92 5f 02 	sts	0x025F, r10
  sp[2][8]=dr4_l;
    2a72:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2a76:	a0 92 61 02 	sts	0x0261, r10
  sp[2][10]=dr45_l;
    2a7a:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    2a7e:	a0 92 63 02 	sts	0x0263, r10
  sp[2][12]=dr5_l;
    2a82:	c0 92 64 02 	sts	0x0264, r12
  sp[2][13]=dr5_r;
    2a86:	a0 92 65 02 	sts	0x0265, r10
  sp[2][14]=dr56_l;
    2a8a:	a0 92 66 02 	sts	0x0266, r10
  sp[2][15]=dr56_r;
    2a8e:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2a92:	a0 92 68 02 	sts	0x0268, r10
  sp[2][17]=dr6_r;
    2a96:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2a9a:	a0 92 6a 02 	sts	0x026A, r10
  sp[2][19]=dr7_r;
    2a9e:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2aa2:	a0 92 6c 02 	sts	0x026C, r10
    2aa6:	3a c1       	rjmp	.+628    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2aa8:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2aac:	c0 92 59 02 	sts	0x0259, r12
  sp[2][2]=dr2_l;
    2ab0:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2ab4:	c0 92 5b 02 	sts	0x025B, r12
  sp[2][4]=dr3_l;
    2ab8:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2abc:	c0 92 5d 02 	sts	0x025D, r12
  sp[2][6]=dr34_l;
    2ac0:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2ac4:	c0 92 5f 02 	sts	0x025F, r12
  sp[2][8]=dr4_l;
    2ac8:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2acc:	c0 92 61 02 	sts	0x0261, r12
  sp[2][10]=dr45_l;
    2ad0:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    2ad4:	c0 92 63 02 	sts	0x0263, r12
  sp[2][12]=dr5_l;
    2ad8:	c0 92 64 02 	sts	0x0264, r12
  sp[2][13]=dr5_r;
    2adc:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2ae0:	c0 92 66 02 	sts	0x0266, r12
  sp[2][15]=dr56_r;
    2ae4:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2ae8:	c0 92 68 02 	sts	0x0268, r12
  sp[2][17]=dr6_r;
    2aec:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2af0:	c0 92 6a 02 	sts	0x026A, r12
  sp[2][19]=dr7_r;
    2af4:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2af8:	c0 92 6c 02 	sts	0x026C, r12
    2afc:	0f c1       	rjmp	.+542    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2afe:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2b02:	e0 92 59 02 	sts	0x0259, r14
  sp[2][2]=dr2_l;
    2b06:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2b0a:	e0 92 5b 02 	sts	0x025B, r14
  sp[2][4]=dr3_l;
    2b0e:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2b12:	e0 92 5d 02 	sts	0x025D, r14
  sp[2][6]=dr34_l;
    2b16:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2b1a:	e0 92 5f 02 	sts	0x025F, r14
  sp[2][8]=dr4_l;
    2b1e:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2b22:	e0 92 61 02 	sts	0x0261, r14
  sp[2][10]=dr45_l;
    2b26:	e0 92 62 02 	sts	0x0262, r14
  sp[2][11]=dr45_r;
    2b2a:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2b2e:	e0 92 64 02 	sts	0x0264, r14
  sp[2][13]=dr5_r;
    2b32:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2b36:	e0 92 66 02 	sts	0x0266, r14
  sp[2][15]=dr56_r;
    2b3a:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2b3e:	e0 92 68 02 	sts	0x0268, r14
  sp[2][17]=dr6_r;
    2b42:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2b46:	e0 92 6a 02 	sts	0x026A, r14
  sp[2][19]=dr7_r;
    2b4a:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2b4e:	e0 92 6c 02 	sts	0x026C, r14
    2b52:	e4 c0       	rjmp	.+456    	; 0x2d1c <s_ldriver+0x404>
	  }
	  else {all_ldriver(dr1,dr5,dr2,dr5,dr3,dr5,dr34,dr5,dr4,dr5,dr45,dr5,dr5,dr5,dr5,dr56,dr5,dr6,dr5,dr7,dr5,dr8);}
	}
	else {all_ldriver(dr1,dr45,dr2,dr45,dr3,dr45,dr34,dr45,dr4,dr45,dr45,dr45,dr45,dr5,dr45,dr56,dr45,dr6,dr45,dr7,dr45,dr8);}
  }
  else if(dr45<dr4)
    2b54:	e0 16       	cp	r14, r16
    2b56:	0c f0       	brlt	.+2      	; 0x2b5a <s_ldriver+0x242>
    2b58:	e3 c0       	rjmp	.+454    	; 0x2d20 <s_ldriver+0x408>
  {
    if(dr4<dr34)
    2b5a:	02 17       	cp	r16, r18
    2b5c:	0c f0       	brlt	.+2      	; 0x2b60 <s_ldriver+0x248>
    2b5e:	b4 c0       	rjmp	.+360    	; 0x2cc8 <s_ldriver+0x3b0>
	{
	  if(dr34<dr3)
    2b60:	24 17       	cp	r18, r20
    2b62:	0c f0       	brlt	.+2      	; 0x2b66 <s_ldriver+0x24e>
    2b64:	86 c0       	rjmp	.+268    	; 0x2c72 <s_ldriver+0x35a>
	  {
	    if(dr3<dr2)
    2b66:	46 17       	cp	r20, r22
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <s_ldriver+0x254>
    2b6a:	58 c0       	rjmp	.+176    	; 0x2c1c <s_ldriver+0x304>
		{
		  if(dr2<dr1) {all_ldriver(dr1,dr1,dr1,dr2,dr1,dr3,dr1,dr34,dr1,dr4,dr1,dr45,dr1,dr5,dr1,dr56,dr1,dr6,dr1,dr7,dr1,dr8);}
    2b6c:	68 17       	cp	r22, r24
    2b6e:	5c f5       	brge	.+86     	; 0x2bc6 <s_ldriver+0x2ae>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2b70:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2b74:	80 93 59 02 	sts	0x0259, r24
  sp[2][2]=dr2_l;
    2b78:	80 93 5a 02 	sts	0x025A, r24
  sp[2][3]=dr2_r;
    2b7c:	60 93 5b 02 	sts	0x025B, r22
  sp[2][4]=dr3_l;
    2b80:	80 93 5c 02 	sts	0x025C, r24
  sp[2][5]=dr3_r;
    2b84:	40 93 5d 02 	sts	0x025D, r20
  sp[2][6]=dr34_l;
    2b88:	80 93 5e 02 	sts	0x025E, r24
  sp[2][7]=dr34_r;
    2b8c:	20 93 5f 02 	sts	0x025F, r18
  sp[2][8]=dr4_l;
    2b90:	80 93 60 02 	sts	0x0260, r24
  sp[2][9]=dr4_r;
    2b94:	00 93 61 02 	sts	0x0261, r16
  sp[2][10]=dr45_l;
    2b98:	80 93 62 02 	sts	0x0262, r24
  sp[2][11]=dr45_r;
    2b9c:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2ba0:	80 93 64 02 	sts	0x0264, r24
  sp[2][13]=dr5_r;
    2ba4:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2ba8:	80 93 66 02 	sts	0x0266, r24
  sp[2][15]=dr56_r;
    2bac:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2bb0:	80 93 68 02 	sts	0x0268, r24
  sp[2][17]=dr6_r;
    2bb4:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2bb8:	80 93 6a 02 	sts	0x026A, r24
  sp[2][19]=dr7_r;
    2bbc:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2bc0:	80 93 6c 02 	sts	0x026C, r24
    2bc4:	ab c0       	rjmp	.+342    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2bc6:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2bca:	60 93 59 02 	sts	0x0259, r22
  sp[2][2]=dr2_l;
    2bce:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2bd2:	60 93 5b 02 	sts	0x025B, r22
  sp[2][4]=dr3_l;
    2bd6:	60 93 5c 02 	sts	0x025C, r22
  sp[2][5]=dr3_r;
    2bda:	40 93 5d 02 	sts	0x025D, r20
  sp[2][6]=dr34_l;
    2bde:	60 93 5e 02 	sts	0x025E, r22
  sp[2][7]=dr34_r;
    2be2:	20 93 5f 02 	sts	0x025F, r18
  sp[2][8]=dr4_l;
    2be6:	60 93 60 02 	sts	0x0260, r22
  sp[2][9]=dr4_r;
    2bea:	00 93 61 02 	sts	0x0261, r16
  sp[2][10]=dr45_l;
    2bee:	60 93 62 02 	sts	0x0262, r22
  sp[2][11]=dr45_r;
    2bf2:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2bf6:	60 93 64 02 	sts	0x0264, r22
  sp[2][13]=dr5_r;
    2bfa:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2bfe:	60 93 66 02 	sts	0x0266, r22
  sp[2][15]=dr56_r;
    2c02:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2c06:	60 93 68 02 	sts	0x0268, r22
  sp[2][17]=dr6_r;
    2c0a:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2c0e:	60 93 6a 02 	sts	0x026A, r22
  sp[2][19]=dr7_r;
    2c12:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2c16:	60 93 6c 02 	sts	0x026C, r22
    2c1a:	80 c0       	rjmp	.+256    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2c1c:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2c20:	40 93 59 02 	sts	0x0259, r20
  sp[2][2]=dr2_l;
    2c24:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2c28:	40 93 5b 02 	sts	0x025B, r20
  sp[2][4]=dr3_l;
    2c2c:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2c30:	40 93 5d 02 	sts	0x025D, r20
  sp[2][6]=dr34_l;
    2c34:	40 93 5e 02 	sts	0x025E, r20
  sp[2][7]=dr34_r;
    2c38:	20 93 5f 02 	sts	0x025F, r18
  sp[2][8]=dr4_l;
    2c3c:	40 93 60 02 	sts	0x0260, r20
  sp[2][9]=dr4_r;
    2c40:	00 93 61 02 	sts	0x0261, r16
  sp[2][10]=dr45_l;
    2c44:	40 93 62 02 	sts	0x0262, r20
  sp[2][11]=dr45_r;
    2c48:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2c4c:	40 93 64 02 	sts	0x0264, r20
  sp[2][13]=dr5_r;
    2c50:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2c54:	40 93 66 02 	sts	0x0266, r20
  sp[2][15]=dr56_r;
    2c58:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2c5c:	40 93 68 02 	sts	0x0268, r20
  sp[2][17]=dr6_r;
    2c60:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2c64:	40 93 6a 02 	sts	0x026A, r20
  sp[2][19]=dr7_r;
    2c68:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2c6c:	40 93 6c 02 	sts	0x026C, r20
    2c70:	55 c0       	rjmp	.+170    	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2c72:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2c76:	20 93 59 02 	sts	0x0259, r18
  sp[2][2]=dr2_l;
    2c7a:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2c7e:	20 93 5b 02 	sts	0x025B, r18
  sp[2][4]=dr3_l;
    2c82:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2c86:	20 93 5d 02 	sts	0x025D, r18
  sp[2][6]=dr34_l;
    2c8a:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2c8e:	20 93 5f 02 	sts	0x025F, r18
  sp[2][8]=dr4_l;
    2c92:	20 93 60 02 	sts	0x0260, r18
  sp[2][9]=dr4_r;
    2c96:	00 93 61 02 	sts	0x0261, r16
  sp[2][10]=dr45_l;
    2c9a:	20 93 62 02 	sts	0x0262, r18
  sp[2][11]=dr45_r;
    2c9e:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2ca2:	20 93 64 02 	sts	0x0264, r18
  sp[2][13]=dr5_r;
    2ca6:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2caa:	20 93 66 02 	sts	0x0266, r18
  sp[2][15]=dr56_r;
    2cae:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2cb2:	20 93 68 02 	sts	0x0268, r18
  sp[2][17]=dr6_r;
    2cb6:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2cba:	20 93 6a 02 	sts	0x026A, r18
  sp[2][19]=dr7_r;
    2cbe:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2cc2:	20 93 6c 02 	sts	0x026C, r18
    2cc6:	2a c0       	rjmp	.+84     	; 0x2d1c <s_ldriver+0x404>
  sp[1][20]=dr8_l;
  sp[1][21]=dr8_r;
}
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
  sp[2][0]=dr1_l;
    2cc8:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2ccc:	00 93 59 02 	sts	0x0259, r16
  sp[2][2]=dr2_l;
    2cd0:	60 93 5a 02 	sts	0x025A, r22
  sp[2][3]=dr2_r;
    2cd4:	00 93 5b 02 	sts	0x025B, r16
  sp[2][4]=dr3_l;
    2cd8:	40 93 5c 02 	sts	0x025C, r20
  sp[2][5]=dr3_r;
    2cdc:	00 93 5d 02 	sts	0x025D, r16
  sp[2][6]=dr34_l;
    2ce0:	20 93 5e 02 	sts	0x025E, r18
  sp[2][7]=dr34_r;
    2ce4:	00 93 5f 02 	sts	0x025F, r16
  sp[2][8]=dr4_l;
    2ce8:	00 93 60 02 	sts	0x0260, r16
  sp[2][9]=dr4_r;
    2cec:	00 93 61 02 	sts	0x0261, r16
  sp[2][10]=dr45_l;
    2cf0:	00 93 62 02 	sts	0x0262, r16
  sp[2][11]=dr45_r;
    2cf4:	e0 92 63 02 	sts	0x0263, r14
  sp[2][12]=dr5_l;
    2cf8:	00 93 64 02 	sts	0x0264, r16
  sp[2][13]=dr5_r;
    2cfc:	c0 92 65 02 	sts	0x0265, r12
  sp[2][14]=dr56_l;
    2d00:	00 93 66 02 	sts	0x0266, r16
  sp[2][15]=dr56_r;
    2d04:	a0 92 67 02 	sts	0x0267, r10
  sp[2][16]=dr6_l;
    2d08:	00 93 68 02 	sts	0x0268, r16
  sp[2][17]=dr6_r;
    2d0c:	80 92 69 02 	sts	0x0269, r8
  sp[2][18]=dr7_l;
    2d10:	00 93 6a 02 	sts	0x026A, r16
  sp[2][19]=dr7_r;
    2d14:	90 93 6b 02 	sts	0x026B, r25
  sp[2][20]=dr8_l;
    2d18:	00 93 6c 02 	sts	0x026C, r16
  sp[2][21]=dr8_r;
    2d1c:	30 93 6d 02 	sts	0x026D, r19
	  else {all_ldriver(dr1,dr34,dr2,dr34,dr3,dr34,dr34,dr34,dr34,dr4,dr34,dr45,dr34,dr5,dr34,dr56,dr34,dr6,dr34,dr7,dr34,dr8);}
	}
	else{all_ldriver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	0f 91       	pop	r16
    2d26:	ef 90       	pop	r14
    2d28:	cf 90       	pop	r12
    2d2a:	af 90       	pop	r10
    2d2c:	8f 90       	pop	r8
    2d2e:	08 95       	ret

00002d30 <ldriver>:
void hdriver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
  s_hdriver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
}
void ldriver(signed char dr45, signed char dr4_5, signed char dr34_56, signed char dr3_6, signed char dr2_7, signed char dr1_8)
{
    2d30:	8f 92       	push	r8
    2d32:	af 92       	push	r10
    2d34:	cf 92       	push	r12
    2d36:	ef 92       	push	r14
    2d38:	0f 93       	push	r16
    2d3a:	98 2f       	mov	r25, r24
    2d3c:	c6 2e       	mov	r12, r22
    2d3e:	a4 2e       	mov	r10, r20
    2d40:	82 2e       	mov	r8, r18
    2d42:	60 2f       	mov	r22, r16
    2d44:	8e 2d       	mov	r24, r14
  s_ldriver(dr1_8,dr2_7,dr3_6,dr34_56,dr4_5,dr45,dr4_5,dr34_56,dr3_6,dr2_7,dr1_8);
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <ldriver+0x18>
    2d48:	ed b7       	in	r30, 0x3d	; 61
    2d4a:	fe b7       	in	r31, 0x3e	; 62
    2d4c:	01 83       	std	Z+1, r16	; 0x01
    2d4e:	e2 82       	std	Z+2, r14	; 0x02
    2d50:	42 2f       	mov	r20, r18
    2d52:	2a 2d       	mov	r18, r10
    2d54:	0c 2d       	mov	r16, r12
    2d56:	e9 2e       	mov	r14, r25
    2d58:	0e 94 8c 14 	call	0x2918	; 0x2918 <s_ldriver>
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
}
    2d60:	0f 91       	pop	r16
    2d62:	ef 90       	pop	r14
    2d64:	cf 90       	pop	r12
    2d66:	af 90       	pop	r10
    2d68:	8f 90       	pop	r8
    2d6a:	08 95       	ret

00002d6c <all_driver>:
	else{all_ldriver(dr1,dr4,dr2,dr4,dr3,dr4,dr34,dr4,dr4,dr4,dr4,dr45,dr4,dr5,dr4,dr56,dr4,dr6,dr4,dr7,dr4,dr8);}
  }

}
void all_driver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
    2d6c:	8f 92       	push	r8
    2d6e:	af 92       	push	r10
    2d70:	cf 92       	push	r12
    2d72:	ef 92       	push	r14
    2d74:	0f 93       	push	r16
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
  sp[0][0]=dr1_l;
    2d7e:	80 93 2c 02 	sts	0x022C, r24
  sp[0][1]=dr1_r;
    2d82:	60 93 2d 02 	sts	0x022D, r22
  sp[0][2]=dr2_l;
    2d86:	40 93 2e 02 	sts	0x022E, r20
  sp[0][3]=dr2_r;
    2d8a:	20 93 2f 02 	sts	0x022F, r18
  sp[0][4]=dr3_l;
    2d8e:	00 93 30 02 	sts	0x0230, r16
  sp[0][5]=dr3_r;
    2d92:	e0 92 31 02 	sts	0x0231, r14
  sp[0][6]=dr34_l;
    2d96:	c0 92 32 02 	sts	0x0232, r12
  sp[0][7]=dr34_r;
    2d9a:	a0 92 33 02 	sts	0x0233, r10
  sp[0][8]=dr4_l;
    2d9e:	80 92 34 02 	sts	0x0234, r8
  sp[0][9]=dr4_r;
    2da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da4:	80 93 35 02 	sts	0x0235, r24
  sp[0][10]=dr45_l;
    2da8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2daa:	80 93 36 02 	sts	0x0236, r24
  sp[0][11]=dr45_r;
    2dae:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db0:	80 93 37 02 	sts	0x0237, r24
  sp[0][12]=dr5_l;
    2db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db6:	80 93 38 02 	sts	0x0238, r24
  sp[0][13]=dr5_r;
    2dba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dbc:	80 93 39 02 	sts	0x0239, r24
  sp[0][14]=dr56_l;
    2dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc2:	80 93 3a 02 	sts	0x023A, r24
  sp[0][15]=dr56_r;
    2dc6:	88 89       	ldd	r24, Y+16	; 0x10
    2dc8:	80 93 3b 02 	sts	0x023B, r24
  sp[0][16]=dr6_l;
    2dcc:	89 89       	ldd	r24, Y+17	; 0x11
    2dce:	80 93 3c 02 	sts	0x023C, r24
  sp[0][17]=dr6_r;
    2dd2:	8a 89       	ldd	r24, Y+18	; 0x12
    2dd4:	80 93 3d 02 	sts	0x023D, r24
  sp[0][18]=dr7_l;
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	80 93 3e 02 	sts	0x023E, r24
  sp[0][19]=dr7_r;
    2dde:	8c 89       	ldd	r24, Y+20	; 0x14
    2de0:	80 93 3f 02 	sts	0x023F, r24
  sp[0][20]=dr8_l;
    2de4:	8d 89       	ldd	r24, Y+21	; 0x15
    2de6:	80 93 40 02 	sts	0x0240, r24
  sp[0][21]=dr8_r;
    2dea:	8e 89       	ldd	r24, Y+22	; 0x16
    2dec:	80 93 41 02 	sts	0x0241, r24
}
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	0f 91       	pop	r16
    2df6:	ef 90       	pop	r14
    2df8:	cf 90       	pop	r12
    2dfa:	af 90       	pop	r10
    2dfc:	8f 90       	pop	r8
    2dfe:	08 95       	ret

00002e00 <all_hdriver>:
void all_hdriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
    2e00:	8f 92       	push	r8
    2e02:	af 92       	push	r10
    2e04:	cf 92       	push	r12
    2e06:	ef 92       	push	r14
    2e08:	0f 93       	push	r16
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
  sp[1][0]=dr1_l;
    2e12:	80 93 42 02 	sts	0x0242, r24
  sp[1][1]=dr1_r;
    2e16:	60 93 43 02 	sts	0x0243, r22
  sp[1][2]=dr2_l;
    2e1a:	40 93 44 02 	sts	0x0244, r20
  sp[1][3]=dr2_r;
    2e1e:	20 93 45 02 	sts	0x0245, r18
  sp[1][4]=dr3_l;
    2e22:	00 93 46 02 	sts	0x0246, r16
  sp[1][5]=dr3_r;
    2e26:	e0 92 47 02 	sts	0x0247, r14
  sp[1][6]=dr34_l;
    2e2a:	c0 92 48 02 	sts	0x0248, r12
  sp[1][7]=dr34_r;
    2e2e:	a0 92 49 02 	sts	0x0249, r10
  sp[1][8]=dr4_l;
    2e32:	80 92 4a 02 	sts	0x024A, r8
  sp[1][9]=dr4_r;
    2e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e38:	80 93 4b 02 	sts	0x024B, r24
  sp[1][10]=dr45_l;
    2e3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e3e:	80 93 4c 02 	sts	0x024C, r24
  sp[1][11]=dr45_r;
    2e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e44:	80 93 4d 02 	sts	0x024D, r24
  sp[1][12]=dr5_l;
    2e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4a:	80 93 4e 02 	sts	0x024E, r24
  sp[1][13]=dr5_r;
    2e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e50:	80 93 4f 02 	sts	0x024F, r24
  sp[1][14]=dr56_l;
    2e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e56:	80 93 50 02 	sts	0x0250, r24
  sp[1][15]=dr56_r;
    2e5a:	88 89       	ldd	r24, Y+16	; 0x10
    2e5c:	80 93 51 02 	sts	0x0251, r24
  sp[1][16]=dr6_l;
    2e60:	89 89       	ldd	r24, Y+17	; 0x11
    2e62:	80 93 52 02 	sts	0x0252, r24
  sp[1][17]=dr6_r;
    2e66:	8a 89       	ldd	r24, Y+18	; 0x12
    2e68:	80 93 53 02 	sts	0x0253, r24
  sp[1][18]=dr7_l;
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	80 93 54 02 	sts	0x0254, r24
  sp[1][19]=dr7_r;
    2e72:	8c 89       	ldd	r24, Y+20	; 0x14
    2e74:	80 93 55 02 	sts	0x0255, r24
  sp[1][20]=dr8_l;
    2e78:	8d 89       	ldd	r24, Y+21	; 0x15
    2e7a:	80 93 56 02 	sts	0x0256, r24
  sp[1][21]=dr8_r;
    2e7e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e80:	80 93 57 02 	sts	0x0257, r24
}
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	0f 91       	pop	r16
    2e8a:	ef 90       	pop	r14
    2e8c:	cf 90       	pop	r12
    2e8e:	af 90       	pop	r10
    2e90:	8f 90       	pop	r8
    2e92:	08 95       	ret

00002e94 <all_ldriver>:
void all_ldriver(signed char dr1_l,signed char dr1_r,signed char dr2_l,signed char dr2_r,signed char dr3_l,signed char dr3_r,signed char dr34_l,signed char dr34_r,signed char dr4_l,signed char dr4_r,signed char dr45_l,signed char dr45_r,signed char dr5_l,signed char dr5_r,signed char dr56_l,signed char dr56_r,signed char dr6_l,signed char dr6_r,signed char dr7_l,signed char dr7_r,signed char dr8_l,signed char dr8_r)
{
    2e94:	8f 92       	push	r8
    2e96:	af 92       	push	r10
    2e98:	cf 92       	push	r12
    2e9a:	ef 92       	push	r14
    2e9c:	0f 93       	push	r16
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
  sp[2][0]=dr1_l;
    2ea6:	80 93 58 02 	sts	0x0258, r24
  sp[2][1]=dr1_r;
    2eaa:	60 93 59 02 	sts	0x0259, r22
  sp[2][2]=dr2_l;
    2eae:	40 93 5a 02 	sts	0x025A, r20
  sp[2][3]=dr2_r;
    2eb2:	20 93 5b 02 	sts	0x025B, r18
  sp[2][4]=dr3_l;
    2eb6:	00 93 5c 02 	sts	0x025C, r16
  sp[2][5]=dr3_r;
    2eba:	e0 92 5d 02 	sts	0x025D, r14
  sp[2][6]=dr34_l;
    2ebe:	c0 92 5e 02 	sts	0x025E, r12
  sp[2][7]=dr34_r;
    2ec2:	a0 92 5f 02 	sts	0x025F, r10
  sp[2][8]=dr4_l;
    2ec6:	80 92 60 02 	sts	0x0260, r8
  sp[2][9]=dr4_r;
    2eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ecc:	80 93 61 02 	sts	0x0261, r24
  sp[2][10]=dr45_l;
    2ed0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ed2:	80 93 62 02 	sts	0x0262, r24
  sp[2][11]=dr45_r;
    2ed6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ed8:	80 93 63 02 	sts	0x0263, r24
  sp[2][12]=dr5_l;
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	80 93 64 02 	sts	0x0264, r24
  sp[2][13]=dr5_r;
    2ee2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee4:	80 93 65 02 	sts	0x0265, r24
  sp[2][14]=dr56_l;
    2ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eea:	80 93 66 02 	sts	0x0266, r24
  sp[2][15]=dr56_r;
    2eee:	88 89       	ldd	r24, Y+16	; 0x10
    2ef0:	80 93 67 02 	sts	0x0267, r24
  sp[2][16]=dr6_l;
    2ef4:	89 89       	ldd	r24, Y+17	; 0x11
    2ef6:	80 93 68 02 	sts	0x0268, r24
  sp[2][17]=dr6_r;
    2efa:	8a 89       	ldd	r24, Y+18	; 0x12
    2efc:	80 93 69 02 	sts	0x0269, r24
  sp[2][18]=dr7_l;
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	80 93 6a 02 	sts	0x026A, r24
  sp[2][19]=dr7_r;
    2f06:	8c 89       	ldd	r24, Y+20	; 0x14
    2f08:	80 93 6b 02 	sts	0x026B, r24
  sp[2][20]=dr8_l;
    2f0c:	8d 89       	ldd	r24, Y+21	; 0x15
    2f0e:	80 93 6c 02 	sts	0x026C, r24
  sp[2][21]=dr8_r;
    2f12:	8e 89       	ldd	r24, Y+22	; 0x16
    2f14:	80 93 6d 02 	sts	0x026D, r24
}
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	0f 91       	pop	r16
    2f1e:	ef 90       	pop	r14
    2f20:	cf 90       	pop	r12
    2f22:	af 90       	pop	r10
    2f24:	8f 90       	pop	r8
    2f26:	08 95       	ret

00002f28 <main>:

#define turn_left exline(-9,40,s1,0);exline(-7,30,s2,0);exturn(0,30,s3,0);
#define turn_right exline(40,-9,s8,0);exline(30,-7,s7,0);exturn(30,0,s6,0);

int main(void)
{
    2f28:	df 92       	push	r13
    2f2a:	ef 92       	push	r14
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
  char rsen_data = 0;
  signed char ls = s1;
  signed char rs = s8; 
  unsigned char mt_sp = 30;
  unsigned char end_phase = 0;  
start();
    2f36:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start>
}

void init_buzzer(unsigned char buzz)
{
  init_buzzer_data=buzz;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	80 93 08 02 	sts	0x0208, r24
init_buzzer(1);
motor(0,0,1);
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>
wait();
    2f4c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wait>

driver(20,14,10,6,3,1);
    2f50:	84 e1       	ldi	r24, 0x14	; 20
    2f52:	6e e0       	ldi	r22, 0x0E	; 14
    2f54:	4a e0       	ldi	r20, 0x0A	; 10
    2f56:	26 e0       	ldi	r18, 0x06	; 6
    2f58:	03 e0       	ldi	r16, 0x03	; 3
    2f5a:	ee 24       	eor	r14, r14
    2f5c:	e3 94       	inc	r14
    2f5e:	0e 94 44 12 	call	0x2488	; 0x2488 <driver>
hdriver(20,14,10,6,3,1);
    2f62:	84 e1       	ldi	r24, 0x14	; 20
    2f64:	6e e0       	ldi	r22, 0x0E	; 14
    2f66:	4a e0       	ldi	r20, 0x0A	; 10
    2f68:	26 e0       	ldi	r18, 0x06	; 6
    2f6a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <hdriver>
ldriver(12,10,6,3,0,0);
    2f6e:	8c e0       	ldi	r24, 0x0C	; 12
    2f70:	6a e0       	ldi	r22, 0x0A	; 10
    2f72:	46 e0       	ldi	r20, 0x06	; 6
    2f74:	23 e0       	ldi	r18, 0x03	; 3
    2f76:	00 e0       	ldi	r16, 0x00	; 0
    2f78:	ee 24       	eor	r14, r14
    2f7a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <ldriver>

///////////////////////
wait();
    2f7e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <wait>
delay(300);
    2f82:	8c e2       	ldi	r24, 0x2C	; 44
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    2f8a:	e1 e0       	ldi	r30, 0x01	; 1
    2f8c:	ee 2e       	mov	r14, r30
    2f8e:	f1 2c       	mov	r15, r1
    2f90:	f0 92 15 02 	sts	0x0215, r15
    2f94:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
    2f98:	00 e9       	ldi	r16, 0x90	; 144
    2f9a:	11 e0       	ldi	r17, 0x01	; 1
    2f9c:	10 93 0b 02 	sts	0x020B, r17
    2fa0:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
    2fa4:	80 91 10 02 	lds	r24, 0x0210
    2fa8:	90 91 11 02 	lds	r25, 0x0211
    2fac:	90 93 0f 02 	sts	0x020F, r25
    2fb0:	80 93 0e 02 	sts	0x020E, r24
buzzer(400,400,1);
delay(800);
    2fb4:	80 e2       	ldi	r24, 0x20	; 32
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    2fbc:	f0 92 15 02 	sts	0x0215, r15
    2fc0:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
    2fc4:	10 93 0b 02 	sts	0x020B, r17
    2fc8:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
    2fcc:	80 91 10 02 	lds	r24, 0x0210
    2fd0:	90 91 11 02 	lds	r25, 0x0211
    2fd4:	90 93 0f 02 	sts	0x020F, r25
    2fd8:	80 93 0e 02 	sts	0x020E, r24
buzzer(400,400,1);
delay(800);
    2fdc:	80 e2       	ldi	r24, 0x20	; 32
    2fde:	93 e0       	ldi	r25, 0x03	; 3
    2fe0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    2fe4:	f0 92 15 02 	sts	0x0215, r15
    2fe8:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
    2fec:	10 93 0b 02 	sts	0x020B, r17
    2ff0:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
    2ff4:	80 91 10 02 	lds	r24, 0x0210
    2ff8:	90 91 11 02 	lds	r25, 0x0211
    2ffc:	90 93 0f 02 	sts	0x020F, r25
    3000:	80 93 0e 02 	sts	0x020E, r24
buzzer(400,400,1);
delay(800);
    3004:	80 e2       	ldi	r24, 0x20	; 32
    3006:	93 e0       	ldi	r25, 0x03	; 3
    3008:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    300c:	f0 92 15 02 	sts	0x0215, r15
    3010:	e0 92 14 02 	sts	0x0214, r14
buzzer_on_time=on_time;
    3014:	8c eb       	ldi	r24, 0xBC	; 188
    3016:	92 e0       	ldi	r25, 0x02	; 2
    3018:	90 93 0b 02 	sts	0x020B, r25
    301c:	80 93 0a 02 	sts	0x020A, r24
buzzer_off_time=buzzer_off_count;
    3020:	80 91 10 02 	lds	r24, 0x0210
    3024:	90 91 11 02 	lds	r25, 0x0211
    3028:	90 93 0f 02 	sts	0x020F, r25
    302c:	80 93 0e 02 	sts	0x020E, r24
buzzer(700,500,1);
delay(1200);
    3030:	80 eb       	ldi	r24, 0xB0	; 176
    3032:	94 e0       	ldi	r25, 0x04	; 4
    3034:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>
linedelay(ff,10,50,0);
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	6a e0       	ldi	r22, 0x0A	; 10
    303c:	42 e3       	ldi	r20, 0x32	; 50
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <linedelay>
linedelay(ff,20,50,0);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	64 e1       	ldi	r22, 0x14	; 20
    304c:	42 e3       	ldi	r20, 0x32	; 50
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <linedelay>
go(0,ff,s1,s8,35,0);
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	61 e0       	ldi	r22, 0x01	; 1
    305e:	42 e0       	ldi	r20, 0x02	; 2
    3060:	21 e0       	ldi	r18, 0x01	; 1
    3062:	03 e2       	ldi	r16, 0x23	; 35
    3064:	ee 24       	eor	r14, r14
    3066:	ff 24       	eor	r15, r15
    3068:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
if(randombox%5 == 0)
    306c:	80 91 1a 02 	lds	r24, 0x021A
    3070:	90 91 1b 02 	lds	r25, 0x021B
    3074:	65 e0       	ldi	r22, 0x05	; 5
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodhi4>
    307c:	89 2b       	or	r24, r25
    307e:	c9 f4       	brne	.+50     	; 0x30b2 <main+0x18a>
{
  go(0,ttl,0,s8,45,0);
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	63 e0       	ldi	r22, 0x03	; 3
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	21 e0       	ldi	r18, 0x01	; 1
    308a:	0d e2       	ldi	r16, 0x2D	; 45
    308c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttl,0,s8,45,0);
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	63 e0       	ldi	r22, 0x03	; 3
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	21 e0       	ldi	r18, 0x01	; 1
    309a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  linedelay(ttl,45,200,0);
    309e:	83 e0       	ldi	r24, 0x03	; 3
    30a0:	6d e2       	ldi	r22, 0x2D	; 45
    30a2:	48 ec       	ldi	r20, 0xC8	; 200
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <linedelay>
  linedelay(ttl,45,200,0);
    30ae:	83 e0       	ldi	r24, 0x03	; 3
    30b0:	8d c0       	rjmp	.+282    	; 0x31cc <main+0x2a4>
}
else if(randombox%5 ==1)
    30b2:	80 91 1a 02 	lds	r24, 0x021A
    30b6:	90 91 1b 02 	lds	r25, 0x021B
    30ba:	65 e0       	ldi	r22, 0x05	; 5
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodhi4>
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	d9 f4       	brne	.+54     	; 0x30fc <main+0x1d4>
{
  go(0,ff,s1,s8,50,0);
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	42 e0       	ldi	r20, 0x02	; 2
    30ce:	21 e0       	ldi	r18, 0x01	; 1
    30d0:	02 e3       	ldi	r16, 0x32	; 50
    30d2:	ee 24       	eor	r14, r14
    30d4:	ff 24       	eor	r15, r15
    30d6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttl,0,s8,45,0);
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	63 e0       	ldi	r22, 0x03	; 3
    30e0:	40 e0       	ldi	r20, 0x00	; 0
    30e2:	21 e0       	ldi	r18, 0x01	; 1
    30e4:	0d e2       	ldi	r16, 0x2D	; 45
    30e6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttl,0,s8,45,0);
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	63 e0       	ldi	r22, 0x03	; 3
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	21 e0       	ldi	r18, 0x01	; 1
    30f4:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  linedelay(ttl,45,100,0);
    30f8:	83 e0       	ldi	r24, 0x03	; 3
    30fa:	1c c0       	rjmp	.+56     	; 0x3134 <main+0x20c>
}
else if(randombox%5 ==2)
    30fc:	80 91 1a 02 	lds	r24, 0x021A
    3100:	90 91 1b 02 	lds	r25, 0x021B
    3104:	65 e0       	ldi	r22, 0x05	; 5
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodhi4>
    310c:	02 97       	sbiw	r24, 0x02	; 2
    310e:	f9 f4       	brne	.+62     	; 0x314e <main+0x226>
{
  go(0,ff,s1,0,50,0);
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	61 e0       	ldi	r22, 0x01	; 1
    3116:	42 e0       	ldi	r20, 0x02	; 2
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	02 e3       	ldi	r16, 0x32	; 50
    311c:	ee 24       	eor	r14, r14
    311e:	ff 24       	eor	r15, r15
    3120:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ff,s1,0,50,0);
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	61 e0       	ldi	r22, 0x01	; 1
    312a:	42 e0       	ldi	r20, 0x02	; 2
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  linedelay(ff,45,100,0);
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	6d e2       	ldi	r22, 0x2D	; 45
    3136:	44 e6       	ldi	r20, 0x64	; 100
    3138:	50 e0       	ldi	r21, 0x00	; 0
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <linedelay>
    3142:	10 e0       	ldi	r17, 0x00	; 0
    3144:	dd 24       	eor	r13, r13
    3146:	00 e0       	ldi	r16, 0x00	; 0
void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
buzzer_on_time=on_time;
    3148:	c4 e1       	ldi	r28, 0x14	; 20
    314a:	d0 e0       	ldi	r29, 0x00	; 0
    314c:	43 c0       	rjmp	.+134    	; 0x31d4 <main+0x2ac>
}
else if(randombox%5 ==3)
    314e:	80 91 1a 02 	lds	r24, 0x021A
    3152:	90 91 1b 02 	lds	r25, 0x021B
    3156:	65 e0       	ldi	r22, 0x05	; 5
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	0e 94 10 20 	call	0x4020	; 0x4020 <__udivmodhi4>
    315e:	03 97       	sbiw	r24, 0x03	; 3
    3160:	d9 f4       	brne	.+54     	; 0x3198 <main+0x270>
{
  go(0,ff,s1,s8,50,0);
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	42 e0       	ldi	r20, 0x02	; 2
    316a:	21 e0       	ldi	r18, 0x01	; 1
    316c:	02 e3       	ldi	r16, 0x32	; 50
    316e:	ee 24       	eor	r14, r14
    3170:	ff 24       	eor	r15, r15
    3172:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttr,s1,0,45,0);
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	65 e0       	ldi	r22, 0x05	; 5
    317c:	42 e0       	ldi	r20, 0x02	; 2
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	0d e2       	ldi	r16, 0x2D	; 45
    3182:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttr,s1,0,45,0);
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	65 e0       	ldi	r22, 0x05	; 5
    318c:	42 e0       	ldi	r20, 0x02	; 2
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  linedelay(ttr,45,100,0);
    3194:	85 e0       	ldi	r24, 0x05	; 5
    3196:	ce cf       	rjmp	.-100    	; 0x3134 <main+0x20c>
}
else
{
  go(0,ttr,s1,0,45,0);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	65 e0       	ldi	r22, 0x05	; 5
    319e:	42 e0       	ldi	r20, 0x02	; 2
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	0d e2       	ldi	r16, 0x2D	; 45
    31a4:	ee 24       	eor	r14, r14
    31a6:	ff 24       	eor	r15, r15
    31a8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  go(0,ttr,s1,0,45,0);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	65 e0       	ldi	r22, 0x05	; 5
    31b2:	42 e0       	ldi	r20, 0x02	; 2
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
  linedelay(ttr,45,200,0);
    31ba:	85 e0       	ldi	r24, 0x05	; 5
    31bc:	6d e2       	ldi	r22, 0x2D	; 45
    31be:	48 ec       	ldi	r20, 0xC8	; 200
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <linedelay>
  linedelay(ttr,45,200,0);
    31ca:	85 e0       	ldi	r24, 0x05	; 5
    31cc:	6d e2       	ldi	r22, 0x2D	; 45
    31ce:	48 ec       	ldi	r20, 0xC8	; 200
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	b3 cf       	rjmp	.-154    	; 0x313a <main+0x212>
}

  while(1)
  {
    if(!(PINF&ls)) {lsen_data = 1;}
    31d4:	01 9b       	sbis	0x00, 1	; 0
    31d6:	11 e0       	ldi	r17, 0x01	; 1
	if(!(PINF&rs)) {rsen_data = 1;}
    31d8:	00 99       	sbic	0x00, 0	; 0
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <main+0x2b8>
    31dc:	dd 24       	eor	r13, r13
    31de:	d3 94       	inc	r13
	
	if(end_phase == 1) {break;}
    31e0:	01 30       	cpi	r16, 0x01	; 1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <main+0x2be>
    31e4:	b4 c0       	rjmp	.+360    	; 0x334e <main+0x426>
	else if(lsen_data)
    31e6:	11 23       	and	r17, r17
    31e8:	09 f4       	brne	.+2      	; 0x31ec <main+0x2c4>
    31ea:	53 c0       	rjmp	.+166    	; 0x3292 <main+0x36a>
	{
		motor_speed(10,10);  
    31ec:	8a e0       	ldi	r24, 0x0A	; 10
    31ee:	6a e0       	ldi	r22, 0x0A	; 10
    31f0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
  		while(1)
  		{
			if((!(PINF&ls))==0) {break;}
    31f4:	01 99       	sbic	0x00, 1	; 0
    31f6:	04 c0       	rjmp	.+8      	; 0x3200 <main+0x2d8>
			if(!(PINF&rs)) {end_phase = 1; break;}
    31f8:	00 99       	sbic	0x00, 0	; 0
    31fa:	fc cf       	rjmp	.-8      	; 0x31f4 <main+0x2cc>
    31fc:	11 e0       	ldi	r17, 0x01	; 1
    31fe:	54 c0       	rjmp	.+168    	; 0x32a8 <main+0x380>
		}
		if(end_phase ==0)
		{
      	  buzzer(20,1,init_buzzer_data);
    3200:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	90 93 15 02 	sts	0x0215, r25
    320a:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    320e:	d0 93 0b 02 	sts	0x020B, r29
    3212:	c0 93 0a 02 	sts	0x020A, r28
buzzer_off_time=buzzer_off_count;
    3216:	80 91 10 02 	lds	r24, 0x0210
    321a:	90 91 11 02 	lds	r25, 0x0211
    321e:	90 93 0f 02 	sts	0x020F, r25
    3222:	80 93 0e 02 	sts	0x020E, r24
	  	  turn_left;
    3226:	87 ef       	ldi	r24, 0xF7	; 247
    3228:	68 e2       	ldi	r22, 0x28	; 40
    322a:	42 e0       	ldi	r20, 0x02	; 2
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    3234:	89 ef       	ldi	r24, 0xF9	; 249
    3236:	6e e1       	ldi	r22, 0x1E	; 30
    3238:	44 e0       	ldi	r20, 0x04	; 4
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	6e e1       	ldi	r22, 0x1E	; 30
    3246:	48 e0       	ldi	r20, 0x08	; 8
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	0e 94 ad 0a 	call	0x155a	; 0x155a <exturn>
	  	  go(0,ss,0,rs,mt_sp,0);
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	62 e0       	ldi	r22, 0x02	; 2
    3256:	40 e0       	ldi	r20, 0x00	; 0
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	0e e1       	ldi	r16, 0x1E	; 30
    325c:	ee 24       	eor	r14, r14
    325e:	ff 24       	eor	r15, r15
    3260:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
	 	  turn_right;
    3264:	88 e2       	ldi	r24, 0x28	; 40
    3266:	67 ef       	ldi	r22, 0xF7	; 247
    3268:	41 e0       	ldi	r20, 0x01	; 1
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    3272:	8e e1       	ldi	r24, 0x1E	; 30
    3274:	69 ef       	ldi	r22, 0xF9	; 249
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    3280:	8e e1       	ldi	r24, 0x1E	; 30
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	40 e4       	ldi	r20, 0x40	; 64
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	0e 94 ad 0a 	call	0x155a	; 0x155a <exturn>
    328e:	10 e0       	ldi	r17, 0x00	; 0
    3290:	55 c0       	rjmp	.+170    	; 0x333c <main+0x414>
	  	  lsen_data = 0;
		}
	}
	else if(rsen_data)
    3292:	dd 20       	and	r13, r13
    3294:	09 f4       	brne	.+2      	; 0x3298 <main+0x370>
    3296:	52 c0       	rjmp	.+164    	; 0x333c <main+0x414>
	{
		motor_speed(10,10);  
    3298:	8a e0       	ldi	r24, 0x0A	; 10
    329a:	6a e0       	ldi	r22, 0x0A	; 10
    329c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <motor_speed>
  		while(1)
  		{
			if((!(PINF&rs))==0) {break;}
    32a0:	00 99       	sbic	0x00, 0	; 0
    32a2:	04 c0       	rjmp	.+8      	; 0x32ac <main+0x384>
			if(!(PINF&ls)) {end_phase = 1; break;}
    32a4:	01 99       	sbic	0x00, 1	; 0
    32a6:	fc cf       	rjmp	.-8      	; 0x32a0 <main+0x378>
    32a8:	01 e0       	ldi	r16, 0x01	; 1
    32aa:	49 c0       	rjmp	.+146    	; 0x333e <main+0x416>
		}
		if(end_phase ==0)
		{
      	  buzzer(20,1,init_buzzer_data);
    32ac:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	90 93 15 02 	sts	0x0215, r25
    32b6:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    32ba:	d0 93 0b 02 	sts	0x020B, r29
    32be:	c0 93 0a 02 	sts	0x020A, r28
buzzer_off_time=buzzer_off_count;
    32c2:	80 91 10 02 	lds	r24, 0x0210
    32c6:	90 91 11 02 	lds	r25, 0x0211
    32ca:	90 93 0f 02 	sts	0x020F, r25
    32ce:	80 93 0e 02 	sts	0x020E, r24
	  	  turn_right;
    32d2:	88 e2       	ldi	r24, 0x28	; 40
    32d4:	67 ef       	ldi	r22, 0xF7	; 247
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    32e0:	8e e1       	ldi	r24, 0x1E	; 30
    32e2:	69 ef       	ldi	r22, 0xF9	; 249
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    32ee:	8e e1       	ldi	r24, 0x1E	; 30
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	40 e4       	ldi	r20, 0x40	; 64
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	0e 94 ad 0a 	call	0x155a	; 0x155a <exturn>
	  	  go(0,ss,ls,0,mt_sp,0);
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	42 e0       	ldi	r20, 0x02	; 2
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	0e e1       	ldi	r16, 0x1E	; 30
    3308:	ee 24       	eor	r14, r14
    330a:	ff 24       	eor	r15, r15
    330c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <go>
	  	  turn_left;
    3310:	87 ef       	ldi	r24, 0xF7	; 247
    3312:	68 e2       	ldi	r22, 0x28	; 40
    3314:	42 e0       	ldi	r20, 0x02	; 2
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    331e:	89 ef       	ldi	r24, 0xF9	; 249
    3320:	6e e1       	ldi	r22, 0x1E	; 30
    3322:	44 e0       	ldi	r20, 0x04	; 4
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	0e 94 df 0a 	call	0x15be	; 0x15be <exline>
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	6e e1       	ldi	r22, 0x1E	; 30
    3330:	48 e0       	ldi	r20, 0x08	; 8
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	0e 94 ad 0a 	call	0x155a	; 0x155a <exturn>
    333a:	dd 24       	eor	r13, r13
    333c:	00 e0       	ldi	r16, 0x00	; 0
	  	  rsen_data = 0;
		}
	}
	line_del(0,ff,mt_sp,1);
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	4e e1       	ldi	r20, 0x1E	; 30
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	0e 94 14 0b 	call	0x1628	; 0x1628 <line_del>
    334c:	43 cf       	rjmp	.-378    	; 0x31d4 <main+0x2ac>
  }
motor(0,0,200);
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	48 ec       	ldi	r20, 0xC8	; 200
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>
buzzer(100,100,init_buzzer_data);
    335a:	80 91 08 02 	lds	r24, 0x0208

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	90 93 15 02 	sts	0x0215, r25
    3364:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    3368:	04 e6       	ldi	r16, 0x64	; 100
    336a:	10 e0       	ldi	r17, 0x00	; 0
    336c:	10 93 0b 02 	sts	0x020B, r17
    3370:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
    3374:	80 91 10 02 	lds	r24, 0x0210
    3378:	90 91 11 02 	lds	r25, 0x0211
    337c:	90 93 0f 02 	sts	0x020F, r25
    3380:	80 93 0e 02 	sts	0x020E, r24
delay(200);
    3384:	88 ec       	ldi	r24, 0xC8	; 200
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

void buzzer_off(){PORTD&=~(1<<PD0);}

void buzzer(unsigned int on_time, unsigned int off_time, unsigned char buzzer_count)
{
buzz_time=buzzer_count;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	90 93 15 02 	sts	0x0215, r25
    3394:	80 93 14 02 	sts	0x0214, r24
buzzer_on_time=on_time;
    3398:	10 93 0b 02 	sts	0x020B, r17
    339c:	00 93 0a 02 	sts	0x020A, r16
buzzer_off_time=buzzer_off_count;
    33a0:	80 91 10 02 	lds	r24, 0x0210
    33a4:	90 91 11 02 	lds	r25, 0x0211
    33a8:	90 93 0f 02 	sts	0x020F, r25
    33ac:	80 93 0e 02 	sts	0x020E, r24
buzzer(100,100,1);
delay(200);
    33b0:	88 ec       	ldi	r24, 0xC8	; 200
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <delay>

//////////////////////
motor(0,0,3000);
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	48 eb       	ldi	r20, 0xB8	; 184
    33be:	5b e0       	ldi	r21, 0x0B	; 11
    33c0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <motor>
end();
    33c4:	0e 94 c7 00 	call	0x18e	; 0x18e <end>

return 0;
}
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	08 95       	ret

000033dc <__fixunssfsi>:
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	7b 01       	movw	r14, r22
    33e6:	8c 01       	movw	r16, r24
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	5f e4       	ldi	r21, 0x4F	; 79
    33f0:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    33f4:	88 23       	and	r24, r24
    33f6:	8c f0       	brlt	.+34     	; 0x341a <__fixunssfsi+0x3e>
    33f8:	c8 01       	movw	r24, r16
    33fa:	b7 01       	movw	r22, r14
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	5f e4       	ldi	r21, 0x4F	; 79
    3404:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__subsf3>
    3408:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__fixsfsi>
    340c:	9b 01       	movw	r18, r22
    340e:	ac 01       	movw	r20, r24
    3410:	20 50       	subi	r18, 0x00	; 0
    3412:	30 40       	sbci	r19, 0x00	; 0
    3414:	40 40       	sbci	r20, 0x00	; 0
    3416:	50 48       	sbci	r21, 0x80	; 128
    3418:	06 c0       	rjmp	.+12     	; 0x3426 <__fixunssfsi+0x4a>
    341a:	c8 01       	movw	r24, r16
    341c:	b7 01       	movw	r22, r14
    341e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__fixsfsi>
    3422:	9b 01       	movw	r18, r22
    3424:	ac 01       	movw	r20, r24
    3426:	b9 01       	movw	r22, r18
    3428:	ca 01       	movw	r24, r20
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	08 95       	ret

00003434 <_fpadd_parts>:
    3434:	a0 e0       	ldi	r26, 0x00	; 0
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	e0 e2       	ldi	r30, 0x20	; 32
    343a:	fa e1       	ldi	r31, 0x1A	; 26
    343c:	0c 94 37 20 	jmp	0x406e	; 0x406e <__prologue_saves__>
    3440:	dc 01       	movw	r26, r24
    3442:	2b 01       	movw	r4, r22
    3444:	fa 01       	movw	r30, r20
    3446:	9c 91       	ld	r25, X
    3448:	92 30       	cpi	r25, 0x02	; 2
    344a:	08 f4       	brcc	.+2      	; 0x344e <_fpadd_parts+0x1a>
    344c:	39 c1       	rjmp	.+626    	; 0x36c0 <_fpadd_parts+0x28c>
    344e:	eb 01       	movw	r28, r22
    3450:	88 81       	ld	r24, Y
    3452:	82 30       	cpi	r24, 0x02	; 2
    3454:	08 f4       	brcc	.+2      	; 0x3458 <_fpadd_parts+0x24>
    3456:	33 c1       	rjmp	.+614    	; 0x36be <_fpadd_parts+0x28a>
    3458:	94 30       	cpi	r25, 0x04	; 4
    345a:	69 f4       	brne	.+26     	; 0x3476 <_fpadd_parts+0x42>
    345c:	84 30       	cpi	r24, 0x04	; 4
    345e:	09 f0       	breq	.+2      	; 0x3462 <_fpadd_parts+0x2e>
    3460:	2f c1       	rjmp	.+606    	; 0x36c0 <_fpadd_parts+0x28c>
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	9c 91       	ld	r25, X
    3466:	11 97       	sbiw	r26, 0x01	; 1
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	98 17       	cp	r25, r24
    346c:	09 f4       	brne	.+2      	; 0x3470 <_fpadd_parts+0x3c>
    346e:	28 c1       	rjmp	.+592    	; 0x36c0 <_fpadd_parts+0x28c>
    3470:	a0 e0       	ldi	r26, 0x00	; 0
    3472:	b1 e0       	ldi	r27, 0x01	; 1
    3474:	25 c1       	rjmp	.+586    	; 0x36c0 <_fpadd_parts+0x28c>
    3476:	84 30       	cpi	r24, 0x04	; 4
    3478:	09 f4       	brne	.+2      	; 0x347c <_fpadd_parts+0x48>
    347a:	21 c1       	rjmp	.+578    	; 0x36be <_fpadd_parts+0x28a>
    347c:	82 30       	cpi	r24, 0x02	; 2
    347e:	a9 f4       	brne	.+42     	; 0x34aa <_fpadd_parts+0x76>
    3480:	92 30       	cpi	r25, 0x02	; 2
    3482:	09 f0       	breq	.+2      	; 0x3486 <_fpadd_parts+0x52>
    3484:	1d c1       	rjmp	.+570    	; 0x36c0 <_fpadd_parts+0x28c>
    3486:	9a 01       	movw	r18, r20
    3488:	ad 01       	movw	r20, r26
    348a:	88 e0       	ldi	r24, 0x08	; 8
    348c:	ea 01       	movw	r28, r20
    348e:	09 90       	ld	r0, Y+
    3490:	ae 01       	movw	r20, r28
    3492:	e9 01       	movw	r28, r18
    3494:	09 92       	st	Y+, r0
    3496:	9e 01       	movw	r18, r28
    3498:	81 50       	subi	r24, 0x01	; 1
    349a:	c1 f7       	brne	.-16     	; 0x348c <_fpadd_parts+0x58>
    349c:	e2 01       	movw	r28, r4
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	11 96       	adiw	r26, 0x01	; 1
    34a2:	9c 91       	ld	r25, X
    34a4:	89 23       	and	r24, r25
    34a6:	81 83       	std	Z+1, r24	; 0x01
    34a8:	08 c1       	rjmp	.+528    	; 0x36ba <_fpadd_parts+0x286>
    34aa:	92 30       	cpi	r25, 0x02	; 2
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <_fpadd_parts+0x7c>
    34ae:	07 c1       	rjmp	.+526    	; 0x36be <_fpadd_parts+0x28a>
    34b0:	12 96       	adiw	r26, 0x02	; 2
    34b2:	2d 90       	ld	r2, X+
    34b4:	3c 90       	ld	r3, X
    34b6:	13 97       	sbiw	r26, 0x03	; 3
    34b8:	eb 01       	movw	r28, r22
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	9b 81       	ldd	r25, Y+3	; 0x03
    34be:	14 96       	adiw	r26, 0x04	; 4
    34c0:	ad 90       	ld	r10, X+
    34c2:	bd 90       	ld	r11, X+
    34c4:	cd 90       	ld	r12, X+
    34c6:	dc 90       	ld	r13, X
    34c8:	17 97       	sbiw	r26, 0x07	; 7
    34ca:	ec 80       	ldd	r14, Y+4	; 0x04
    34cc:	fd 80       	ldd	r15, Y+5	; 0x05
    34ce:	0e 81       	ldd	r16, Y+6	; 0x06
    34d0:	1f 81       	ldd	r17, Y+7	; 0x07
    34d2:	91 01       	movw	r18, r2
    34d4:	28 1b       	sub	r18, r24
    34d6:	39 0b       	sbc	r19, r25
    34d8:	b9 01       	movw	r22, r18
    34da:	37 ff       	sbrs	r19, 7
    34dc:	04 c0       	rjmp	.+8      	; 0x34e6 <_fpadd_parts+0xb2>
    34de:	66 27       	eor	r22, r22
    34e0:	77 27       	eor	r23, r23
    34e2:	62 1b       	sub	r22, r18
    34e4:	73 0b       	sbc	r23, r19
    34e6:	60 32       	cpi	r22, 0x20	; 32
    34e8:	71 05       	cpc	r23, r1
    34ea:	0c f0       	brlt	.+2      	; 0x34ee <_fpadd_parts+0xba>
    34ec:	61 c0       	rjmp	.+194    	; 0x35b0 <_fpadd_parts+0x17c>
    34ee:	12 16       	cp	r1, r18
    34f0:	13 06       	cpc	r1, r19
    34f2:	6c f5       	brge	.+90     	; 0x354e <_fpadd_parts+0x11a>
    34f4:	37 01       	movw	r6, r14
    34f6:	48 01       	movw	r8, r16
    34f8:	06 2e       	mov	r0, r22
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <_fpadd_parts+0xd0>
    34fc:	96 94       	lsr	r9
    34fe:	87 94       	ror	r8
    3500:	77 94       	ror	r7
    3502:	67 94       	ror	r6
    3504:	0a 94       	dec	r0
    3506:	d2 f7       	brpl	.-12     	; 0x34fc <_fpadd_parts+0xc8>
    3508:	21 e0       	ldi	r18, 0x01	; 1
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	04 c0       	rjmp	.+8      	; 0x351a <_fpadd_parts+0xe6>
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	44 1f       	adc	r20, r20
    3518:	55 1f       	adc	r21, r21
    351a:	6a 95       	dec	r22
    351c:	d2 f7       	brpl	.-12     	; 0x3512 <_fpadd_parts+0xde>
    351e:	21 50       	subi	r18, 0x01	; 1
    3520:	30 40       	sbci	r19, 0x00	; 0
    3522:	40 40       	sbci	r20, 0x00	; 0
    3524:	50 40       	sbci	r21, 0x00	; 0
    3526:	2e 21       	and	r18, r14
    3528:	3f 21       	and	r19, r15
    352a:	40 23       	and	r20, r16
    352c:	51 23       	and	r21, r17
    352e:	21 15       	cp	r18, r1
    3530:	31 05       	cpc	r19, r1
    3532:	41 05       	cpc	r20, r1
    3534:	51 05       	cpc	r21, r1
    3536:	21 f0       	breq	.+8      	; 0x3540 <_fpadd_parts+0x10c>
    3538:	21 e0       	ldi	r18, 0x01	; 1
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	79 01       	movw	r14, r18
    3542:	8a 01       	movw	r16, r20
    3544:	e6 28       	or	r14, r6
    3546:	f7 28       	or	r15, r7
    3548:	08 29       	or	r16, r8
    354a:	19 29       	or	r17, r9
    354c:	3c c0       	rjmp	.+120    	; 0x35c6 <_fpadd_parts+0x192>
    354e:	23 2b       	or	r18, r19
    3550:	d1 f1       	breq	.+116    	; 0x35c6 <_fpadd_parts+0x192>
    3552:	26 0e       	add	r2, r22
    3554:	37 1e       	adc	r3, r23
    3556:	35 01       	movw	r6, r10
    3558:	46 01       	movw	r8, r12
    355a:	06 2e       	mov	r0, r22
    355c:	04 c0       	rjmp	.+8      	; 0x3566 <_fpadd_parts+0x132>
    355e:	96 94       	lsr	r9
    3560:	87 94       	ror	r8
    3562:	77 94       	ror	r7
    3564:	67 94       	ror	r6
    3566:	0a 94       	dec	r0
    3568:	d2 f7       	brpl	.-12     	; 0x355e <_fpadd_parts+0x12a>
    356a:	21 e0       	ldi	r18, 0x01	; 1
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	04 c0       	rjmp	.+8      	; 0x357c <_fpadd_parts+0x148>
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	44 1f       	adc	r20, r20
    357a:	55 1f       	adc	r21, r21
    357c:	6a 95       	dec	r22
    357e:	d2 f7       	brpl	.-12     	; 0x3574 <_fpadd_parts+0x140>
    3580:	21 50       	subi	r18, 0x01	; 1
    3582:	30 40       	sbci	r19, 0x00	; 0
    3584:	40 40       	sbci	r20, 0x00	; 0
    3586:	50 40       	sbci	r21, 0x00	; 0
    3588:	2a 21       	and	r18, r10
    358a:	3b 21       	and	r19, r11
    358c:	4c 21       	and	r20, r12
    358e:	5d 21       	and	r21, r13
    3590:	21 15       	cp	r18, r1
    3592:	31 05       	cpc	r19, r1
    3594:	41 05       	cpc	r20, r1
    3596:	51 05       	cpc	r21, r1
    3598:	21 f0       	breq	.+8      	; 0x35a2 <_fpadd_parts+0x16e>
    359a:	21 e0       	ldi	r18, 0x01	; 1
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e0       	ldi	r20, 0x00	; 0
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	59 01       	movw	r10, r18
    35a4:	6a 01       	movw	r12, r20
    35a6:	a6 28       	or	r10, r6
    35a8:	b7 28       	or	r11, r7
    35aa:	c8 28       	or	r12, r8
    35ac:	d9 28       	or	r13, r9
    35ae:	0b c0       	rjmp	.+22     	; 0x35c6 <_fpadd_parts+0x192>
    35b0:	82 15       	cp	r24, r2
    35b2:	93 05       	cpc	r25, r3
    35b4:	2c f0       	brlt	.+10     	; 0x35c0 <_fpadd_parts+0x18c>
    35b6:	1c 01       	movw	r2, r24
    35b8:	aa 24       	eor	r10, r10
    35ba:	bb 24       	eor	r11, r11
    35bc:	65 01       	movw	r12, r10
    35be:	03 c0       	rjmp	.+6      	; 0x35c6 <_fpadd_parts+0x192>
    35c0:	ee 24       	eor	r14, r14
    35c2:	ff 24       	eor	r15, r15
    35c4:	87 01       	movw	r16, r14
    35c6:	11 96       	adiw	r26, 0x01	; 1
    35c8:	9c 91       	ld	r25, X
    35ca:	d2 01       	movw	r26, r4
    35cc:	11 96       	adiw	r26, 0x01	; 1
    35ce:	8c 91       	ld	r24, X
    35d0:	98 17       	cp	r25, r24
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <_fpadd_parts+0x1a2>
    35d4:	45 c0       	rjmp	.+138    	; 0x3660 <_fpadd_parts+0x22c>
    35d6:	99 23       	and	r25, r25
    35d8:	39 f0       	breq	.+14     	; 0x35e8 <_fpadd_parts+0x1b4>
    35da:	a8 01       	movw	r20, r16
    35dc:	97 01       	movw	r18, r14
    35de:	2a 19       	sub	r18, r10
    35e0:	3b 09       	sbc	r19, r11
    35e2:	4c 09       	sbc	r20, r12
    35e4:	5d 09       	sbc	r21, r13
    35e6:	06 c0       	rjmp	.+12     	; 0x35f4 <_fpadd_parts+0x1c0>
    35e8:	a6 01       	movw	r20, r12
    35ea:	95 01       	movw	r18, r10
    35ec:	2e 19       	sub	r18, r14
    35ee:	3f 09       	sbc	r19, r15
    35f0:	40 0b       	sbc	r20, r16
    35f2:	51 0b       	sbc	r21, r17
    35f4:	57 fd       	sbrc	r21, 7
    35f6:	08 c0       	rjmp	.+16     	; 0x3608 <_fpadd_parts+0x1d4>
    35f8:	11 82       	std	Z+1, r1	; 0x01
    35fa:	33 82       	std	Z+3, r3	; 0x03
    35fc:	22 82       	std	Z+2, r2	; 0x02
    35fe:	24 83       	std	Z+4, r18	; 0x04
    3600:	35 83       	std	Z+5, r19	; 0x05
    3602:	46 83       	std	Z+6, r20	; 0x06
    3604:	57 83       	std	Z+7, r21	; 0x07
    3606:	1d c0       	rjmp	.+58     	; 0x3642 <_fpadd_parts+0x20e>
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	81 83       	std	Z+1, r24	; 0x01
    360c:	33 82       	std	Z+3, r3	; 0x03
    360e:	22 82       	std	Z+2, r2	; 0x02
    3610:	88 27       	eor	r24, r24
    3612:	99 27       	eor	r25, r25
    3614:	dc 01       	movw	r26, r24
    3616:	82 1b       	sub	r24, r18
    3618:	93 0b       	sbc	r25, r19
    361a:	a4 0b       	sbc	r26, r20
    361c:	b5 0b       	sbc	r27, r21
    361e:	84 83       	std	Z+4, r24	; 0x04
    3620:	95 83       	std	Z+5, r25	; 0x05
    3622:	a6 83       	std	Z+6, r26	; 0x06
    3624:	b7 83       	std	Z+7, r27	; 0x07
    3626:	0d c0       	rjmp	.+26     	; 0x3642 <_fpadd_parts+0x20e>
    3628:	22 0f       	add	r18, r18
    362a:	33 1f       	adc	r19, r19
    362c:	44 1f       	adc	r20, r20
    362e:	55 1f       	adc	r21, r21
    3630:	24 83       	std	Z+4, r18	; 0x04
    3632:	35 83       	std	Z+5, r19	; 0x05
    3634:	46 83       	std	Z+6, r20	; 0x06
    3636:	57 83       	std	Z+7, r21	; 0x07
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	93 83       	std	Z+3, r25	; 0x03
    3640:	82 83       	std	Z+2, r24	; 0x02
    3642:	24 81       	ldd	r18, Z+4	; 0x04
    3644:	35 81       	ldd	r19, Z+5	; 0x05
    3646:	46 81       	ldd	r20, Z+6	; 0x06
    3648:	57 81       	ldd	r21, Z+7	; 0x07
    364a:	da 01       	movw	r26, r20
    364c:	c9 01       	movw	r24, r18
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	a1 09       	sbc	r26, r1
    3652:	b1 09       	sbc	r27, r1
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	9f 4f       	sbci	r25, 0xFF	; 255
    3658:	af 4f       	sbci	r26, 0xFF	; 255
    365a:	bf 43       	sbci	r27, 0x3F	; 63
    365c:	28 f3       	brcs	.-54     	; 0x3628 <_fpadd_parts+0x1f4>
    365e:	0b c0       	rjmp	.+22     	; 0x3676 <_fpadd_parts+0x242>
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	33 82       	std	Z+3, r3	; 0x03
    3664:	22 82       	std	Z+2, r2	; 0x02
    3666:	ea 0c       	add	r14, r10
    3668:	fb 1c       	adc	r15, r11
    366a:	0c 1d       	adc	r16, r12
    366c:	1d 1d       	adc	r17, r13
    366e:	e4 82       	std	Z+4, r14	; 0x04
    3670:	f5 82       	std	Z+5, r15	; 0x05
    3672:	06 83       	std	Z+6, r16	; 0x06
    3674:	17 83       	std	Z+7, r17	; 0x07
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	80 83       	st	Z, r24
    367a:	24 81       	ldd	r18, Z+4	; 0x04
    367c:	35 81       	ldd	r19, Z+5	; 0x05
    367e:	46 81       	ldd	r20, Z+6	; 0x06
    3680:	57 81       	ldd	r21, Z+7	; 0x07
    3682:	57 ff       	sbrs	r21, 7
    3684:	1a c0       	rjmp	.+52     	; 0x36ba <_fpadd_parts+0x286>
    3686:	c9 01       	movw	r24, r18
    3688:	aa 27       	eor	r26, r26
    368a:	97 fd       	sbrc	r25, 7
    368c:	a0 95       	com	r26
    368e:	ba 2f       	mov	r27, r26
    3690:	81 70       	andi	r24, 0x01	; 1
    3692:	90 70       	andi	r25, 0x00	; 0
    3694:	a0 70       	andi	r26, 0x00	; 0
    3696:	b0 70       	andi	r27, 0x00	; 0
    3698:	56 95       	lsr	r21
    369a:	47 95       	ror	r20
    369c:	37 95       	ror	r19
    369e:	27 95       	ror	r18
    36a0:	82 2b       	or	r24, r18
    36a2:	93 2b       	or	r25, r19
    36a4:	a4 2b       	or	r26, r20
    36a6:	b5 2b       	or	r27, r21
    36a8:	84 83       	std	Z+4, r24	; 0x04
    36aa:	95 83       	std	Z+5, r25	; 0x05
    36ac:	a6 83       	std	Z+6, r26	; 0x06
    36ae:	b7 83       	std	Z+7, r27	; 0x07
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	93 83       	std	Z+3, r25	; 0x03
    36b8:	82 83       	std	Z+2, r24	; 0x02
    36ba:	df 01       	movw	r26, r30
    36bc:	01 c0       	rjmp	.+2      	; 0x36c0 <_fpadd_parts+0x28c>
    36be:	d2 01       	movw	r26, r4
    36c0:	cd 01       	movw	r24, r26
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	e2 e1       	ldi	r30, 0x12	; 18
    36c8:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__epilogue_restores__>

000036cc <__subsf3>:
    36cc:	a0 e2       	ldi	r26, 0x20	; 32
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	ec e6       	ldi	r30, 0x6C	; 108
    36d2:	fb e1       	ldi	r31, 0x1B	; 27
    36d4:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__prologue_saves__+0x18>
    36d8:	69 83       	std	Y+1, r22	; 0x01
    36da:	7a 83       	std	Y+2, r23	; 0x02
    36dc:	8b 83       	std	Y+3, r24	; 0x03
    36de:	9c 83       	std	Y+4, r25	; 0x04
    36e0:	2d 83       	std	Y+5, r18	; 0x05
    36e2:	3e 83       	std	Y+6, r19	; 0x06
    36e4:	4f 83       	std	Y+7, r20	; 0x07
    36e6:	58 87       	std	Y+8, r21	; 0x08
    36e8:	e9 e0       	ldi	r30, 0x09	; 9
    36ea:	ee 2e       	mov	r14, r30
    36ec:	f1 2c       	mov	r15, r1
    36ee:	ec 0e       	add	r14, r28
    36f0:	fd 1e       	adc	r15, r29
    36f2:	ce 01       	movw	r24, r28
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	b7 01       	movw	r22, r14
    36f8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    36fc:	8e 01       	movw	r16, r28
    36fe:	0f 5e       	subi	r16, 0xEF	; 239
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
    3702:	ce 01       	movw	r24, r28
    3704:	05 96       	adiw	r24, 0x05	; 5
    3706:	b8 01       	movw	r22, r16
    3708:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    370c:	8a 89       	ldd	r24, Y+18	; 0x12
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	89 27       	eor	r24, r25
    3712:	8a 8b       	std	Y+18, r24	; 0x12
    3714:	c7 01       	movw	r24, r14
    3716:	b8 01       	movw	r22, r16
    3718:	ae 01       	movw	r20, r28
    371a:	47 5e       	subi	r20, 0xE7	; 231
    371c:	5f 4f       	sbci	r21, 0xFF	; 255
    371e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <_fpadd_parts>
    3722:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__pack_f>
    3726:	a0 96       	adiw	r28, 0x20	; 32
    3728:	e6 e0       	ldi	r30, 0x06	; 6
    372a:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__epilogue_restores__+0x18>

0000372e <__addsf3>:
    372e:	a0 e2       	ldi	r26, 0x20	; 32
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	ed e9       	ldi	r30, 0x9D	; 157
    3734:	fb e1       	ldi	r31, 0x1B	; 27
    3736:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__prologue_saves__+0x18>
    373a:	69 83       	std	Y+1, r22	; 0x01
    373c:	7a 83       	std	Y+2, r23	; 0x02
    373e:	8b 83       	std	Y+3, r24	; 0x03
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	2d 83       	std	Y+5, r18	; 0x05
    3744:	3e 83       	std	Y+6, r19	; 0x06
    3746:	4f 83       	std	Y+7, r20	; 0x07
    3748:	58 87       	std	Y+8, r21	; 0x08
    374a:	f9 e0       	ldi	r31, 0x09	; 9
    374c:	ef 2e       	mov	r14, r31
    374e:	f1 2c       	mov	r15, r1
    3750:	ec 0e       	add	r14, r28
    3752:	fd 1e       	adc	r15, r29
    3754:	ce 01       	movw	r24, r28
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	b7 01       	movw	r22, r14
    375a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    375e:	8e 01       	movw	r16, r28
    3760:	0f 5e       	subi	r16, 0xEF	; 239
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	ce 01       	movw	r24, r28
    3766:	05 96       	adiw	r24, 0x05	; 5
    3768:	b8 01       	movw	r22, r16
    376a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    376e:	c7 01       	movw	r24, r14
    3770:	b8 01       	movw	r22, r16
    3772:	ae 01       	movw	r20, r28
    3774:	47 5e       	subi	r20, 0xE7	; 231
    3776:	5f 4f       	sbci	r21, 0xFF	; 255
    3778:	0e 94 1a 1a 	call	0x3434	; 0x3434 <_fpadd_parts>
    377c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__pack_f>
    3780:	a0 96       	adiw	r28, 0x20	; 32
    3782:	e6 e0       	ldi	r30, 0x06	; 6
    3784:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__epilogue_restores__+0x18>

00003788 <__mulsf3>:
    3788:	a0 e2       	ldi	r26, 0x20	; 32
    378a:	b0 e0       	ldi	r27, 0x00	; 0
    378c:	ea ec       	ldi	r30, 0xCA	; 202
    378e:	fb e1       	ldi	r31, 0x1B	; 27
    3790:	0c 94 37 20 	jmp	0x406e	; 0x406e <__prologue_saves__>
    3794:	69 83       	std	Y+1, r22	; 0x01
    3796:	7a 83       	std	Y+2, r23	; 0x02
    3798:	8b 83       	std	Y+3, r24	; 0x03
    379a:	9c 83       	std	Y+4, r25	; 0x04
    379c:	2d 83       	std	Y+5, r18	; 0x05
    379e:	3e 83       	std	Y+6, r19	; 0x06
    37a0:	4f 83       	std	Y+7, r20	; 0x07
    37a2:	58 87       	std	Y+8, r21	; 0x08
    37a4:	ce 01       	movw	r24, r28
    37a6:	01 96       	adiw	r24, 0x01	; 1
    37a8:	be 01       	movw	r22, r28
    37aa:	67 5f       	subi	r22, 0xF7	; 247
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    37b2:	ce 01       	movw	r24, r28
    37b4:	05 96       	adiw	r24, 0x05	; 5
    37b6:	be 01       	movw	r22, r28
    37b8:	6f 5e       	subi	r22, 0xEF	; 239
    37ba:	7f 4f       	sbci	r23, 0xFF	; 255
    37bc:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    37c0:	99 85       	ldd	r25, Y+9	; 0x09
    37c2:	92 30       	cpi	r25, 0x02	; 2
    37c4:	88 f0       	brcs	.+34     	; 0x37e8 <__mulsf3+0x60>
    37c6:	89 89       	ldd	r24, Y+17	; 0x11
    37c8:	82 30       	cpi	r24, 0x02	; 2
    37ca:	c8 f0       	brcs	.+50     	; 0x37fe <__mulsf3+0x76>
    37cc:	94 30       	cpi	r25, 0x04	; 4
    37ce:	19 f4       	brne	.+6      	; 0x37d6 <__mulsf3+0x4e>
    37d0:	82 30       	cpi	r24, 0x02	; 2
    37d2:	51 f4       	brne	.+20     	; 0x37e8 <__mulsf3+0x60>
    37d4:	04 c0       	rjmp	.+8      	; 0x37de <__mulsf3+0x56>
    37d6:	84 30       	cpi	r24, 0x04	; 4
    37d8:	29 f4       	brne	.+10     	; 0x37e4 <__mulsf3+0x5c>
    37da:	92 30       	cpi	r25, 0x02	; 2
    37dc:	81 f4       	brne	.+32     	; 0x37fe <__mulsf3+0x76>
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	c6 c0       	rjmp	.+396    	; 0x3970 <__mulsf3+0x1e8>
    37e4:	92 30       	cpi	r25, 0x02	; 2
    37e6:	49 f4       	brne	.+18     	; 0x37fa <__mulsf3+0x72>
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ec:	8a 89       	ldd	r24, Y+18	; 0x12
    37ee:	98 13       	cpse	r25, r24
    37f0:	21 e0       	ldi	r18, 0x01	; 1
    37f2:	2a 87       	std	Y+10, r18	; 0x0a
    37f4:	ce 01       	movw	r24, r28
    37f6:	09 96       	adiw	r24, 0x09	; 9
    37f8:	bb c0       	rjmp	.+374    	; 0x3970 <__mulsf3+0x1e8>
    37fa:	82 30       	cpi	r24, 0x02	; 2
    37fc:	49 f4       	brne	.+18     	; 0x3810 <__mulsf3+0x88>
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	9a 85       	ldd	r25, Y+10	; 0x0a
    3802:	8a 89       	ldd	r24, Y+18	; 0x12
    3804:	98 13       	cpse	r25, r24
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	2a 8b       	std	Y+18, r18	; 0x12
    380a:	ce 01       	movw	r24, r28
    380c:	41 96       	adiw	r24, 0x11	; 17
    380e:	b0 c0       	rjmp	.+352    	; 0x3970 <__mulsf3+0x1e8>
    3810:	2d 84       	ldd	r2, Y+13	; 0x0d
    3812:	3e 84       	ldd	r3, Y+14	; 0x0e
    3814:	4f 84       	ldd	r4, Y+15	; 0x0f
    3816:	58 88       	ldd	r5, Y+16	; 0x10
    3818:	6d 88       	ldd	r6, Y+21	; 0x15
    381a:	7e 88       	ldd	r7, Y+22	; 0x16
    381c:	8f 88       	ldd	r8, Y+23	; 0x17
    381e:	98 8c       	ldd	r9, Y+24	; 0x18
    3820:	ee 24       	eor	r14, r14
    3822:	ff 24       	eor	r15, r15
    3824:	87 01       	movw	r16, r14
    3826:	aa 24       	eor	r10, r10
    3828:	bb 24       	eor	r11, r11
    382a:	65 01       	movw	r12, r10
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	e0 e0       	ldi	r30, 0x00	; 0
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	c1 01       	movw	r24, r2
    383a:	81 70       	andi	r24, 0x01	; 1
    383c:	90 70       	andi	r25, 0x00	; 0
    383e:	89 2b       	or	r24, r25
    3840:	e9 f0       	breq	.+58     	; 0x387c <__mulsf3+0xf4>
    3842:	e6 0c       	add	r14, r6
    3844:	f7 1c       	adc	r15, r7
    3846:	08 1d       	adc	r16, r8
    3848:	19 1d       	adc	r17, r9
    384a:	9a 01       	movw	r18, r20
    384c:	ab 01       	movw	r20, r22
    384e:	2a 0d       	add	r18, r10
    3850:	3b 1d       	adc	r19, r11
    3852:	4c 1d       	adc	r20, r12
    3854:	5d 1d       	adc	r21, r13
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	a0 e0       	ldi	r26, 0x00	; 0
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	e6 14       	cp	r14, r6
    3860:	f7 04       	cpc	r15, r7
    3862:	08 05       	cpc	r16, r8
    3864:	19 05       	cpc	r17, r9
    3866:	20 f4       	brcc	.+8      	; 0x3870 <__mulsf3+0xe8>
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a0 e0       	ldi	r26, 0x00	; 0
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	ba 01       	movw	r22, r20
    3872:	a9 01       	movw	r20, r18
    3874:	48 0f       	add	r20, r24
    3876:	59 1f       	adc	r21, r25
    3878:	6a 1f       	adc	r22, r26
    387a:	7b 1f       	adc	r23, r27
    387c:	aa 0c       	add	r10, r10
    387e:	bb 1c       	adc	r11, r11
    3880:	cc 1c       	adc	r12, r12
    3882:	dd 1c       	adc	r13, r13
    3884:	97 fe       	sbrs	r9, 7
    3886:	08 c0       	rjmp	.+16     	; 0x3898 <__mulsf3+0x110>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	a8 2a       	or	r10, r24
    3892:	b9 2a       	or	r11, r25
    3894:	ca 2a       	or	r12, r26
    3896:	db 2a       	or	r13, r27
    3898:	31 96       	adiw	r30, 0x01	; 1
    389a:	e0 32       	cpi	r30, 0x20	; 32
    389c:	f1 05       	cpc	r31, r1
    389e:	49 f0       	breq	.+18     	; 0x38b2 <__mulsf3+0x12a>
    38a0:	66 0c       	add	r6, r6
    38a2:	77 1c       	adc	r7, r7
    38a4:	88 1c       	adc	r8, r8
    38a6:	99 1c       	adc	r9, r9
    38a8:	56 94       	lsr	r5
    38aa:	47 94       	ror	r4
    38ac:	37 94       	ror	r3
    38ae:	27 94       	ror	r2
    38b0:	c3 cf       	rjmp	.-122    	; 0x3838 <__mulsf3+0xb0>
    38b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    38b4:	ea 89       	ldd	r30, Y+18	; 0x12
    38b6:	2b 89       	ldd	r18, Y+19	; 0x13
    38b8:	3c 89       	ldd	r19, Y+20	; 0x14
    38ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    38bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38be:	28 0f       	add	r18, r24
    38c0:	39 1f       	adc	r19, r25
    38c2:	2e 5f       	subi	r18, 0xFE	; 254
    38c4:	3f 4f       	sbci	r19, 0xFF	; 255
    38c6:	17 c0       	rjmp	.+46     	; 0x38f6 <__mulsf3+0x16e>
    38c8:	ca 01       	movw	r24, r20
    38ca:	81 70       	andi	r24, 0x01	; 1
    38cc:	90 70       	andi	r25, 0x00	; 0
    38ce:	89 2b       	or	r24, r25
    38d0:	61 f0       	breq	.+24     	; 0x38ea <__mulsf3+0x162>
    38d2:	16 95       	lsr	r17
    38d4:	07 95       	ror	r16
    38d6:	f7 94       	ror	r15
    38d8:	e7 94       	ror	r14
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 e0       	ldi	r26, 0x00	; 0
    38e0:	b0 e8       	ldi	r27, 0x80	; 128
    38e2:	e8 2a       	or	r14, r24
    38e4:	f9 2a       	or	r15, r25
    38e6:	0a 2b       	or	r16, r26
    38e8:	1b 2b       	or	r17, r27
    38ea:	76 95       	lsr	r23
    38ec:	67 95       	ror	r22
    38ee:	57 95       	ror	r21
    38f0:	47 95       	ror	r20
    38f2:	2f 5f       	subi	r18, 0xFF	; 255
    38f4:	3f 4f       	sbci	r19, 0xFF	; 255
    38f6:	77 fd       	sbrc	r23, 7
    38f8:	e7 cf       	rjmp	.-50     	; 0x38c8 <__mulsf3+0x140>
    38fa:	0c c0       	rjmp	.+24     	; 0x3914 <__mulsf3+0x18c>
    38fc:	44 0f       	add	r20, r20
    38fe:	55 1f       	adc	r21, r21
    3900:	66 1f       	adc	r22, r22
    3902:	77 1f       	adc	r23, r23
    3904:	17 fd       	sbrc	r17, 7
    3906:	41 60       	ori	r20, 0x01	; 1
    3908:	ee 0c       	add	r14, r14
    390a:	ff 1c       	adc	r15, r15
    390c:	00 1f       	adc	r16, r16
    390e:	11 1f       	adc	r17, r17
    3910:	21 50       	subi	r18, 0x01	; 1
    3912:	30 40       	sbci	r19, 0x00	; 0
    3914:	40 30       	cpi	r20, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	59 07       	cpc	r21, r25
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	69 07       	cpc	r22, r25
    391e:	90 e4       	ldi	r25, 0x40	; 64
    3920:	79 07       	cpc	r23, r25
    3922:	60 f3       	brcs	.-40     	; 0x38fc <__mulsf3+0x174>
    3924:	2b 8f       	std	Y+27, r18	; 0x1b
    3926:	3c 8f       	std	Y+28, r19	; 0x1c
    3928:	db 01       	movw	r26, r22
    392a:	ca 01       	movw	r24, r20
    392c:	8f 77       	andi	r24, 0x7F	; 127
    392e:	90 70       	andi	r25, 0x00	; 0
    3930:	a0 70       	andi	r26, 0x00	; 0
    3932:	b0 70       	andi	r27, 0x00	; 0
    3934:	80 34       	cpi	r24, 0x40	; 64
    3936:	91 05       	cpc	r25, r1
    3938:	a1 05       	cpc	r26, r1
    393a:	b1 05       	cpc	r27, r1
    393c:	61 f4       	brne	.+24     	; 0x3956 <__mulsf3+0x1ce>
    393e:	47 fd       	sbrc	r20, 7
    3940:	0a c0       	rjmp	.+20     	; 0x3956 <__mulsf3+0x1ce>
    3942:	e1 14       	cp	r14, r1
    3944:	f1 04       	cpc	r15, r1
    3946:	01 05       	cpc	r16, r1
    3948:	11 05       	cpc	r17, r1
    394a:	29 f0       	breq	.+10     	; 0x3956 <__mulsf3+0x1ce>
    394c:	40 5c       	subi	r20, 0xC0	; 192
    394e:	5f 4f       	sbci	r21, 0xFF	; 255
    3950:	6f 4f       	sbci	r22, 0xFF	; 255
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	40 78       	andi	r20, 0x80	; 128
    3956:	1a 8e       	std	Y+26, r1	; 0x1a
    3958:	fe 17       	cp	r31, r30
    395a:	11 f0       	breq	.+4      	; 0x3960 <__mulsf3+0x1d8>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	8a 8f       	std	Y+26, r24	; 0x1a
    3960:	4d 8f       	std	Y+29, r20	; 0x1d
    3962:	5e 8f       	std	Y+30, r21	; 0x1e
    3964:	6f 8f       	std	Y+31, r22	; 0x1f
    3966:	78 a3       	std	Y+32, r23	; 0x20
    3968:	83 e0       	ldi	r24, 0x03	; 3
    396a:	89 8f       	std	Y+25, r24	; 0x19
    396c:	ce 01       	movw	r24, r28
    396e:	49 96       	adiw	r24, 0x19	; 25
    3970:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__pack_f>
    3974:	a0 96       	adiw	r28, 0x20	; 32
    3976:	e2 e1       	ldi	r30, 0x12	; 18
    3978:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__epilogue_restores__>

0000397c <__gtsf2>:
    397c:	a8 e1       	ldi	r26, 0x18	; 24
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e4 ec       	ldi	r30, 0xC4	; 196
    3982:	fc e1       	ldi	r31, 0x1C	; 28
    3984:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__prologue_saves__+0x18>
    3988:	69 83       	std	Y+1, r22	; 0x01
    398a:	7a 83       	std	Y+2, r23	; 0x02
    398c:	8b 83       	std	Y+3, r24	; 0x03
    398e:	9c 83       	std	Y+4, r25	; 0x04
    3990:	2d 83       	std	Y+5, r18	; 0x05
    3992:	3e 83       	std	Y+6, r19	; 0x06
    3994:	4f 83       	std	Y+7, r20	; 0x07
    3996:	58 87       	std	Y+8, r21	; 0x08
    3998:	89 e0       	ldi	r24, 0x09	; 9
    399a:	e8 2e       	mov	r14, r24
    399c:	f1 2c       	mov	r15, r1
    399e:	ec 0e       	add	r14, r28
    39a0:	fd 1e       	adc	r15, r29
    39a2:	ce 01       	movw	r24, r28
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	b7 01       	movw	r22, r14
    39a8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    39ac:	8e 01       	movw	r16, r28
    39ae:	0f 5e       	subi	r16, 0xEF	; 239
    39b0:	1f 4f       	sbci	r17, 0xFF	; 255
    39b2:	ce 01       	movw	r24, r28
    39b4:	05 96       	adiw	r24, 0x05	; 5
    39b6:	b8 01       	movw	r22, r16
    39b8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    39bc:	89 85       	ldd	r24, Y+9	; 0x09
    39be:	82 30       	cpi	r24, 0x02	; 2
    39c0:	40 f0       	brcs	.+16     	; 0x39d2 <__gtsf2+0x56>
    39c2:	89 89       	ldd	r24, Y+17	; 0x11
    39c4:	82 30       	cpi	r24, 0x02	; 2
    39c6:	28 f0       	brcs	.+10     	; 0x39d2 <__gtsf2+0x56>
    39c8:	c7 01       	movw	r24, r14
    39ca:	b8 01       	movw	r22, r16
    39cc:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fpcmp_parts_f>
    39d0:	01 c0       	rjmp	.+2      	; 0x39d4 <__gtsf2+0x58>
    39d2:	8f ef       	ldi	r24, 0xFF	; 255
    39d4:	68 96       	adiw	r28, 0x18	; 24
    39d6:	e6 e0       	ldi	r30, 0x06	; 6
    39d8:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__epilogue_restores__+0x18>

000039dc <__gesf2>:
    39dc:	a8 e1       	ldi	r26, 0x18	; 24
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	e4 ef       	ldi	r30, 0xF4	; 244
    39e2:	fc e1       	ldi	r31, 0x1C	; 28
    39e4:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__prologue_saves__+0x18>
    39e8:	69 83       	std	Y+1, r22	; 0x01
    39ea:	7a 83       	std	Y+2, r23	; 0x02
    39ec:	8b 83       	std	Y+3, r24	; 0x03
    39ee:	9c 83       	std	Y+4, r25	; 0x04
    39f0:	2d 83       	std	Y+5, r18	; 0x05
    39f2:	3e 83       	std	Y+6, r19	; 0x06
    39f4:	4f 83       	std	Y+7, r20	; 0x07
    39f6:	58 87       	std	Y+8, r21	; 0x08
    39f8:	89 e0       	ldi	r24, 0x09	; 9
    39fa:	e8 2e       	mov	r14, r24
    39fc:	f1 2c       	mov	r15, r1
    39fe:	ec 0e       	add	r14, r28
    3a00:	fd 1e       	adc	r15, r29
    3a02:	ce 01       	movw	r24, r28
    3a04:	01 96       	adiw	r24, 0x01	; 1
    3a06:	b7 01       	movw	r22, r14
    3a08:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    3a0c:	8e 01       	movw	r16, r28
    3a0e:	0f 5e       	subi	r16, 0xEF	; 239
    3a10:	1f 4f       	sbci	r17, 0xFF	; 255
    3a12:	ce 01       	movw	r24, r28
    3a14:	05 96       	adiw	r24, 0x05	; 5
    3a16:	b8 01       	movw	r22, r16
    3a18:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	82 30       	cpi	r24, 0x02	; 2
    3a20:	40 f0       	brcs	.+16     	; 0x3a32 <__gesf2+0x56>
    3a22:	89 89       	ldd	r24, Y+17	; 0x11
    3a24:	82 30       	cpi	r24, 0x02	; 2
    3a26:	28 f0       	brcs	.+10     	; 0x3a32 <__gesf2+0x56>
    3a28:	c7 01       	movw	r24, r14
    3a2a:	b8 01       	movw	r22, r16
    3a2c:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fpcmp_parts_f>
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <__gesf2+0x58>
    3a32:	8f ef       	ldi	r24, 0xFF	; 255
    3a34:	68 96       	adiw	r28, 0x18	; 24
    3a36:	e6 e0       	ldi	r30, 0x06	; 6
    3a38:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__epilogue_restores__+0x18>

00003a3c <__ltsf2>:
    3a3c:	a8 e1       	ldi	r26, 0x18	; 24
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e4 e2       	ldi	r30, 0x24	; 36
    3a42:	fd e1       	ldi	r31, 0x1D	; 29
    3a44:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__prologue_saves__+0x18>
    3a48:	69 83       	std	Y+1, r22	; 0x01
    3a4a:	7a 83       	std	Y+2, r23	; 0x02
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
    3a4e:	9c 83       	std	Y+4, r25	; 0x04
    3a50:	2d 83       	std	Y+5, r18	; 0x05
    3a52:	3e 83       	std	Y+6, r19	; 0x06
    3a54:	4f 83       	std	Y+7, r20	; 0x07
    3a56:	58 87       	std	Y+8, r21	; 0x08
    3a58:	89 e0       	ldi	r24, 0x09	; 9
    3a5a:	e8 2e       	mov	r14, r24
    3a5c:	f1 2c       	mov	r15, r1
    3a5e:	ec 0e       	add	r14, r28
    3a60:	fd 1e       	adc	r15, r29
    3a62:	ce 01       	movw	r24, r28
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	b7 01       	movw	r22, r14
    3a68:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	0f 5e       	subi	r16, 0xEF	; 239
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	ce 01       	movw	r24, r28
    3a74:	05 96       	adiw	r24, 0x05	; 5
    3a76:	b8 01       	movw	r22, r16
    3a78:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	82 30       	cpi	r24, 0x02	; 2
    3a80:	40 f0       	brcs	.+16     	; 0x3a92 <__ltsf2+0x56>
    3a82:	89 89       	ldd	r24, Y+17	; 0x11
    3a84:	82 30       	cpi	r24, 0x02	; 2
    3a86:	28 f0       	brcs	.+10     	; 0x3a92 <__ltsf2+0x56>
    3a88:	c7 01       	movw	r24, r14
    3a8a:	b8 01       	movw	r22, r16
    3a8c:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <__fpcmp_parts_f>
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <__ltsf2+0x58>
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	68 96       	adiw	r28, 0x18	; 24
    3a96:	e6 e0       	ldi	r30, 0x06	; 6
    3a98:	0c 94 5f 20 	jmp	0x40be	; 0x40be <__epilogue_restores__+0x18>

00003a9c <__fixsfsi>:
    3a9c:	ac e0       	ldi	r26, 0x0C	; 12
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	e4 e5       	ldi	r30, 0x54	; 84
    3aa2:	fd e1       	ldi	r31, 0x1D	; 29
    3aa4:	0c 94 47 20 	jmp	0x408e	; 0x408e <__prologue_saves__+0x20>
    3aa8:	69 83       	std	Y+1, r22	; 0x01
    3aaa:	7a 83       	std	Y+2, r23	; 0x02
    3aac:	8b 83       	std	Y+3, r24	; 0x03
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	be 01       	movw	r22, r28
    3ab6:	6b 5f       	subi	r22, 0xFB	; 251
    3ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aba:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__unpack_f>
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	82 30       	cpi	r24, 0x02	; 2
    3ac2:	61 f1       	breq	.+88     	; 0x3b1c <__fixsfsi+0x80>
    3ac4:	82 30       	cpi	r24, 0x02	; 2
    3ac6:	50 f1       	brcs	.+84     	; 0x3b1c <__fixsfsi+0x80>
    3ac8:	84 30       	cpi	r24, 0x04	; 4
    3aca:	21 f4       	brne	.+8      	; 0x3ad4 <__fixsfsi+0x38>
    3acc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ace:	88 23       	and	r24, r24
    3ad0:	51 f1       	breq	.+84     	; 0x3b26 <__fixsfsi+0x8a>
    3ad2:	2e c0       	rjmp	.+92     	; 0x3b30 <__fixsfsi+0x94>
    3ad4:	2f 81       	ldd	r18, Y+7	; 0x07
    3ad6:	38 85       	ldd	r19, Y+8	; 0x08
    3ad8:	37 fd       	sbrc	r19, 7
    3ada:	20 c0       	rjmp	.+64     	; 0x3b1c <__fixsfsi+0x80>
    3adc:	6e 81       	ldd	r22, Y+6	; 0x06
    3ade:	2f 31       	cpi	r18, 0x1F	; 31
    3ae0:	31 05       	cpc	r19, r1
    3ae2:	1c f0       	brlt	.+6      	; 0x3aea <__fixsfsi+0x4e>
    3ae4:	66 23       	and	r22, r22
    3ae6:	f9 f0       	breq	.+62     	; 0x3b26 <__fixsfsi+0x8a>
    3ae8:	23 c0       	rjmp	.+70     	; 0x3b30 <__fixsfsi+0x94>
    3aea:	8e e1       	ldi	r24, 0x1E	; 30
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	82 1b       	sub	r24, r18
    3af0:	93 0b       	sbc	r25, r19
    3af2:	29 85       	ldd	r18, Y+9	; 0x09
    3af4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3af6:	4b 85       	ldd	r20, Y+11	; 0x0b
    3af8:	5c 85       	ldd	r21, Y+12	; 0x0c
    3afa:	04 c0       	rjmp	.+8      	; 0x3b04 <__fixsfsi+0x68>
    3afc:	56 95       	lsr	r21
    3afe:	47 95       	ror	r20
    3b00:	37 95       	ror	r19
    3b02:	27 95       	ror	r18
    3b04:	8a 95       	dec	r24
    3b06:	d2 f7       	brpl	.-12     	; 0x3afc <__fixsfsi+0x60>
    3b08:	66 23       	and	r22, r22
    3b0a:	b1 f0       	breq	.+44     	; 0x3b38 <__fixsfsi+0x9c>
    3b0c:	50 95       	com	r21
    3b0e:	40 95       	com	r20
    3b10:	30 95       	com	r19
    3b12:	21 95       	neg	r18
    3b14:	3f 4f       	sbci	r19, 0xFF	; 255
    3b16:	4f 4f       	sbci	r20, 0xFF	; 255
    3b18:	5f 4f       	sbci	r21, 0xFF	; 255
    3b1a:	0e c0       	rjmp	.+28     	; 0x3b38 <__fixsfsi+0x9c>
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e0       	ldi	r20, 0x00	; 0
    3b22:	50 e0       	ldi	r21, 0x00	; 0
    3b24:	09 c0       	rjmp	.+18     	; 0x3b38 <__fixsfsi+0x9c>
    3b26:	2f ef       	ldi	r18, 0xFF	; 255
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f ef       	ldi	r20, 0xFF	; 255
    3b2c:	5f e7       	ldi	r21, 0x7F	; 127
    3b2e:	04 c0       	rjmp	.+8      	; 0x3b38 <__fixsfsi+0x9c>
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	50 e8       	ldi	r21, 0x80	; 128
    3b38:	b9 01       	movw	r22, r18
    3b3a:	ca 01       	movw	r24, r20
    3b3c:	2c 96       	adiw	r28, 0x0c	; 12
    3b3e:	e2 e0       	ldi	r30, 0x02	; 2
    3b40:	0c 94 63 20 	jmp	0x40c6	; 0x40c6 <__epilogue_restores__+0x20>

00003b44 <__floatunsisf>:
    3b44:	a8 e0       	ldi	r26, 0x08	; 8
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	e8 ea       	ldi	r30, 0xA8	; 168
    3b4a:	fd e1       	ldi	r31, 0x1D	; 29
    3b4c:	0c 94 3f 20 	jmp	0x407e	; 0x407e <__prologue_saves__+0x10>
    3b50:	7b 01       	movw	r14, r22
    3b52:	8c 01       	movw	r16, r24
    3b54:	61 15       	cp	r22, r1
    3b56:	71 05       	cpc	r23, r1
    3b58:	81 05       	cpc	r24, r1
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	19 f4       	brne	.+6      	; 0x3b64 <__floatunsisf+0x20>
    3b5e:	82 e0       	ldi	r24, 0x02	; 2
    3b60:	89 83       	std	Y+1, r24	; 0x01
    3b62:	60 c0       	rjmp	.+192    	; 0x3c24 <__floatunsisf+0xe0>
    3b64:	83 e0       	ldi	r24, 0x03	; 3
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	8e e1       	ldi	r24, 0x1E	; 30
    3b6a:	c8 2e       	mov	r12, r24
    3b6c:	d1 2c       	mov	r13, r1
    3b6e:	dc 82       	std	Y+4, r13	; 0x04
    3b70:	cb 82       	std	Y+3, r12	; 0x03
    3b72:	ed 82       	std	Y+5, r14	; 0x05
    3b74:	fe 82       	std	Y+6, r15	; 0x06
    3b76:	0f 83       	std	Y+7, r16	; 0x07
    3b78:	18 87       	std	Y+8, r17	; 0x08
    3b7a:	c8 01       	movw	r24, r16
    3b7c:	b7 01       	movw	r22, r14
    3b7e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__clzsi2>
    3b82:	fc 01       	movw	r30, r24
    3b84:	31 97       	sbiw	r30, 0x01	; 1
    3b86:	f7 ff       	sbrs	r31, 7
    3b88:	3b c0       	rjmp	.+118    	; 0x3c00 <__floatunsisf+0xbc>
    3b8a:	22 27       	eor	r18, r18
    3b8c:	33 27       	eor	r19, r19
    3b8e:	2e 1b       	sub	r18, r30
    3b90:	3f 0b       	sbc	r19, r31
    3b92:	57 01       	movw	r10, r14
    3b94:	68 01       	movw	r12, r16
    3b96:	02 2e       	mov	r0, r18
    3b98:	04 c0       	rjmp	.+8      	; 0x3ba2 <__floatunsisf+0x5e>
    3b9a:	d6 94       	lsr	r13
    3b9c:	c7 94       	ror	r12
    3b9e:	b7 94       	ror	r11
    3ba0:	a7 94       	ror	r10
    3ba2:	0a 94       	dec	r0
    3ba4:	d2 f7       	brpl	.-12     	; 0x3b9a <__floatunsisf+0x56>
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	a0 e0       	ldi	r26, 0x00	; 0
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	04 c0       	rjmp	.+8      	; 0x3bc0 <__floatunsisf+0x7c>
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	aa 1f       	adc	r26, r26
    3bbe:	bb 1f       	adc	r27, r27
    3bc0:	2a 95       	dec	r18
    3bc2:	d2 f7       	brpl	.-12     	; 0x3bb8 <__floatunsisf+0x74>
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	a1 09       	sbc	r26, r1
    3bc8:	b1 09       	sbc	r27, r1
    3bca:	8e 21       	and	r24, r14
    3bcc:	9f 21       	and	r25, r15
    3bce:	a0 23       	and	r26, r16
    3bd0:	b1 23       	and	r27, r17
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	a1 05       	cpc	r26, r1
    3bd6:	b1 05       	cpc	r27, r1
    3bd8:	21 f0       	breq	.+8      	; 0x3be2 <__floatunsisf+0x9e>
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	4a 29       	or	r20, r10
    3be4:	5b 29       	or	r21, r11
    3be6:	6c 29       	or	r22, r12
    3be8:	7d 29       	or	r23, r13
    3bea:	4d 83       	std	Y+5, r20	; 0x05
    3bec:	5e 83       	std	Y+6, r21	; 0x06
    3bee:	6f 83       	std	Y+7, r22	; 0x07
    3bf0:	78 87       	std	Y+8, r23	; 0x08
    3bf2:	8e e1       	ldi	r24, 0x1E	; 30
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	8e 1b       	sub	r24, r30
    3bf8:	9f 0b       	sbc	r25, r31
    3bfa:	9c 83       	std	Y+4, r25	; 0x04
    3bfc:	8b 83       	std	Y+3, r24	; 0x03
    3bfe:	12 c0       	rjmp	.+36     	; 0x3c24 <__floatunsisf+0xe0>
    3c00:	30 97       	sbiw	r30, 0x00	; 0
    3c02:	81 f0       	breq	.+32     	; 0x3c24 <__floatunsisf+0xe0>
    3c04:	0e 2e       	mov	r0, r30
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <__floatunsisf+0xcc>
    3c08:	ee 0c       	add	r14, r14
    3c0a:	ff 1c       	adc	r15, r15
    3c0c:	00 1f       	adc	r16, r16
    3c0e:	11 1f       	adc	r17, r17
    3c10:	0a 94       	dec	r0
    3c12:	d2 f7       	brpl	.-12     	; 0x3c08 <__floatunsisf+0xc4>
    3c14:	ed 82       	std	Y+5, r14	; 0x05
    3c16:	fe 82       	std	Y+6, r15	; 0x06
    3c18:	0f 83       	std	Y+7, r16	; 0x07
    3c1a:	18 87       	std	Y+8, r17	; 0x08
    3c1c:	ce 1a       	sub	r12, r30
    3c1e:	df 0a       	sbc	r13, r31
    3c20:	dc 82       	std	Y+4, r13	; 0x04
    3c22:	cb 82       	std	Y+3, r12	; 0x03
    3c24:	1a 82       	std	Y+2, r1	; 0x02
    3c26:	ce 01       	movw	r24, r28
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__pack_f>
    3c2e:	28 96       	adiw	r28, 0x08	; 8
    3c30:	ea e0       	ldi	r30, 0x0A	; 10
    3c32:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__epilogue_restores__+0x10>

00003c36 <__clzsi2>:
    3c36:	ef 92       	push	r14
    3c38:	ff 92       	push	r15
    3c3a:	0f 93       	push	r16
    3c3c:	1f 93       	push	r17
    3c3e:	7b 01       	movw	r14, r22
    3c40:	8c 01       	movw	r16, r24
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	e8 16       	cp	r14, r24
    3c46:	80 e0       	ldi	r24, 0x00	; 0
    3c48:	f8 06       	cpc	r15, r24
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	08 07       	cpc	r16, r24
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	18 07       	cpc	r17, r24
    3c52:	88 f4       	brcc	.+34     	; 0x3c76 <__clzsi2+0x40>
    3c54:	8f ef       	ldi	r24, 0xFF	; 255
    3c56:	e8 16       	cp	r14, r24
    3c58:	f1 04       	cpc	r15, r1
    3c5a:	01 05       	cpc	r16, r1
    3c5c:	11 05       	cpc	r17, r1
    3c5e:	31 f0       	breq	.+12     	; 0x3c6c <__clzsi2+0x36>
    3c60:	28 f0       	brcs	.+10     	; 0x3c6c <__clzsi2+0x36>
    3c62:	88 e0       	ldi	r24, 0x08	; 8
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	a0 e0       	ldi	r26, 0x00	; 0
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	17 c0       	rjmp	.+46     	; 0x3c9a <__clzsi2+0x64>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	a0 e0       	ldi	r26, 0x00	; 0
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	12 c0       	rjmp	.+36     	; 0x3c9a <__clzsi2+0x64>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	e8 16       	cp	r14, r24
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	f8 06       	cpc	r15, r24
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	08 07       	cpc	r16, r24
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	18 07       	cpc	r17, r24
    3c86:	28 f0       	brcs	.+10     	; 0x3c92 <__clzsi2+0x5c>
    3c88:	88 e1       	ldi	r24, 0x18	; 24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 e0       	ldi	r26, 0x00	; 0
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	04 c0       	rjmp	.+8      	; 0x3c9a <__clzsi2+0x64>
    3c92:	80 e1       	ldi	r24, 0x10	; 16
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	a0 e0       	ldi	r26, 0x00	; 0
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	20 e2       	ldi	r18, 0x20	; 32
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e0       	ldi	r20, 0x00	; 0
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	28 1b       	sub	r18, r24
    3ca4:	39 0b       	sbc	r19, r25
    3ca6:	4a 0b       	sbc	r20, r26
    3ca8:	5b 0b       	sbc	r21, r27
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <__clzsi2+0x7e>
    3cac:	16 95       	lsr	r17
    3cae:	07 95       	ror	r16
    3cb0:	f7 94       	ror	r15
    3cb2:	e7 94       	ror	r14
    3cb4:	8a 95       	dec	r24
    3cb6:	d2 f7       	brpl	.-12     	; 0x3cac <__clzsi2+0x76>
    3cb8:	f7 01       	movw	r30, r14
    3cba:	e8 5f       	subi	r30, 0xF8	; 248
    3cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cbe:	80 81       	ld	r24, Z
    3cc0:	28 1b       	sub	r18, r24
    3cc2:	31 09       	sbc	r19, r1
    3cc4:	41 09       	sbc	r20, r1
    3cc6:	51 09       	sbc	r21, r1
    3cc8:	c9 01       	movw	r24, r18
    3cca:	1f 91       	pop	r17
    3ccc:	0f 91       	pop	r16
    3cce:	ff 90       	pop	r15
    3cd0:	ef 90       	pop	r14
    3cd2:	08 95       	ret

00003cd4 <__pack_f>:
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	fc 01       	movw	r30, r24
    3ce0:	e4 80       	ldd	r14, Z+4	; 0x04
    3ce2:	f5 80       	ldd	r15, Z+5	; 0x05
    3ce4:	06 81       	ldd	r16, Z+6	; 0x06
    3ce6:	17 81       	ldd	r17, Z+7	; 0x07
    3ce8:	d1 80       	ldd	r13, Z+1	; 0x01
    3cea:	80 81       	ld	r24, Z
    3cec:	82 30       	cpi	r24, 0x02	; 2
    3cee:	48 f4       	brcc	.+18     	; 0x3d02 <__pack_f+0x2e>
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	a0 e1       	ldi	r26, 0x10	; 16
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e8 2a       	or	r14, r24
    3cfa:	f9 2a       	or	r15, r25
    3cfc:	0a 2b       	or	r16, r26
    3cfe:	1b 2b       	or	r17, r27
    3d00:	a5 c0       	rjmp	.+330    	; 0x3e4c <__pack_f+0x178>
    3d02:	84 30       	cpi	r24, 0x04	; 4
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <__pack_f+0x34>
    3d06:	9f c0       	rjmp	.+318    	; 0x3e46 <__pack_f+0x172>
    3d08:	82 30       	cpi	r24, 0x02	; 2
    3d0a:	21 f4       	brne	.+8      	; 0x3d14 <__pack_f+0x40>
    3d0c:	ee 24       	eor	r14, r14
    3d0e:	ff 24       	eor	r15, r15
    3d10:	87 01       	movw	r16, r14
    3d12:	05 c0       	rjmp	.+10     	; 0x3d1e <__pack_f+0x4a>
    3d14:	e1 14       	cp	r14, r1
    3d16:	f1 04       	cpc	r15, r1
    3d18:	01 05       	cpc	r16, r1
    3d1a:	11 05       	cpc	r17, r1
    3d1c:	19 f4       	brne	.+6      	; 0x3d24 <__pack_f+0x50>
    3d1e:	e0 e0       	ldi	r30, 0x00	; 0
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	96 c0       	rjmp	.+300    	; 0x3e50 <__pack_f+0x17c>
    3d24:	62 81       	ldd	r22, Z+2	; 0x02
    3d26:	73 81       	ldd	r23, Z+3	; 0x03
    3d28:	9f ef       	ldi	r25, 0xFF	; 255
    3d2a:	62 38       	cpi	r22, 0x82	; 130
    3d2c:	79 07       	cpc	r23, r25
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <__pack_f+0x5e>
    3d30:	5b c0       	rjmp	.+182    	; 0x3de8 <__pack_f+0x114>
    3d32:	22 e8       	ldi	r18, 0x82	; 130
    3d34:	3f ef       	ldi	r19, 0xFF	; 255
    3d36:	26 1b       	sub	r18, r22
    3d38:	37 0b       	sbc	r19, r23
    3d3a:	2a 31       	cpi	r18, 0x1A	; 26
    3d3c:	31 05       	cpc	r19, r1
    3d3e:	2c f0       	brlt	.+10     	; 0x3d4a <__pack_f+0x76>
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	2a c0       	rjmp	.+84     	; 0x3d9e <__pack_f+0xca>
    3d4a:	b8 01       	movw	r22, r16
    3d4c:	a7 01       	movw	r20, r14
    3d4e:	02 2e       	mov	r0, r18
    3d50:	04 c0       	rjmp	.+8      	; 0x3d5a <__pack_f+0x86>
    3d52:	76 95       	lsr	r23
    3d54:	67 95       	ror	r22
    3d56:	57 95       	ror	r21
    3d58:	47 95       	ror	r20
    3d5a:	0a 94       	dec	r0
    3d5c:	d2 f7       	brpl	.-12     	; 0x3d52 <__pack_f+0x7e>
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	a0 e0       	ldi	r26, 0x00	; 0
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <__pack_f+0x9c>
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	aa 1f       	adc	r26, r26
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	2a 95       	dec	r18
    3d72:	d2 f7       	brpl	.-12     	; 0x3d68 <__pack_f+0x94>
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	a1 09       	sbc	r26, r1
    3d78:	b1 09       	sbc	r27, r1
    3d7a:	8e 21       	and	r24, r14
    3d7c:	9f 21       	and	r25, r15
    3d7e:	a0 23       	and	r26, r16
    3d80:	b1 23       	and	r27, r17
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	a1 05       	cpc	r26, r1
    3d86:	b1 05       	cpc	r27, r1
    3d88:	21 f0       	breq	.+8      	; 0x3d92 <__pack_f+0xbe>
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	a0 e0       	ldi	r26, 0x00	; 0
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	9a 01       	movw	r18, r20
    3d94:	ab 01       	movw	r20, r22
    3d96:	28 2b       	or	r18, r24
    3d98:	39 2b       	or	r19, r25
    3d9a:	4a 2b       	or	r20, r26
    3d9c:	5b 2b       	or	r21, r27
    3d9e:	da 01       	movw	r26, r20
    3da0:	c9 01       	movw	r24, r18
    3da2:	8f 77       	andi	r24, 0x7F	; 127
    3da4:	90 70       	andi	r25, 0x00	; 0
    3da6:	a0 70       	andi	r26, 0x00	; 0
    3da8:	b0 70       	andi	r27, 0x00	; 0
    3daa:	80 34       	cpi	r24, 0x40	; 64
    3dac:	91 05       	cpc	r25, r1
    3dae:	a1 05       	cpc	r26, r1
    3db0:	b1 05       	cpc	r27, r1
    3db2:	39 f4       	brne	.+14     	; 0x3dc2 <__pack_f+0xee>
    3db4:	27 ff       	sbrs	r18, 7
    3db6:	09 c0       	rjmp	.+18     	; 0x3dca <__pack_f+0xf6>
    3db8:	20 5c       	subi	r18, 0xC0	; 192
    3dba:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbc:	4f 4f       	sbci	r20, 0xFF	; 255
    3dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc0:	04 c0       	rjmp	.+8      	; 0x3dca <__pack_f+0xf6>
    3dc2:	21 5c       	subi	r18, 0xC1	; 193
    3dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc6:	4f 4f       	sbci	r20, 0xFF	; 255
    3dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dca:	e0 e0       	ldi	r30, 0x00	; 0
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	20 30       	cpi	r18, 0x00	; 0
    3dd0:	a0 e0       	ldi	r26, 0x00	; 0
    3dd2:	3a 07       	cpc	r19, r26
    3dd4:	a0 e0       	ldi	r26, 0x00	; 0
    3dd6:	4a 07       	cpc	r20, r26
    3dd8:	a0 e4       	ldi	r26, 0x40	; 64
    3dda:	5a 07       	cpc	r21, r26
    3ddc:	10 f0       	brcs	.+4      	; 0x3de2 <__pack_f+0x10e>
    3dde:	e1 e0       	ldi	r30, 0x01	; 1
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	79 01       	movw	r14, r18
    3de4:	8a 01       	movw	r16, r20
    3de6:	27 c0       	rjmp	.+78     	; 0x3e36 <__pack_f+0x162>
    3de8:	60 38       	cpi	r22, 0x80	; 128
    3dea:	71 05       	cpc	r23, r1
    3dec:	64 f5       	brge	.+88     	; 0x3e46 <__pack_f+0x172>
    3dee:	fb 01       	movw	r30, r22
    3df0:	e1 58       	subi	r30, 0x81	; 129
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	d8 01       	movw	r26, r16
    3df6:	c7 01       	movw	r24, r14
    3df8:	8f 77       	andi	r24, 0x7F	; 127
    3dfa:	90 70       	andi	r25, 0x00	; 0
    3dfc:	a0 70       	andi	r26, 0x00	; 0
    3dfe:	b0 70       	andi	r27, 0x00	; 0
    3e00:	80 34       	cpi	r24, 0x40	; 64
    3e02:	91 05       	cpc	r25, r1
    3e04:	a1 05       	cpc	r26, r1
    3e06:	b1 05       	cpc	r27, r1
    3e08:	39 f4       	brne	.+14     	; 0x3e18 <__pack_f+0x144>
    3e0a:	e7 fe       	sbrs	r14, 7
    3e0c:	0d c0       	rjmp	.+26     	; 0x3e28 <__pack_f+0x154>
    3e0e:	80 e4       	ldi	r24, 0x40	; 64
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	a0 e0       	ldi	r26, 0x00	; 0
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	04 c0       	rjmp	.+8      	; 0x3e20 <__pack_f+0x14c>
    3e18:	8f e3       	ldi	r24, 0x3F	; 63
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	a0 e0       	ldi	r26, 0x00	; 0
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	e8 0e       	add	r14, r24
    3e22:	f9 1e       	adc	r15, r25
    3e24:	0a 1f       	adc	r16, r26
    3e26:	1b 1f       	adc	r17, r27
    3e28:	17 ff       	sbrs	r17, 7
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <__pack_f+0x162>
    3e2c:	16 95       	lsr	r17
    3e2e:	07 95       	ror	r16
    3e30:	f7 94       	ror	r15
    3e32:	e7 94       	ror	r14
    3e34:	31 96       	adiw	r30, 0x01	; 1
    3e36:	87 e0       	ldi	r24, 0x07	; 7
    3e38:	16 95       	lsr	r17
    3e3a:	07 95       	ror	r16
    3e3c:	f7 94       	ror	r15
    3e3e:	e7 94       	ror	r14
    3e40:	8a 95       	dec	r24
    3e42:	d1 f7       	brne	.-12     	; 0x3e38 <__pack_f+0x164>
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <__pack_f+0x17c>
    3e46:	ee 24       	eor	r14, r14
    3e48:	ff 24       	eor	r15, r15
    3e4a:	87 01       	movw	r16, r14
    3e4c:	ef ef       	ldi	r30, 0xFF	; 255
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	6e 2f       	mov	r22, r30
    3e52:	67 95       	ror	r22
    3e54:	66 27       	eor	r22, r22
    3e56:	67 95       	ror	r22
    3e58:	90 2f       	mov	r25, r16
    3e5a:	9f 77       	andi	r25, 0x7F	; 127
    3e5c:	d7 94       	ror	r13
    3e5e:	dd 24       	eor	r13, r13
    3e60:	d7 94       	ror	r13
    3e62:	8e 2f       	mov	r24, r30
    3e64:	86 95       	lsr	r24
    3e66:	49 2f       	mov	r20, r25
    3e68:	46 2b       	or	r20, r22
    3e6a:	58 2f       	mov	r21, r24
    3e6c:	5d 29       	or	r21, r13
    3e6e:	b7 01       	movw	r22, r14
    3e70:	ca 01       	movw	r24, r20
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	ff 90       	pop	r15
    3e78:	ef 90       	pop	r14
    3e7a:	df 90       	pop	r13
    3e7c:	08 95       	ret

00003e7e <__unpack_f>:
    3e7e:	fc 01       	movw	r30, r24
    3e80:	db 01       	movw	r26, r22
    3e82:	40 81       	ld	r20, Z
    3e84:	51 81       	ldd	r21, Z+1	; 0x01
    3e86:	22 81       	ldd	r18, Z+2	; 0x02
    3e88:	62 2f       	mov	r22, r18
    3e8a:	6f 77       	andi	r22, 0x7F	; 127
    3e8c:	70 e0       	ldi	r23, 0x00	; 0
    3e8e:	22 1f       	adc	r18, r18
    3e90:	22 27       	eor	r18, r18
    3e92:	22 1f       	adc	r18, r18
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	89 2f       	mov	r24, r25
    3e98:	88 0f       	add	r24, r24
    3e9a:	82 2b       	or	r24, r18
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	99 27       	eor	r25, r25
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	11 96       	adiw	r26, 0x01	; 1
    3ea8:	9c 93       	st	X, r25
    3eaa:	11 97       	sbiw	r26, 0x01	; 1
    3eac:	21 15       	cp	r18, r1
    3eae:	31 05       	cpc	r19, r1
    3eb0:	a9 f5       	brne	.+106    	; 0x3f1c <__unpack_f+0x9e>
    3eb2:	41 15       	cp	r20, r1
    3eb4:	51 05       	cpc	r21, r1
    3eb6:	61 05       	cpc	r22, r1
    3eb8:	71 05       	cpc	r23, r1
    3eba:	11 f4       	brne	.+4      	; 0x3ec0 <__unpack_f+0x42>
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	37 c0       	rjmp	.+110    	; 0x3f2e <__unpack_f+0xb0>
    3ec0:	82 e8       	ldi	r24, 0x82	; 130
    3ec2:	9f ef       	ldi	r25, 0xFF	; 255
    3ec4:	13 96       	adiw	r26, 0x03	; 3
    3ec6:	9c 93       	st	X, r25
    3ec8:	8e 93       	st	-X, r24
    3eca:	12 97       	sbiw	r26, 0x02	; 2
    3ecc:	9a 01       	movw	r18, r20
    3ece:	ab 01       	movw	r20, r22
    3ed0:	67 e0       	ldi	r22, 0x07	; 7
    3ed2:	22 0f       	add	r18, r18
    3ed4:	33 1f       	adc	r19, r19
    3ed6:	44 1f       	adc	r20, r20
    3ed8:	55 1f       	adc	r21, r21
    3eda:	6a 95       	dec	r22
    3edc:	d1 f7       	brne	.-12     	; 0x3ed2 <__unpack_f+0x54>
    3ede:	83 e0       	ldi	r24, 0x03	; 3
    3ee0:	8c 93       	st	X, r24
    3ee2:	0d c0       	rjmp	.+26     	; 0x3efe <__unpack_f+0x80>
    3ee4:	22 0f       	add	r18, r18
    3ee6:	33 1f       	adc	r19, r19
    3ee8:	44 1f       	adc	r20, r20
    3eea:	55 1f       	adc	r21, r21
    3eec:	12 96       	adiw	r26, 0x02	; 2
    3eee:	8d 91       	ld	r24, X+
    3ef0:	9c 91       	ld	r25, X
    3ef2:	13 97       	sbiw	r26, 0x03	; 3
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	13 96       	adiw	r26, 0x03	; 3
    3ef8:	9c 93       	st	X, r25
    3efa:	8e 93       	st	-X, r24
    3efc:	12 97       	sbiw	r26, 0x02	; 2
    3efe:	20 30       	cpi	r18, 0x00	; 0
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	38 07       	cpc	r19, r24
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	48 07       	cpc	r20, r24
    3f08:	80 e4       	ldi	r24, 0x40	; 64
    3f0a:	58 07       	cpc	r21, r24
    3f0c:	58 f3       	brcs	.-42     	; 0x3ee4 <__unpack_f+0x66>
    3f0e:	14 96       	adiw	r26, 0x04	; 4
    3f10:	2d 93       	st	X+, r18
    3f12:	3d 93       	st	X+, r19
    3f14:	4d 93       	st	X+, r20
    3f16:	5c 93       	st	X, r21
    3f18:	17 97       	sbiw	r26, 0x07	; 7
    3f1a:	08 95       	ret
    3f1c:	2f 3f       	cpi	r18, 0xFF	; 255
    3f1e:	31 05       	cpc	r19, r1
    3f20:	79 f4       	brne	.+30     	; 0x3f40 <__unpack_f+0xc2>
    3f22:	41 15       	cp	r20, r1
    3f24:	51 05       	cpc	r21, r1
    3f26:	61 05       	cpc	r22, r1
    3f28:	71 05       	cpc	r23, r1
    3f2a:	19 f4       	brne	.+6      	; 0x3f32 <__unpack_f+0xb4>
    3f2c:	84 e0       	ldi	r24, 0x04	; 4
    3f2e:	8c 93       	st	X, r24
    3f30:	08 95       	ret
    3f32:	64 ff       	sbrs	r22, 4
    3f34:	03 c0       	rjmp	.+6      	; 0x3f3c <__unpack_f+0xbe>
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	8c 93       	st	X, r24
    3f3a:	12 c0       	rjmp	.+36     	; 0x3f60 <__unpack_f+0xe2>
    3f3c:	1c 92       	st	X, r1
    3f3e:	10 c0       	rjmp	.+32     	; 0x3f60 <__unpack_f+0xe2>
    3f40:	2f 57       	subi	r18, 0x7F	; 127
    3f42:	30 40       	sbci	r19, 0x00	; 0
    3f44:	13 96       	adiw	r26, 0x03	; 3
    3f46:	3c 93       	st	X, r19
    3f48:	2e 93       	st	-X, r18
    3f4a:	12 97       	sbiw	r26, 0x02	; 2
    3f4c:	83 e0       	ldi	r24, 0x03	; 3
    3f4e:	8c 93       	st	X, r24
    3f50:	87 e0       	ldi	r24, 0x07	; 7
    3f52:	44 0f       	add	r20, r20
    3f54:	55 1f       	adc	r21, r21
    3f56:	66 1f       	adc	r22, r22
    3f58:	77 1f       	adc	r23, r23
    3f5a:	8a 95       	dec	r24
    3f5c:	d1 f7       	brne	.-12     	; 0x3f52 <__unpack_f+0xd4>
    3f5e:	70 64       	ori	r23, 0x40	; 64
    3f60:	14 96       	adiw	r26, 0x04	; 4
    3f62:	4d 93       	st	X+, r20
    3f64:	5d 93       	st	X+, r21
    3f66:	6d 93       	st	X+, r22
    3f68:	7c 93       	st	X, r23
    3f6a:	17 97       	sbiw	r26, 0x07	; 7
    3f6c:	08 95       	ret

00003f6e <__fpcmp_parts_f>:
    3f6e:	1f 93       	push	r17
    3f70:	dc 01       	movw	r26, r24
    3f72:	fb 01       	movw	r30, r22
    3f74:	9c 91       	ld	r25, X
    3f76:	92 30       	cpi	r25, 0x02	; 2
    3f78:	08 f4       	brcc	.+2      	; 0x3f7c <__fpcmp_parts_f+0xe>
    3f7a:	47 c0       	rjmp	.+142    	; 0x400a <__fpcmp_parts_f+0x9c>
    3f7c:	80 81       	ld	r24, Z
    3f7e:	82 30       	cpi	r24, 0x02	; 2
    3f80:	08 f4       	brcc	.+2      	; 0x3f84 <__fpcmp_parts_f+0x16>
    3f82:	43 c0       	rjmp	.+134    	; 0x400a <__fpcmp_parts_f+0x9c>
    3f84:	94 30       	cpi	r25, 0x04	; 4
    3f86:	51 f4       	brne	.+20     	; 0x3f9c <__fpcmp_parts_f+0x2e>
    3f88:	11 96       	adiw	r26, 0x01	; 1
    3f8a:	1c 91       	ld	r17, X
    3f8c:	84 30       	cpi	r24, 0x04	; 4
    3f8e:	99 f5       	brne	.+102    	; 0x3ff6 <__fpcmp_parts_f+0x88>
    3f90:	81 81       	ldd	r24, Z+1	; 0x01
    3f92:	68 2f       	mov	r22, r24
    3f94:	70 e0       	ldi	r23, 0x00	; 0
    3f96:	61 1b       	sub	r22, r17
    3f98:	71 09       	sbc	r23, r1
    3f9a:	3f c0       	rjmp	.+126    	; 0x401a <__fpcmp_parts_f+0xac>
    3f9c:	84 30       	cpi	r24, 0x04	; 4
    3f9e:	21 f0       	breq	.+8      	; 0x3fa8 <__fpcmp_parts_f+0x3a>
    3fa0:	92 30       	cpi	r25, 0x02	; 2
    3fa2:	31 f4       	brne	.+12     	; 0x3fb0 <__fpcmp_parts_f+0x42>
    3fa4:	82 30       	cpi	r24, 0x02	; 2
    3fa6:	b9 f1       	breq	.+110    	; 0x4016 <__fpcmp_parts_f+0xa8>
    3fa8:	81 81       	ldd	r24, Z+1	; 0x01
    3faa:	88 23       	and	r24, r24
    3fac:	89 f1       	breq	.+98     	; 0x4010 <__fpcmp_parts_f+0xa2>
    3fae:	2d c0       	rjmp	.+90     	; 0x400a <__fpcmp_parts_f+0x9c>
    3fb0:	11 96       	adiw	r26, 0x01	; 1
    3fb2:	1c 91       	ld	r17, X
    3fb4:	11 97       	sbiw	r26, 0x01	; 1
    3fb6:	82 30       	cpi	r24, 0x02	; 2
    3fb8:	f1 f0       	breq	.+60     	; 0x3ff6 <__fpcmp_parts_f+0x88>
    3fba:	81 81       	ldd	r24, Z+1	; 0x01
    3fbc:	18 17       	cp	r17, r24
    3fbe:	d9 f4       	brne	.+54     	; 0x3ff6 <__fpcmp_parts_f+0x88>
    3fc0:	12 96       	adiw	r26, 0x02	; 2
    3fc2:	2d 91       	ld	r18, X+
    3fc4:	3c 91       	ld	r19, X
    3fc6:	13 97       	sbiw	r26, 0x03	; 3
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	93 81       	ldd	r25, Z+3	; 0x03
    3fcc:	82 17       	cp	r24, r18
    3fce:	93 07       	cpc	r25, r19
    3fd0:	94 f0       	brlt	.+36     	; 0x3ff6 <__fpcmp_parts_f+0x88>
    3fd2:	28 17       	cp	r18, r24
    3fd4:	39 07       	cpc	r19, r25
    3fd6:	bc f0       	brlt	.+46     	; 0x4006 <__fpcmp_parts_f+0x98>
    3fd8:	14 96       	adiw	r26, 0x04	; 4
    3fda:	8d 91       	ld	r24, X+
    3fdc:	9d 91       	ld	r25, X+
    3fde:	0d 90       	ld	r0, X+
    3fe0:	bc 91       	ld	r27, X
    3fe2:	a0 2d       	mov	r26, r0
    3fe4:	24 81       	ldd	r18, Z+4	; 0x04
    3fe6:	35 81       	ldd	r19, Z+5	; 0x05
    3fe8:	46 81       	ldd	r20, Z+6	; 0x06
    3fea:	57 81       	ldd	r21, Z+7	; 0x07
    3fec:	28 17       	cp	r18, r24
    3fee:	39 07       	cpc	r19, r25
    3ff0:	4a 07       	cpc	r20, r26
    3ff2:	5b 07       	cpc	r21, r27
    3ff4:	18 f4       	brcc	.+6      	; 0x3ffc <__fpcmp_parts_f+0x8e>
    3ff6:	11 23       	and	r17, r17
    3ff8:	41 f0       	breq	.+16     	; 0x400a <__fpcmp_parts_f+0x9c>
    3ffa:	0a c0       	rjmp	.+20     	; 0x4010 <__fpcmp_parts_f+0xa2>
    3ffc:	82 17       	cp	r24, r18
    3ffe:	93 07       	cpc	r25, r19
    4000:	a4 07       	cpc	r26, r20
    4002:	b5 07       	cpc	r27, r21
    4004:	40 f4       	brcc	.+16     	; 0x4016 <__fpcmp_parts_f+0xa8>
    4006:	11 23       	and	r17, r17
    4008:	19 f0       	breq	.+6      	; 0x4010 <__fpcmp_parts_f+0xa2>
    400a:	61 e0       	ldi	r22, 0x01	; 1
    400c:	70 e0       	ldi	r23, 0x00	; 0
    400e:	05 c0       	rjmp	.+10     	; 0x401a <__fpcmp_parts_f+0xac>
    4010:	6f ef       	ldi	r22, 0xFF	; 255
    4012:	7f ef       	ldi	r23, 0xFF	; 255
    4014:	02 c0       	rjmp	.+4      	; 0x401a <__fpcmp_parts_f+0xac>
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	cb 01       	movw	r24, r22
    401c:	1f 91       	pop	r17
    401e:	08 95       	ret

00004020 <__udivmodhi4>:
    4020:	aa 1b       	sub	r26, r26
    4022:	bb 1b       	sub	r27, r27
    4024:	51 e1       	ldi	r21, 0x11	; 17
    4026:	07 c0       	rjmp	.+14     	; 0x4036 <__udivmodhi4_ep>

00004028 <__udivmodhi4_loop>:
    4028:	aa 1f       	adc	r26, r26
    402a:	bb 1f       	adc	r27, r27
    402c:	a6 17       	cp	r26, r22
    402e:	b7 07       	cpc	r27, r23
    4030:	10 f0       	brcs	.+4      	; 0x4036 <__udivmodhi4_ep>
    4032:	a6 1b       	sub	r26, r22
    4034:	b7 0b       	sbc	r27, r23

00004036 <__udivmodhi4_ep>:
    4036:	88 1f       	adc	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	5a 95       	dec	r21
    403c:	a9 f7       	brne	.-22     	; 0x4028 <__udivmodhi4_loop>
    403e:	80 95       	com	r24
    4040:	90 95       	com	r25
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	08 95       	ret

00004048 <__divmodhi4>:
    4048:	97 fb       	bst	r25, 7
    404a:	09 2e       	mov	r0, r25
    404c:	07 26       	eor	r0, r23
    404e:	0a d0       	rcall	.+20     	; 0x4064 <__divmodhi4_neg1>
    4050:	77 fd       	sbrc	r23, 7
    4052:	04 d0       	rcall	.+8      	; 0x405c <__divmodhi4_neg2>
    4054:	e5 df       	rcall	.-54     	; 0x4020 <__udivmodhi4>
    4056:	06 d0       	rcall	.+12     	; 0x4064 <__divmodhi4_neg1>
    4058:	00 20       	and	r0, r0
    405a:	1a f4       	brpl	.+6      	; 0x4062 <__divmodhi4_exit>

0000405c <__divmodhi4_neg2>:
    405c:	70 95       	com	r23
    405e:	61 95       	neg	r22
    4060:	7f 4f       	sbci	r23, 0xFF	; 255

00004062 <__divmodhi4_exit>:
    4062:	08 95       	ret

00004064 <__divmodhi4_neg1>:
    4064:	f6 f7       	brtc	.-4      	; 0x4062 <__divmodhi4_exit>
    4066:	90 95       	com	r25
    4068:	81 95       	neg	r24
    406a:	9f 4f       	sbci	r25, 0xFF	; 255
    406c:	08 95       	ret

0000406e <__prologue_saves__>:
    406e:	2f 92       	push	r2
    4070:	3f 92       	push	r3
    4072:	4f 92       	push	r4
    4074:	5f 92       	push	r5
    4076:	6f 92       	push	r6
    4078:	7f 92       	push	r7
    407a:	8f 92       	push	r8
    407c:	9f 92       	push	r9
    407e:	af 92       	push	r10
    4080:	bf 92       	push	r11
    4082:	cf 92       	push	r12
    4084:	df 92       	push	r13
    4086:	ef 92       	push	r14
    4088:	ff 92       	push	r15
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    408e:	cf 93       	push	r28
    4090:	df 93       	push	r29
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	ca 1b       	sub	r28, r26
    4098:	db 0b       	sbc	r29, r27
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	09 94       	ijmp

000040a6 <__epilogue_restores__>:
    40a6:	2a 88       	ldd	r2, Y+18	; 0x12
    40a8:	39 88       	ldd	r3, Y+17	; 0x11
    40aa:	48 88       	ldd	r4, Y+16	; 0x10
    40ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    40ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    40b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    40b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    40b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    40b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    40b8:	b9 84       	ldd	r11, Y+9	; 0x09
    40ba:	c8 84       	ldd	r12, Y+8	; 0x08
    40bc:	df 80       	ldd	r13, Y+7	; 0x07
    40be:	ee 80       	ldd	r14, Y+6	; 0x06
    40c0:	fd 80       	ldd	r15, Y+5	; 0x05
    40c2:	0c 81       	ldd	r16, Y+4	; 0x04
    40c4:	1b 81       	ldd	r17, Y+3	; 0x03
    40c6:	aa 81       	ldd	r26, Y+2	; 0x02
    40c8:	b9 81       	ldd	r27, Y+1	; 0x01
    40ca:	ce 0f       	add	r28, r30
    40cc:	d1 1d       	adc	r29, r1
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	ed 01       	movw	r28, r26
    40da:	08 95       	ret

000040dc <_exit>:
    40dc:	f8 94       	cli

000040de <__stop_program>:
    40de:	ff cf       	rjmp	.-2      	; 0x40de <__stop_program>
